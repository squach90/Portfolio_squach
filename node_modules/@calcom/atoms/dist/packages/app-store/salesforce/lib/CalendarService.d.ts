import jsforce from "jsforce";
import type { Calendar, CalendarEvent, IntegrationCalendar, NewCalendarEventType } from "@calcom/types/Calendar";
import type { CredentialPayload } from "@calcom/types/Credential";
type ContactSearchResult = {
    attributes: {
        type: string;
        url: string;
    };
    Id: string;
    Email: string;
};
export default class SalesforceCalendarService implements Calendar {
    private integrationName;
    private conn;
    private log;
    private calWarnings;
    constructor(credential: CredentialPayload);
    private getClient;
    private salesforceContactCreate;
    private salesforceContactSearch;
    private getSalesforceEventBody;
    private salesforceCreateEventApiCall;
    private salesforceCreateEvent;
    private salesforceUpdateEvent;
    private salesforceDeleteEvent;
    handleEventCreation(event: CalendarEvent, contacts: Omit<ContactSearchResult, "attributes">[]): Promise<{
        uid: string;
        id: string;
        type: string;
        password: string;
        url: string;
        additionalInfo: {
            contacts: Omit<ContactSearchResult, "attributes">[];
            sfEvent: jsforce.SuccessResult;
            calWarnings: string[];
        };
    }>;
    createEvent(event: CalendarEvent): Promise<NewCalendarEventType>;
    updateEvent(uid: string, event: CalendarEvent): Promise<NewCalendarEventType>;
    deleteEvent(uid: string): Promise<void>;
    getAvailability(_dateFrom: string, _dateTo: string, _selectedCalendars: IntegrationCalendar[]): Promise<never[]>;
    listCalendars(_event?: CalendarEvent): Promise<never[]>;
}
export {};
//# sourceMappingURL=CalendarService.d.ts.map