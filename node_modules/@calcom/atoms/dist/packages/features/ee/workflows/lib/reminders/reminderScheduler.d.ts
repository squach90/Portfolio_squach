import type { Workflow, WorkflowsOnEventTypes, WorkflowStep } from '../../../../../prisma-client';
import { WorkflowMethods } from '../../../../../prisma/enums';
import type { CalendarEvent } from "@calcom/types/Calendar";
type ExtendedCalendarEvent = CalendarEvent & {
    metadata?: {
        videoCallUrl: string | undefined;
    };
    eventType: {
        slug?: string;
    };
};
type ProcessWorkflowStepParams = {
    smsReminderNumber: string | null;
    calendarEvent: ExtendedCalendarEvent;
    emailAttendeeSendToOverride?: string;
    hideBranding?: boolean;
    seatReferenceUid?: string;
};
export interface ScheduleWorkflowRemindersArgs extends ProcessWorkflowStepParams {
    workflows: (WorkflowsOnEventTypes & {
        workflow: Workflow & {
            steps: WorkflowStep[];
        };
    })[];
    isNotConfirmed?: boolean;
    isRescheduleEvent?: boolean;
    isFirstRecurringEvent?: boolean;
}
export declare const scheduleWorkflowReminders: (args: ScheduleWorkflowRemindersArgs) => Promise<void>;
export declare const cancelWorkflowReminders: (workflowReminders: {
    method: WorkflowMethods;
    id: number;
    referenceId: string | null;
}[]) => Promise<void>;
export interface SendCancelledRemindersArgs {
    workflows: (WorkflowsOnEventTypes & {
        workflow: Workflow & {
            steps: WorkflowStep[];
        };
    })[];
    smsReminderNumber: string | null;
    evt: ExtendedCalendarEvent;
    hideBranding?: boolean;
}
export declare const sendCancelledReminders: (args: SendCancelledRemindersArgs) => Promise<void>;
export {};
//# sourceMappingURL=reminderScheduler.d.ts.map