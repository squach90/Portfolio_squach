import type { EventTypeCustomInput, EventType, Prisma, Workflow } from '../../../prisma-client';
import type { z } from "zod";
import { customInputSchema, eventTypeBookingFields, EventTypeMetaDataSchema } from '../../../prisma/zod-utils';
type Fields = z.infer<typeof eventTypeBookingFields>;
export declare const getSmsReminderNumberField: () => {
    readonly name: "smsReminderNumber";
    readonly type: "phone";
    readonly defaultLabel: "number_text_notifications";
    readonly defaultPlaceholder: "enter_phone_number";
    readonly editable: "system";
};
export declare const getSmsReminderNumberSource: ({ workflowId, isSmsReminderNumberRequired, }: {
    workflowId: Workflow["id"];
    isSmsReminderNumberRequired: boolean;
}) => {
    id: string;
    type: string;
    label: string;
    fieldRequired: boolean;
    editUrl: string;
};
/**
 * This fn is the key to ensure on the fly mapping of customInputs to bookingFields and ensuring that all the systems fields are present and correctly ordered in bookingFields
 */
export declare const getBookingFieldsWithSystemFields: ({ bookingFields, disableGuests, disableBookingTitle, customInputs, metadata, workflows, }: {
    bookingFields: Fields | EventType["bookingFields"];
    disableGuests: boolean;
    disableBookingTitle?: boolean;
    customInputs: EventTypeCustomInput[] | z.infer<typeof customInputSchema>[];
    metadata: EventType["metadata"] | z.infer<typeof EventTypeMetaDataSchema>;
    workflows: Prisma.EventTypeGetPayload<{
        select: {
            workflows: {
                select: {
                    workflow: {
                        select: {
                            id: true;
                            steps: true;
                        };
                    };
                };
            };
        };
    }>["workflows"];
}) => {
    name: string;
    type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
    options?: {
        label: string;
        value: string;
    }[] | undefined;
    required?: boolean | undefined;
    label?: string | undefined;
    placeholder?: string | undefined;
    defaultLabel?: string | undefined;
    defaultPlaceholder?: string | undefined;
    labelAsSafeHtml?: string | undefined;
    getOptionsAt?: string | undefined;
    optionsInputs?: Record<string, {
        type: "text" | "address" | "phone";
        required?: boolean | undefined;
        placeholder?: string | undefined;
    }> | undefined;
    variant?: string | undefined;
    variantsConfig?: {
        variants: Record<string, {
            fields: {
                name: string;
                type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                required?: boolean | undefined;
                label?: string | undefined;
                placeholder?: string | undefined;
                labelAsSafeHtml?: string | undefined;
            }[];
        }>;
    } | undefined;
    views?: {
        label: string;
        id: string;
        description?: string | undefined;
    }[] | undefined;
    hideWhenJustOneOption?: boolean | undefined;
    hidden?: boolean | undefined;
    editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
    sources?: {
        label: string;
        type: string;
        id: string;
        editUrl?: string | undefined;
        fieldRequired?: boolean | undefined;
    }[] | undefined;
}[] & z.BRAND<"HAS_SYSTEM_FIELDS">;
export declare const ensureBookingInputsHaveSystemFields: ({ bookingFields, disableGuests, disableBookingTitle, additionalNotesRequired, customInputs, workflows, }: {
    bookingFields: Fields;
    disableGuests: boolean;
    disableBookingTitle?: boolean;
    additionalNotesRequired: boolean;
    customInputs: z.infer<typeof customInputSchema>[];
    workflows: Prisma.EventTypeGetPayload<{
        select: {
            workflows: {
                select: {
                    workflow: {
                        select: {
                            id: true;
                            steps: true;
                        };
                    };
                };
            };
        };
    }>["workflows"];
}) => {
    name: string;
    type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
    options?: {
        label: string;
        value: string;
    }[] | undefined;
    required?: boolean | undefined;
    label?: string | undefined;
    placeholder?: string | undefined;
    defaultLabel?: string | undefined;
    defaultPlaceholder?: string | undefined;
    labelAsSafeHtml?: string | undefined;
    getOptionsAt?: string | undefined;
    optionsInputs?: Record<string, {
        type: "text" | "address" | "phone";
        required?: boolean | undefined;
        placeholder?: string | undefined;
    }> | undefined;
    variant?: string | undefined;
    variantsConfig?: {
        variants: Record<string, {
            fields: {
                name: string;
                type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                required?: boolean | undefined;
                label?: string | undefined;
                placeholder?: string | undefined;
                labelAsSafeHtml?: string | undefined;
            }[];
        }>;
    } | undefined;
    views?: {
        label: string;
        id: string;
        description?: string | undefined;
    }[] | undefined;
    hideWhenJustOneOption?: boolean | undefined;
    hidden?: boolean | undefined;
    editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
    sources?: {
        label: string;
        type: string;
        id: string;
        editUrl?: string | undefined;
        fieldRequired?: boolean | undefined;
    }[] | undefined;
}[] & z.BRAND<"HAS_SYSTEM_FIELDS">;
export {};
//# sourceMappingURL=getBookingFields.d.ts.map