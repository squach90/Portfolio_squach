import * as z from "zod";
import { CompleteUser, CompleteVerificationToken, CompleteEventType } from "./index";
export declare const _SecondaryEmailModel: z.ZodObject<{
    id: z.ZodNumber;
    userId: z.ZodNumber;
    email: z.ZodString;
    emailVerified: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    email: string;
    id: number;
    userId: number;
    emailVerified?: Date | null | undefined;
}, {
    email: string;
    id: number;
    userId: number;
    emailVerified?: Date | null | undefined;
}>;
export interface CompleteSecondaryEmail extends z.infer<typeof _SecondaryEmailModel> {
    user: CompleteUser;
    verificationTokens: CompleteVerificationToken[];
    eventTypes: CompleteEventType[];
}
/**
 * SecondaryEmailModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const SecondaryEmailModel: z.ZodSchema<CompleteSecondaryEmail>;
//# sourceMappingURL=secondaryemail.d.ts.map