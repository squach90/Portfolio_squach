import * as z from "zod";
import { CompleteUser, CompleteEventType, CompleteAvailability } from "./index";
export declare const _ScheduleModel: z.ZodObject<{
    id: z.ZodNumber;
    userId: z.ZodNumber;
    name: z.ZodString;
    timeZone: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: number;
    userId: number;
    timeZone?: string | null | undefined;
}, {
    name: string;
    id: number;
    userId: number;
    timeZone?: string | null | undefined;
}>;
export interface CompleteSchedule extends z.infer<typeof _ScheduleModel> {
    user: CompleteUser;
    eventType: CompleteEventType[];
    availability: CompleteAvailability[];
}
/**
 * ScheduleModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const ScheduleModel: z.ZodSchema<CompleteSchedule>;
//# sourceMappingURL=schedule.d.ts.map