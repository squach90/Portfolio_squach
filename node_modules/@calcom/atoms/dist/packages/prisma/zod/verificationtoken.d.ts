import * as z from "zod";
import { CompleteTeam, CompleteSecondaryEmail } from "./index";
export declare const _VerificationTokenModel: z.ZodObject<{
    id: z.ZodNumber;
    identifier: z.ZodString;
    token: z.ZodString;
    expires: z.ZodDate;
    expiresInDays: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    teamId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    secondaryEmailId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    expires: Date;
    identifier: string;
    id: number;
    token: string;
    createdAt: Date;
    updatedAt: Date;
    expiresInDays?: number | null | undefined;
    teamId?: number | null | undefined;
    secondaryEmailId?: number | null | undefined;
}, {
    expires: Date;
    identifier: string;
    id: number;
    token: string;
    createdAt: Date;
    updatedAt: Date;
    expiresInDays?: number | null | undefined;
    teamId?: number | null | undefined;
    secondaryEmailId?: number | null | undefined;
}>;
export interface CompleteVerificationToken extends z.infer<typeof _VerificationTokenModel> {
    team?: CompleteTeam | null;
    secondaryEmail?: CompleteSecondaryEmail | null;
}
/**
 * VerificationTokenModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const VerificationTokenModel: z.ZodSchema<CompleteVerificationToken>;
//# sourceMappingURL=verificationtoken.d.ts.map