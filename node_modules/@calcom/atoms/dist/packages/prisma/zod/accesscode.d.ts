import * as z from "zod";
import { CompleteOAuthClient, CompleteUser, CompleteTeam } from "./index";
export declare const _AccessCodeModel: z.ZodObject<{
    id: z.ZodNumber;
    code: z.ZodString;
    clientId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expiresAt: z.ZodDate;
    scopes: z.ZodArray<z.ZodNativeEnum<{
        READ_BOOKING: "READ_BOOKING";
        READ_PROFILE: "READ_PROFILE";
    }>, "many">;
    userId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    teamId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    id: number;
    expiresAt: Date;
    scopes: ("READ_BOOKING" | "READ_PROFILE")[];
    clientId?: string | null | undefined;
    userId?: number | null | undefined;
    teamId?: number | null | undefined;
}, {
    code: string;
    id: number;
    expiresAt: Date;
    scopes: ("READ_BOOKING" | "READ_PROFILE")[];
    clientId?: string | null | undefined;
    userId?: number | null | undefined;
    teamId?: number | null | undefined;
}>;
export interface CompleteAccessCode extends z.infer<typeof _AccessCodeModel> {
    client?: CompleteOAuthClient | null;
    user?: CompleteUser | null;
    team?: CompleteTeam | null;
}
/**
 * AccessCodeModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const AccessCodeModel: z.ZodSchema<CompleteAccessCode>;
//# sourceMappingURL=accesscode.d.ts.map