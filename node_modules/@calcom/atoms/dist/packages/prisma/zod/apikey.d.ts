import * as z from "zod";
import { CompleteUser, CompleteTeam, CompleteApp } from "./index";
export declare const _ApiKeyModel: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodNumber;
    teamId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodDate;
    expiresAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    lastUsedAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    hashedKey: z.ZodString;
    appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    userId: number;
    createdAt: Date;
    hashedKey: string;
    teamId?: number | null | undefined;
    note?: string | null | undefined;
    expiresAt?: Date | null | undefined;
    lastUsedAt?: Date | null | undefined;
    appId?: string | null | undefined;
}, {
    id: string;
    userId: number;
    createdAt: Date;
    hashedKey: string;
    teamId?: number | null | undefined;
    note?: string | null | undefined;
    expiresAt?: Date | null | undefined;
    lastUsedAt?: Date | null | undefined;
    appId?: string | null | undefined;
}>;
export interface CompleteApiKey extends z.infer<typeof _ApiKeyModel> {
    user?: CompleteUser | null;
    team?: CompleteTeam | null;
    app?: CompleteApp | null;
}
/**
 * ApiKeyModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const ApiKeyModel: z.ZodSchema<CompleteApiKey>;
//# sourceMappingURL=apikey.d.ts.map