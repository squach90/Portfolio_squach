import * as z from "zod";
import { CompleteUser, CompleteBooking, CompleteEventType, CompleteCredential } from "./index";
export declare const _DestinationCalendarModel: z.ZodObject<{
    id: z.ZodNumber;
    integration: z.ZodString;
    externalId: z.ZodString;
    primaryEmail: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    eventTypeId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    credentialId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    id: number;
    externalId: string;
    integration: string;
    primaryEmail?: string | null | undefined;
    userId?: number | null | undefined;
    eventTypeId?: number | null | undefined;
    credentialId?: number | null | undefined;
}, {
    id: number;
    externalId: string;
    integration: string;
    primaryEmail?: string | null | undefined;
    userId?: number | null | undefined;
    eventTypeId?: number | null | undefined;
    credentialId?: number | null | undefined;
}>;
export interface CompleteDestinationCalendar extends z.infer<typeof _DestinationCalendarModel> {
    user?: CompleteUser | null;
    booking: CompleteBooking[];
    eventType?: CompleteEventType | null;
    credential?: CompleteCredential | null;
}
/**
 * DestinationCalendarModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const DestinationCalendarModel: z.ZodSchema<CompleteDestinationCalendar>;
//# sourceMappingURL=destinationcalendar.d.ts.map