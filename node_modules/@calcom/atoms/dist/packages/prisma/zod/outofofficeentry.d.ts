import * as z from "zod";
import { CompleteUser, CompleteOutOfOfficeReason } from "./index";
export declare const _OutOfOfficeEntryModel: z.ZodObject<{
    id: z.ZodNumber;
    uuid: z.ZodString;
    start: z.ZodDate;
    end: z.ZodDate;
    notes: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userId: z.ZodNumber;
    toUserId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    reasonId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: number;
    userId: number;
    start: Date;
    end: Date;
    createdAt: Date;
    updatedAt: Date;
    uuid: string;
    notes?: string | null | undefined;
    toUserId?: number | null | undefined;
    reasonId?: number | null | undefined;
}, {
    id: number;
    userId: number;
    start: Date;
    end: Date;
    createdAt: Date;
    updatedAt: Date;
    uuid: string;
    notes?: string | null | undefined;
    toUserId?: number | null | undefined;
    reasonId?: number | null | undefined;
}>;
export interface CompleteOutOfOfficeEntry extends z.infer<typeof _OutOfOfficeEntryModel> {
    user: CompleteUser;
    toUser?: CompleteUser | null;
    reason?: CompleteOutOfOfficeReason | null;
}
/**
 * OutOfOfficeEntryModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const OutOfOfficeEntryModel: z.ZodSchema<CompleteOutOfOfficeEntry>;
//# sourceMappingURL=outofofficeentry.d.ts.map