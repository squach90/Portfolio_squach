import * as z from "zod";
import { CompleteBooking } from "./index";
export declare const _BookingReferenceModel: z.ZodObject<{
    id: z.ZodNumber;
    type: z.ZodString;
    uid: z.ZodString;
    meetingId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    thirdPartyRecurringEventId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    meetingPassword: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    meetingUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    bookingId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    externalCalendarId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    deleted: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    credentialId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    id: number;
    uid: string;
    meetingId?: string | null | undefined;
    thirdPartyRecurringEventId?: string | null | undefined;
    meetingPassword?: string | null | undefined;
    meetingUrl?: string | null | undefined;
    bookingId?: number | null | undefined;
    externalCalendarId?: string | null | undefined;
    deleted?: boolean | null | undefined;
    credentialId?: number | null | undefined;
}, {
    type: string;
    id: number;
    uid: string;
    meetingId?: string | null | undefined;
    thirdPartyRecurringEventId?: string | null | undefined;
    meetingPassword?: string | null | undefined;
    meetingUrl?: string | null | undefined;
    bookingId?: number | null | undefined;
    externalCalendarId?: string | null | undefined;
    deleted?: boolean | null | undefined;
    credentialId?: number | null | undefined;
}>;
export interface CompleteBookingReference extends z.infer<typeof _BookingReferenceModel> {
    booking?: CompleteBooking | null;
}
/**
 * BookingReferenceModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const BookingReferenceModel: z.ZodSchema<CompleteBookingReference>;
//# sourceMappingURL=bookingreference.d.ts.map