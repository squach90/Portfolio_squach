import * as z from "zod";
import { CompleteTeam, CompleteDSyncData } from "./index";
export declare const _OrganizationSettingsModel: z.ZodObject<{
    id: z.ZodNumber;
    organizationId: z.ZodNumber;
    isOrganizationConfigured: z.ZodBoolean;
    isOrganizationVerified: z.ZodBoolean;
    orgAutoAcceptEmail: z.ZodString;
    lockEventTypeCreationForUsers: z.ZodBoolean;
    adminGetsNoSlotsNotification: z.ZodBoolean;
    isAdminReviewed: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    id: number;
    isOrganizationVerified: boolean;
    isOrganizationConfigured: boolean;
    isAdminReviewed: boolean;
    orgAutoAcceptEmail: string;
    organizationId: number;
    lockEventTypeCreationForUsers: boolean;
    adminGetsNoSlotsNotification: boolean;
}, {
    id: number;
    isOrganizationVerified: boolean;
    isOrganizationConfigured: boolean;
    isAdminReviewed: boolean;
    orgAutoAcceptEmail: string;
    organizationId: number;
    lockEventTypeCreationForUsers: boolean;
    adminGetsNoSlotsNotification: boolean;
}>;
export interface CompleteOrganizationSettings extends z.infer<typeof _OrganizationSettingsModel> {
    organization: CompleteTeam;
    dSyncData?: CompleteDSyncData | null;
}
/**
 * OrganizationSettingsModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const OrganizationSettingsModel: z.ZodSchema<CompleteOrganizationSettings>;
//# sourceMappingURL=organizationsettings.d.ts.map