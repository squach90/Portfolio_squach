import * as z from "zod";
import { CompleteUser, CompleteCredential } from "./index";
export declare const _SelectedCalendarModel: z.ZodObject<{
    userId: z.ZodNumber;
    integration: z.ZodString;
    externalId: z.ZodString;
    credentialId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    externalId: string;
    userId: number;
    integration: string;
    credentialId?: number | null | undefined;
}, {
    externalId: string;
    userId: number;
    integration: string;
    credentialId?: number | null | undefined;
}>;
export interface CompleteSelectedCalendar extends z.infer<typeof _SelectedCalendarModel> {
    user: CompleteUser;
    credential?: CompleteCredential | null;
}
/**
 * SelectedCalendarModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const SelectedCalendarModel: z.ZodSchema<CompleteSelectedCalendar>;
//# sourceMappingURL=selectedcalendar.d.ts.map