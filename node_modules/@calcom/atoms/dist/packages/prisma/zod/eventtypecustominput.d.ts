import * as z from "zod";
import { CompleteEventType } from "./index";
export declare const _EventTypeCustomInputModel: z.ZodObject<{
    id: z.ZodNumber;
    eventTypeId: z.ZodNumber;
    label: z.ZodString;
    type: z.ZodNativeEnum<{
        TEXT: "TEXT";
        TEXTLONG: "TEXTLONG";
        NUMBER: "NUMBER";
        BOOL: "BOOL";
        RADIO: "RADIO";
        PHONE: "PHONE";
    }>;
    options: z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        type: string;
    }, {
        label: string;
        type: string;
    }>, "many">;
    required: z.ZodBoolean;
    placeholder: z.ZodString;
}, "strip", z.ZodTypeAny, {
    options: {
        label: string;
        type: string;
    }[];
    required: boolean;
    label: string;
    placeholder: string;
    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
    id: number;
    eventTypeId: number;
}, {
    options: {
        label: string;
        type: string;
    }[];
    required: boolean;
    label: string;
    placeholder: string;
    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
    id: number;
    eventTypeId: number;
}>;
export interface CompleteEventTypeCustomInput extends z.infer<typeof _EventTypeCustomInputModel> {
    eventType: CompleteEventType;
}
/**
 * EventTypeCustomInputModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const EventTypeCustomInputModel: z.ZodSchema<CompleteEventTypeCustomInput>;
//# sourceMappingURL=eventtypecustominput.d.ts.map