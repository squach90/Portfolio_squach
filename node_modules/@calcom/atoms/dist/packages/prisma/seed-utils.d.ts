import type { Prisma, UserPermissionRole } from '../prisma-client';
import { MembershipRole } from './enums';
export declare function createUserAndEventType({ user, eventTypes, credentials, }: {
    user: {
        email: string;
        password: string;
        username: string;
        name: string;
        completedOnboarding?: boolean;
        timeZone?: string;
        role?: UserPermissionRole;
        theme?: "dark" | "light";
        avatarUrl?: string | null;
    };
    eventTypes?: Array<Prisma.EventTypeUncheckedCreateInput & {
        _bookings?: Prisma.BookingCreateInput[];
        _numBookings?: number;
    }>;
    credentials?: ({
        type: string;
        key: Prisma.JsonObject;
        appId: string;
    } | null)[];
}): Promise<{
    username: string | null;
    email: string;
    role: import('../prisma-client').$Enums.UserPermissionRole;
    name: string | null;
    bio: string | null;
    theme: string | null;
    verified: boolean | null;
    locked: boolean;
    id: number;
    timeFormat: number | null;
    defaultScheduleId: number | null;
    weekStart: string;
    timeZone: string;
    startTime: number;
    endTime: number;
    metadata: Prisma.JsonValue;
    emailVerified: Date | null;
    avatar: string | null;
    avatarUrl: string | null;
    bufferTime: number;
    hideBranding: boolean;
    appTheme: string | null;
    createdDate: Date;
    trialEndsAt: Date | null;
    completedOnboarding: boolean;
    locale: string | null;
    twoFactorSecret: string | null;
    twoFactorEnabled: boolean;
    backupCodes: string | null;
    identityProvider: import('../prisma-client').$Enums.IdentityProvider;
    identityProviderId: string | null;
    invitedTo: number | null;
    brandColor: string | null;
    darkBrandColor: string | null;
    away: boolean;
    allowDynamicBooking: boolean | null;
    allowSEOIndexing: boolean | null;
    receiveMonthlyDigestEmail: boolean | null;
    disableImpersonation: boolean;
    organizationId: number | null;
    movedToProfileId: number | null;
    isPlatformManaged: boolean;
    smsLockState: import('../prisma-client').$Enums.SMSLockState;
}>;
export declare function createTeamAndAddUsers(teamInput: Prisma.TeamCreateInput, users?: {
    id: number;
    username: string;
    role?: MembershipRole;
}[]): Promise<({
    eventTypes: {
        price: number;
        title: string;
        description: string | null;
        hidden: boolean;
        length: number;
        currency: string;
        id: number;
        timeZone: string | null;
        userId: number | null;
        metadata: Prisma.JsonValue;
        position: number;
        slug: string;
        locations: Prisma.JsonValue;
        offsetStart: number;
        profileId: number | null;
        teamId: number | null;
        eventName: string | null;
        parentId: number | null;
        bookingFields: Prisma.JsonValue;
        periodType: import('../prisma-client').$Enums.PeriodType;
        periodStartDate: Date | null;
        periodEndDate: Date | null;
        periodDays: number | null;
        periodCountCalendarDays: boolean | null;
        lockTimeZoneToggleOnBookingPage: boolean;
        requiresConfirmation: boolean;
        requiresBookerEmailVerification: boolean;
        recurringEvent: Prisma.JsonValue;
        disableGuests: boolean;
        hideCalendarNotes: boolean;
        minimumBookingNotice: number;
        beforeEventBuffer: number;
        afterEventBuffer: number;
        seatsPerTimeSlot: number | null;
        onlyShowFirstAvailableSlot: boolean;
        seatsShowAttendees: boolean | null;
        seatsShowAvailabilityCount: boolean | null;
        schedulingType: import('../prisma-client').$Enums.SchedulingType | null;
        scheduleId: number | null;
        slotInterval: number | null;
        successRedirectUrl: string | null;
        forwardParamsSuccessRedirect: boolean | null;
        bookingLimits: Prisma.JsonValue;
        durationLimits: Prisma.JsonValue;
        isInstantEvent: boolean;
        assignAllTeamMembers: boolean;
        useEventTypeDestinationCalendarEmail: boolean;
        secondaryEmailId: number | null;
    }[];
} & {
    name: string;
    logo: string | null;
    bio: string | null;
    theme: string | null;
    id: number;
    timeFormat: number | null;
    weekStart: string;
    timeZone: string;
    metadata: Prisma.JsonValue;
    slug: string | null;
    parentId: number | null;
    hideBranding: boolean;
    brandColor: string | null;
    darkBrandColor: string | null;
    smsLockState: import('../prisma-client').$Enums.SMSLockState;
    createdAt: Date;
    logoUrl: string | null;
    calVideoLogo: string | null;
    appLogo: string | null;
    appIconLogo: string | null;
    isPrivate: boolean;
    hideBookATeamMember: boolean;
    bannerUrl: string | null;
    isOrganization: boolean;
    pendingPayment: boolean;
    isPlatform: boolean;
}) | undefined>;
//# sourceMappingURL=seed-utils.d.ts.map