import type { NextApiRequest, NextApiResponse } from "next";
import type { CollectOpts } from "next-collect";
import { useCollector } from "next-collect/client";
import type { NextRequest, NextResponse } from "next/server";
export declare const telemetryEventTypes: {
    pageView: string;
    apiCall: string;
    bookingConfirmed: string;
    bookingCancelled: string;
    importSubmitted: string;
    login: string;
    embedView: string;
    embedBookingConfirmed: string;
    onboardingFinished: string;
    onboardingStarted: string;
    signup: string;
    team_checkout_session_created: string;
    team_created: string;
    slugReplacementAction: string;
    org_created: string;
};
export declare function collectPageParameters(route?: string, extraData?: Record<string, unknown>): Record<string, unknown>;
export declare const nextCollectBasicSettings: CollectOpts;
export declare const extendEventData: (req: NextRequest | NextApiRequest, res: NextResponse | NextApiResponse, original: {
    page_url: string;
    isTeamBooking: boolean;
}) => {
    title: string;
    ipAddress: string;
    queryString: string;
    page_url: string | undefined;
    licensekey: string | undefined;
    isTeamBooking: boolean | undefined;
    referrer: string;
    onVercel: boolean;
    isAuthorized: boolean;
    utc_time: string;
};
export declare const useTelemetry: typeof useCollector;
//# sourceMappingURL=telemetry.d.ts.map