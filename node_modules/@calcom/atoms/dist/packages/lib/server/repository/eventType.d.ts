import type { EventType as PrismaEventType } from '../../../prisma-client';
import { Prisma } from '../../../prisma-client';
import type { Ensure } from "@calcom/types/utils";
type NotSupportedProps = "locations";
type IEventType = Ensure<Partial<Omit<Prisma.EventTypeCreateInput, NotSupportedProps> & {
    userId: PrismaEventType["userId"];
    profileId: PrismaEventType["profileId"];
    teamId: PrismaEventType["teamId"];
    parentId: PrismaEventType["parentId"];
    scheduleId: PrismaEventType["scheduleId"];
}>, "title" | "slug" | "length">;
export declare class EventTypeRepository {
    static create(data: IEventType): Promise<{
        price: number;
        title: string;
        description: string | null;
        hidden: boolean;
        length: number;
        currency: string;
        id: number;
        timeZone: string | null;
        userId: number | null;
        metadata: Prisma.JsonValue;
        position: number;
        slug: string;
        locations: Prisma.JsonValue;
        offsetStart: number;
        profileId: number | null;
        teamId: number | null;
        eventName: string | null;
        parentId: number | null;
        bookingFields: Prisma.JsonValue;
        periodType: import('../../../prisma-client').$Enums.PeriodType;
        periodStartDate: Date | null;
        periodEndDate: Date | null;
        periodDays: number | null;
        periodCountCalendarDays: boolean | null;
        lockTimeZoneToggleOnBookingPage: boolean;
        requiresConfirmation: boolean;
        requiresBookerEmailVerification: boolean;
        recurringEvent: Prisma.JsonValue;
        disableGuests: boolean;
        hideCalendarNotes: boolean;
        minimumBookingNotice: number;
        beforeEventBuffer: number;
        afterEventBuffer: number;
        seatsPerTimeSlot: number | null;
        onlyShowFirstAvailableSlot: boolean;
        seatsShowAttendees: boolean | null;
        seatsShowAvailabilityCount: boolean | null;
        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
        scheduleId: number | null;
        slotInterval: number | null;
        successRedirectUrl: string | null;
        forwardParamsSuccessRedirect: boolean | null;
        bookingLimits: Prisma.JsonValue;
        durationLimits: Prisma.JsonValue;
        isInstantEvent: boolean;
        assignAllTeamMembers: boolean;
        useEventTypeDestinationCalendarEmail: boolean;
        secondaryEmailId: number | null;
    }>;
    static findAllByUpId({ upId, userId }: {
        upId: string;
        userId: number;
    }, { orderBy, where, }?: {
        orderBy?: Prisma.EventTypeOrderByWithRelationInput[];
        where?: Prisma.EventTypeWhereInput;
    }): Promise<{
        price: number;
        title: string;
        description: string | null;
        hidden: boolean;
        length: number;
        users: {
            username: string | null;
            name: string | null;
            id: number;
            avatarUrl: string | null;
        }[];
        hosts: ({
            user: {
                username: string | null;
                name: string | null;
                id: number;
                avatarUrl: string | null;
            };
        } & {
            eventTypeId: number;
            userId: number;
            isFixed: boolean;
            priority: number | null;
        })[];
        currency: string;
        children: ({
            users: {
                username: string | null;
                name: string | null;
                id: number;
                avatarUrl: string | null;
            }[];
        } & {
            price: number;
            title: string;
            description: string | null;
            hidden: boolean;
            length: number;
            currency: string;
            id: number;
            timeZone: string | null;
            userId: number | null;
            metadata: Prisma.JsonValue;
            position: number;
            slug: string;
            locations: Prisma.JsonValue;
            offsetStart: number;
            profileId: number | null;
            teamId: number | null;
            eventName: string | null;
            parentId: number | null;
            bookingFields: Prisma.JsonValue;
            periodType: import('../../../prisma-client').$Enums.PeriodType;
            periodStartDate: Date | null;
            periodEndDate: Date | null;
            periodDays: number | null;
            periodCountCalendarDays: boolean | null;
            lockTimeZoneToggleOnBookingPage: boolean;
            requiresConfirmation: boolean;
            requiresBookerEmailVerification: boolean;
            recurringEvent: Prisma.JsonValue;
            disableGuests: boolean;
            hideCalendarNotes: boolean;
            minimumBookingNotice: number;
            beforeEventBuffer: number;
            afterEventBuffer: number;
            seatsPerTimeSlot: number | null;
            onlyShowFirstAvailableSlot: boolean;
            seatsShowAttendees: boolean | null;
            seatsShowAvailabilityCount: boolean | null;
            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
            scheduleId: number | null;
            slotInterval: number | null;
            successRedirectUrl: string | null;
            forwardParamsSuccessRedirect: boolean | null;
            bookingLimits: Prisma.JsonValue;
            durationLimits: Prisma.JsonValue;
            isInstantEvent: boolean;
            assignAllTeamMembers: boolean;
            useEventTypeDestinationCalendarEmail: boolean;
            secondaryEmailId: number | null;
        })[];
        id: number;
        timeZone: string | null;
        userId: number | null;
        metadata: Prisma.JsonValue;
        position: number;
        slug: string;
        locations: Prisma.JsonValue;
        offsetStart: number;
        profileId: number | null;
        teamId: number | null;
        eventName: string | null;
        parentId: number | null;
        bookingFields: Prisma.JsonValue;
        periodType: import('../../../prisma-client').$Enums.PeriodType;
        periodStartDate: Date | null;
        periodEndDate: Date | null;
        periodDays: number | null;
        periodCountCalendarDays: boolean | null;
        lockTimeZoneToggleOnBookingPage: boolean;
        requiresConfirmation: boolean;
        requiresBookerEmailVerification: boolean;
        recurringEvent: Prisma.JsonValue;
        disableGuests: boolean;
        hideCalendarNotes: boolean;
        minimumBookingNotice: number;
        beforeEventBuffer: number;
        afterEventBuffer: number;
        seatsPerTimeSlot: number | null;
        onlyShowFirstAvailableSlot: boolean;
        seatsShowAttendees: boolean | null;
        seatsShowAvailabilityCount: boolean | null;
        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
        scheduleId: number | null;
        slotInterval: number | null;
        successRedirectUrl: string | null;
        bookingLimits: Prisma.JsonValue;
        durationLimits: Prisma.JsonValue;
        isInstantEvent: boolean;
        assignAllTeamMembers: boolean;
        useEventTypeDestinationCalendarEmail: boolean;
        secondaryEmailId: number | null;
        hashedLink: {
            link: string;
            id: number;
            eventTypeId: number;
        } | null;
        aiPhoneCallConfig: {
            enabled: boolean;
            id: number;
            eventTypeId: number;
            yourPhoneNumber: string;
            numberToCall: string;
            guestName: string;
            guestEmail: string | null;
            guestCompany: string | null;
            generalPrompt: string;
            beginMessage: string | null;
            llmId: string | null;
        } | null;
    }[]>;
}
export {};
//# sourceMappingURL=eventType.d.ts.map