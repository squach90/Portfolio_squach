import type logger from '../logger';
export type UserInfo = {
    email: string;
    name: string | null;
    id: number;
    username: string | null;
    createdDate: Date;
};
export type TeamInfoType = {
    name: string | undefined | null;
};
export type WebUserInfoType = UserInfo & {
    /** All users are PRO now */
    plan?: "PRO";
};
export type ConsoleUserInfoType = UserInfo & {
    plan: "CLOUD" | "SELFHOSTED";
};
export interface IUserDeletion<T> {
    delete(info: T): Promise<WebUserInfoType>;
}
export interface IUserCreation<T> {
    create(info: T): Promise<WebUserInfoType>;
    update(info: T): Promise<WebUserInfoType>;
    upsert?: never;
}
export interface IUserUpsertion<T> {
    create?: never;
    update?: never;
    upsert(info: T): Promise<WebUserInfoType>;
}
export interface ISyncService {
    ready(): boolean;
    web: {
        user: (IUserCreation<WebUserInfoType> | IUserUpsertion<WebUserInfoType>) & IUserDeletion<WebUserInfoType>;
    };
    console: {
        user: IUserCreation<ConsoleUserInfoType> | IUserUpsertion<ConsoleUserInfoType>;
    };
}
export default class SyncServiceCore {
    protected serviceName: string;
    protected service: unknown;
    protected log: typeof logger;
    constructor(serviceName: string, service: any, log: typeof logger);
    ready(): boolean;
    getUserLastBooking(user: {
        email: string;
    }): Promise<{
        booking: {
            createdAt: Date;
        } | null;
    } | null>;
}
export interface ISyncServices {
    new (): ISyncService;
}
//# sourceMappingURL=ISyncService.d.ts.map