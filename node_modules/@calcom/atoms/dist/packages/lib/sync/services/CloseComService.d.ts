import type { CloseComLead } from '../../CloseCom';
import CloseCom from '../../CloseCom';
import type { TeamInfoType } from '../ISyncService';
import SyncServiceCore from '../ISyncService';
import type { ConsoleUserInfoType, WebUserInfoType } from '../ISyncService';
import type ISyncService from '../ISyncService';
import { MembershipRole } from '../../../prisma/enums';
export default class CloseComService extends SyncServiceCore implements ISyncService {
    protected service: CloseCom;
    constructor();
    upsertAnyUser: (user: WebUserInfoType | ConsoleUserInfoType, leadInfo?: CloseComLead, role?: string) => Promise<{
        __object_type: "contact";
        emails: {
            email: string;
            type: string;
        }[];
        id: string;
        lead_id: string;
        name: string;
    }>;
    console: {
        user: {
            upsert: (consoleUser: ConsoleUserInfoType) => Promise<{
                __object_type: "contact";
                emails: {
                    email: string;
                    type: string;
                }[];
                id: string;
                lead_id: string;
                name: string;
            }>;
        };
    };
    web: {
        user: {
            upsert: (webUser: WebUserInfoType) => Promise<{
                __object_type: "contact";
                emails: {
                    email: string;
                    type: string;
                }[];
                id: string;
                lead_id: string;
                name: string;
            }>;
            delete: (webUser: WebUserInfoType) => Promise<any>;
        };
        team: {
            create: (team: TeamInfoType, webUser: WebUserInfoType, role: MembershipRole) => Promise<{
                __object_type: "contact";
                emails: {
                    email: string;
                    type: string;
                }[];
                id: string;
                lead_id: string;
                name: string;
            }>;
            delete: (team: TeamInfoType) => Promise<void>;
            update: (prevTeam: TeamInfoType, updatedTeam: TeamInfoType) => Promise<void>;
        };
        membership: {
            delete: (webUser: WebUserInfoType) => Promise<any>;
        };
    };
}
//# sourceMappingURL=CloseComService.d.ts.map