import type { TrpcSessionUser } from '../../../trpc';
type GetUpgradeableOptions = {
    ctx: {
        user: NonNullable<TrpcSessionUser>;
    };
};
export declare const getUpgradeableHandler: ({ ctx }: GetUpgradeableOptions) => Promise<({
    team: {
        children: {
            name: string;
            logo: string | null;
            bio: string | null;
            theme: string | null;
            id: number;
            timeFormat: number | null;
            weekStart: string;
            timeZone: string;
            metadata: import('../../../../../prisma-client').Prisma.JsonValue;
            slug: string | null;
            parentId: number | null;
            hideBranding: boolean;
            brandColor: string | null;
            darkBrandColor: string | null;
            smsLockState: import('../../../../../prisma-client').$Enums.SMSLockState;
            createdAt: Date;
            logoUrl: string | null;
            calVideoLogo: string | null;
            appLogo: string | null;
            appIconLogo: string | null;
            isPrivate: boolean;
            hideBookATeamMember: boolean;
            bannerUrl: string | null;
            isOrganization: boolean;
            pendingPayment: boolean;
            isPlatform: boolean;
        }[];
    } & {
        name: string;
        logo: string | null;
        bio: string | null;
        theme: string | null;
        id: number;
        timeFormat: number | null;
        weekStart: string;
        timeZone: string;
        metadata: import('../../../../../prisma-client').Prisma.JsonValue;
        slug: string | null;
        parentId: number | null;
        hideBranding: boolean;
        brandColor: string | null;
        darkBrandColor: string | null;
        smsLockState: import('../../../../../prisma-client').$Enums.SMSLockState;
        createdAt: Date;
        logoUrl: string | null;
        calVideoLogo: string | null;
        appLogo: string | null;
        appIconLogo: string | null;
        isPrivate: boolean;
        hideBookATeamMember: boolean;
        bannerUrl: string | null;
        isOrganization: boolean;
        pendingPayment: boolean;
        isPlatform: boolean;
    };
} & {
    role: import('../../../../../prisma-client').$Enums.MembershipRole;
    id: number;
    userId: number;
    teamId: number;
    disableImpersonation: boolean;
    accepted: boolean;
})[]>;
export default getUpgradeableHandler;
//# sourceMappingURL=getUpgradeable.handler.d.ts.map