/// <reference types="react" />
import type { BookerProps } from '../../../features/bookings/Booker';
import type { BookingResponse } from '../../libraries/index.ts';
import type { ApiErrorResponse, ApiSuccessResponse, ApiSuccessResponseWithoutData } from '../../types/index.ts';
import type { UseCreateBookingInput } from "../hooks/useCreateBooking";
type BookerPlatformWrapperAtomProps = Omit<BookerProps, "username" | "entity"> & {
    rescheduleUid?: string;
    bookingUid?: string;
    username: string | string[];
    entity?: BookerProps["entity"];
    defaultFormValues?: {
        firstName?: string;
        lastName?: string;
        guests?: string[];
        name?: string;
        email?: string;
        notes?: string;
        rescheduleReason?: string;
    } & Record<string, string | string[]>;
    handleCreateBooking?: (input: UseCreateBookingInput) => void;
    onCreateBookingSuccess?: (data: ApiSuccessResponse<BookingResponse>) => void;
    onCreateBookingError?: (data: ApiErrorResponse | Error) => void;
    onCreateRecurringBookingSuccess?: (data: ApiSuccessResponse<BookingResponse[]>) => void;
    onCreateRecurringBookingError?: (data: ApiErrorResponse | Error) => void;
    onCreateInstantBookingSuccess?: (data: ApiSuccessResponse<BookingResponse>) => void;
    onCreateInstantBookingError?: (data: ApiErrorResponse | Error) => void;
    onReserveSlotSuccess?: (data: ApiSuccessResponse<string>) => void;
    onReserveSlotError?: (data: ApiErrorResponse) => void;
    onDeleteSlotSuccess?: (data: ApiSuccessResponseWithoutData) => void;
    onDeleteSlotError?: (data: ApiErrorResponse) => void;
    locationUrl?: string;
};
export declare const BookerPlatformWrapper: (props: BookerPlatformWrapperAtomProps) => JSX.Element;
export {};
//# sourceMappingURL=BookerPlatformWrapper.d.ts.map