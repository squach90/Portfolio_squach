/**
 * Given a html color name, check if it exists in our color palette
 * and if it does, return the hex code for that color. Otherwise,
 * return the default brand color.
 */
export declare function fallBackHex(val: string | null, dark: boolean): string;
export declare function isValidHexCode(hexColor: string): boolean;
export declare const createColorMap: (brandColor: string) => Record<string, string>;
export declare function checkWCAGContrastColor(background: string, target: string): boolean;
/**
 * Given a light and dark brand color value, update the css variables
 * within the document to reflect the new brand colors.
 */
declare const useGetBrandingColours: ({ lightVal, darkVal, }: {
    lightVal: string | undefined | null;
    darkVal: string | undefined | null;
}) => {
    light: {
        "cal-brand": string;
        "cal-brand-emphasis": string;
        "cal-brand-subtle": string;
        "cal-brand-text": string;
        "cal-brand-accent": string;
    };
    dark: {
        "cal-brand": string;
        "cal-brand-emphasis": string;
        "cal-brand-subtle": string;
        "cal-brand-text": string;
        "cal-brand-accent": string;
    };
};
export default useGetBrandingColours;
//# sourceMappingURL=getBrandColours.d.ts.map