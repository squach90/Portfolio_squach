import type { AuthenticatorOptions } from "@otplib/core/authenticator";
import type { TOTPOptions } from "@otplib/core/totp";
/**
 * Checks the validity of a TOTP token using a base32-encoded secret.
 *
 * @param token - The token.
 * @param secret - The base32-encoded shared secret.
 * @param opts - The AuthenticatorOptions object.
 * @param opts.window - The amount of past and future tokens considered valid. Either a single value or array of `[past, future]`. Default: `[1, 0]`
 */
export declare const totpAuthenticatorCheck: (token: string, secret: string, opts?: Partial<AuthenticatorOptions>) => boolean;
/**
 * Checks the validity of a TOTP token using a raw secret.
 *
 * @param token - The token.
 * @param secret - The raw hex-encoded shared secret.
 * @param opts - The TOTPOptions object.
 * @param opts.window - The amount of past and future tokens considered valid. Either a single value or array of `[past, future]`. Default: `[1, 0]`
 */
export declare const totpRawCheck: (token: string, secret: string, opts?: Partial<TOTPOptions>) => boolean;
//# sourceMappingURL=totp.d.ts.map