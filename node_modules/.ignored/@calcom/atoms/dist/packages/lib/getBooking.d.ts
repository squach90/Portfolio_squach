import type { Prisma } from '../prisma-client';
import type { z } from "zod";
import { bookingResponsesDbSchema } from '../features/bookings/lib/getBookingResponsesSchema';
import type { PrismaClient } from '../prisma';
declare function getBooking(prisma: PrismaClient, uid: string): Promise<(Omit<{
    location: string | null;
    description: string | null;
    attendees: {
        email: string;
        name: string;
        bookingSeat: {
            data: Prisma.JsonValue;
            id: number;
            bookingId: number;
            referenceUid: string;
            attendeeId: number;
        } | null;
    }[];
    user: {
        id: number;
    } | null;
    id: number;
    startTime: Date;
    uid: string;
    customInputs: Prisma.JsonValue;
    smsReminderNumber: string | null;
    responses: Prisma.JsonValue;
}, "responses"> & {
    responses: Record<string, string | boolean | string[] | Record<string, string> | {
        value: string;
        optionValue: string;
    }>;
}) | null>;
export type GetBookingType = Prisma.PromiseReturnType<typeof getBooking>;
export declare const getBookingWithResponses: <T extends {
    location: string | null;
    description: string | null;
    attendees: {
        email: string;
        name: string;
    }[];
    customInputs: Prisma.JsonValue;
    responses: Prisma.JsonValue;
}>(booking: T) => Omit<T, "responses"> & {
    responses: z.infer<typeof bookingResponsesDbSchema>;
};
export default getBooking;
//# sourceMappingURL=getBooking.d.ts.map