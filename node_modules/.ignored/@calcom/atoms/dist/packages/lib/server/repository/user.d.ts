import { Prisma } from '../../../prisma/client';
import type { User as UserType } from '../../../prisma/client';
import type { UpId, UserProfile } from "@calcom/types/UserProfile";
export declare const ORGANIZATION_ID_UNKNOWN = "ORGANIZATION_ID_UNKNOWN";
export declare class UserRepository {
    static findTeamsByUserId({ userId }: {
        userId: UserType["id"];
    }): Promise<{
        teams: {
            name: string;
            id: number;
            metadata: Prisma.JsonValue;
            slug: string | null;
            logoUrl: string | null;
            isOrganization: boolean;
            organizationSettings: {
                id: number;
                isOrganizationVerified: boolean;
                isOrganizationConfigured: boolean;
                isAdminReviewed: boolean;
                orgAutoAcceptEmail: string;
                organizationId: number;
                lockEventTypeCreationForUsers: boolean;
                adminGetsNoSlotsNotification: boolean;
            } | null;
        }[];
        memberships: ({
            team: {
                name: string;
                id: number;
                metadata: Prisma.JsonValue;
                slug: string | null;
                logoUrl: string | null;
                isOrganization: boolean;
                organizationSettings: {
                    id: number;
                    isOrganizationVerified: boolean;
                    isOrganizationConfigured: boolean;
                    isAdminReviewed: boolean;
                    orgAutoAcceptEmail: string;
                    organizationId: number;
                    lockEventTypeCreationForUsers: boolean;
                    adminGetsNoSlotsNotification: boolean;
                } | null;
            };
        } & {
            role: import('../../../prisma-client').$Enums.MembershipRole;
            id: number;
            userId: number;
            teamId: number;
            disableImpersonation: boolean;
            accepted: boolean;
        })[];
        acceptedTeamMemberships: ({
            team: {
                name: string;
                id: number;
                metadata: Prisma.JsonValue;
                slug: string | null;
                logoUrl: string | null;
                isOrganization: boolean;
                organizationSettings: {
                    id: number;
                    isOrganizationVerified: boolean;
                    isOrganizationConfigured: boolean;
                    isAdminReviewed: boolean;
                    orgAutoAcceptEmail: string;
                    organizationId: number;
                    lockEventTypeCreationForUsers: boolean;
                    adminGetsNoSlotsNotification: boolean;
                } | null;
            };
        } & {
            role: import('../../../prisma-client').$Enums.MembershipRole;
            id: number;
            userId: number;
            teamId: number;
            disableImpersonation: boolean;
            accepted: boolean;
        })[];
        pendingTeamMemberships: ({
            team: {
                name: string;
                id: number;
                metadata: Prisma.JsonValue;
                slug: string | null;
                logoUrl: string | null;
                isOrganization: boolean;
                organizationSettings: {
                    id: number;
                    isOrganizationVerified: boolean;
                    isOrganizationConfigured: boolean;
                    isAdminReviewed: boolean;
                    orgAutoAcceptEmail: string;
                    organizationId: number;
                    lockEventTypeCreationForUsers: boolean;
                    adminGetsNoSlotsNotification: boolean;
                } | null;
            };
        } & {
            role: import('../../../prisma-client').$Enums.MembershipRole;
            id: number;
            userId: number;
            teamId: number;
            disableImpersonation: boolean;
            accepted: boolean;
        })[];
    }>;
    static findOrganizations({ userId }: {
        userId: UserType["id"];
    }): Promise<{
        organizations: {
            name: string;
            id: number;
            metadata: Prisma.JsonValue;
            slug: string | null;
            logoUrl: string | null;
            isOrganization: boolean;
            organizationSettings: {
                id: number;
                isOrganizationVerified: boolean;
                isOrganizationConfigured: boolean;
                isAdminReviewed: boolean;
                orgAutoAcceptEmail: string;
                organizationId: number;
                lockEventTypeCreationForUsers: boolean;
                adminGetsNoSlotsNotification: boolean;
            } | null;
        }[];
    }>;
    /**
     * It is aware of the fact that a user can be part of multiple organizations.
     */
    static findUsersByUsername({ orgSlug, usernameList, }: {
        orgSlug: string | null;
        usernameList: string[];
    }): Promise<({
        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
        username: string | null;
        email: string;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        movedToProfileId: number | null;
    } | {
        profile: {
            organization: Omit<{
                name: string;
                id: number;
                metadata: Prisma.JsonValue;
                slug: string | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                bannerUrl: string | null;
            } & Omit<Pick<{
                id: number;
                name: string;
                slug: string | null;
                logo: string | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                bio: string | null;
                hideBranding: boolean;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                createdAt: Date;
                metadata: Prisma.JsonValue;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                bannerUrl: string | null;
                parentId: number | null;
                timeFormat: number | null;
                timeZone: string;
                weekStart: string;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
            }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                requestedSlug: string | null;
                metadata: {
                    requestedSlug: string | null;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                };
            }, "metadata"> & {
                requestedSlug: string | null;
                metadata: {
                    requestedSlug: string | null;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                };
            };
            username: string;
            id: number;
            uid: string;
            userId: number;
            organizationId: number;
            createdAt: Date & string;
            updatedAt: Date & string;
            upId: string;
        };
        username: string | null;
        email: string;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        movedToProfileId: number | null;
    })[]>;
    static _getWhereClauseForFindingUsersByUsername({ orgSlug, usernameList, }: {
        orgSlug: string | null;
        usernameList: string[];
    }): Promise<{
        where: {
            id: {
                in: number[];
            };
        } | {
            organization: {
                OR: ({
                    slug: string;
                    metadata?: undefined;
                } | {
                    metadata: {
                        path: string[];
                        equals: string;
                    };
                    slug?: undefined;
                })[];
                isOrganization: true;
            };
            username: {
                in: string[];
            };
            id?: undefined;
        } | {
            organization: null;
            username: {
                in: string[];
            };
            id?: undefined;
        };
        profiles: {
            organization: Omit<{
                name: string;
                id: number;
                metadata: Prisma.JsonValue;
                slug: string | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                bannerUrl: string | null;
            } & Omit<Pick<{
                id: number;
                name: string;
                slug: string | null;
                logo: string | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                bio: string | null;
                hideBranding: boolean;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                createdAt: Date;
                metadata: Prisma.JsonValue;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                bannerUrl: string | null;
                parentId: number | null;
                timeFormat: number | null;
                timeZone: string;
                weekStart: string;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
            }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                requestedSlug: string | null;
                metadata: {
                    requestedSlug: string | null;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                };
            }, "metadata"> & {
                requestedSlug: string | null;
                metadata: {
                    requestedSlug: string | null;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                };
            };
            user: {
                username: string | null;
                email: string;
                name: string | null;
                id: number;
                defaultScheduleId: number | null;
                startTime: number;
                endTime: number;
                avatarUrl: string | null;
                bufferTime: number;
                locale: string | null;
            };
            username: string;
            id: number;
            uid: string;
            userId: number;
            organizationId: number;
            createdAt: Date & string;
            updatedAt: Date & string;
            upId: string;
        }[] | null;
    }>;
    static findByEmailAndIncludeProfilesAndPassword({ email }: {
        email: string;
    }): Promise<{
        allProfiles: UserProfile[];
        username: string | null;
        email: string;
        password: {
            userId: number;
            hash: string;
        } | null;
        role: import('../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        teams: ({
            team: {
                name: string;
                id: number;
                metadata: Prisma.JsonValue;
                slug: string | null;
                logoUrl: string | null;
                isOrganization: boolean;
                organizationSettings: {
                    id: number;
                    isOrganizationVerified: boolean;
                    isOrganizationConfigured: boolean;
                    isAdminReviewed: boolean;
                    orgAutoAcceptEmail: string;
                    organizationId: number;
                    lockEventTypeCreationForUsers: boolean;
                    adminGetsNoSlotsNotification: boolean;
                } | null;
            };
        } & {
            role: import('../../../prisma-client').$Enums.MembershipRole;
            id: number;
            userId: number;
            teamId: number;
            disableImpersonation: boolean;
            accepted: boolean;
        })[];
        locked: boolean;
        id: number;
        metadata: Prisma.JsonValue;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
    } | null>;
    static findById({ id }: {
        id: number;
    }): Promise<{
        username: string | null;
        email: string;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        movedToProfileId: number | null;
    } | null>;
    static findManyByOrganization({ organizationId }: {
        organizationId: number;
    }): Promise<{
        username: string | null;
        email: string;
        name: string | null;
        id: number;
        defaultScheduleId: number | null;
        startTime: number;
        endTime: number;
        avatarUrl: string | null;
        bufferTime: number;
        locale: string | null;
    }[]>;
    static isAMemberOfOrganization({ user, organizationId, }: {
        user: {
            profiles: {
                organizationId: number;
            }[];
        };
        organizationId: number;
    }): boolean;
    static findIfAMemberOfSomeOrganization({ user }: {
        user: {
            id: number;
        };
    }): Promise<boolean>;
    static isMigratedToOrganization({ user, }: {
        user: {
            metadata?: {
                migratedToOrgFrom?: unknown;
            } | null;
        };
    }): boolean;
    static isMovedToAProfile({ user }: {
        user: Pick<UserType, "movedToProfileId">;
    }): Promise<boolean>;
    static enrichUserWithTheProfile<T extends {
        username: string | null;
        id: number;
    }>({ user, upId, }: {
        user: T;
        upId: UpId;
    }): Promise<(T & {
        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
    }) | (T & {
        profile: {
            name: string | null;
            avatarUrl: string | null;
            startTime: number;
            endTime: number;
            bufferTime: number;
            username: string | null;
            upId: string;
            id: null;
            organizationId: null;
            organization: null;
        } | {
            name: string | null;
            avatarUrl: string | null;
            startTime: number;
            endTime: number;
            bufferTime: number;
            organization: {
                members: {
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
                name: string;
                id: number;
                metadata: Prisma.JsonValue;
                slug: string | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                isPrivate: boolean;
                bannerUrl: string | null;
                isPlatform: boolean;
                organizationSettings: {
                    lockEventTypeCreationForUsers: boolean;
                } | null;
            } & Omit<Pick<{
                id: number;
                name: string;
                slug: string | null;
                logo: string | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                bio: string | null;
                hideBranding: boolean;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                createdAt: Date;
                metadata: Prisma.JsonValue;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                bannerUrl: string | null;
                parentId: number | null;
                timeFormat: number | null;
                timeZone: string;
                weekStart: string;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
            }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                requestedSlug: string | null;
                metadata: {
                    requestedSlug: string | null;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                };
            };
            user: {
                username: string | null;
                email: string;
                name: string | null;
                id: number;
                defaultScheduleId: number | null;
                startTime: number;
                endTime: number;
                avatarUrl: string | null;
                bufferTime: number;
                locale: string | null;
            };
            movedFromUser: {
                id: number;
            } | null;
            username: string;
            id: number;
            uid: string;
            userId: number;
            organizationId: number;
            createdAt: Date & string;
            updatedAt: Date & string;
            upId: string;
        };
    })>;
    /**
     * Use this method if you don't directly has the profileId.
     * It can happen in two cases:
     * 1. While dealing with a User that hasn't been added to any organization yet and thus have no Profile entries.
     * 2. While dealing with a User that has been moved to a Profile i.e. he was invited to an organization when he was an existing user.
     */
    static enrichUserWithItsProfile<T extends {
        id: number;
        username: string | null;
    }>({ user, }: {
        user: T;
    }): Promise<T & {
        nonProfileUsername: string | null;
        profile: UserProfile;
    }>;
    static enrichUserWithItsProfileBuiltFromUser<T extends {
        id: number;
        username: string | null;
    }>({ user, }: {
        user: T;
    }): T & {
        nonProfileUsername: string | null;
        profile: UserProfile;
    };
    static enrichEntityWithProfile<T extends {
        profile: {
            id: number;
            username: string | null;
            organizationId: number | null;
            organization?: {
                id: number;
                name: string;
                calVideoLogo: string | null;
                bannerUrl: string | null;
                slug: string | null;
                metadata: Prisma.JsonValue;
            };
        };
    } | {
        user: {
            username: string | null;
            id: number;
        };
    }>(entity: T): Promise<(Omit<T & Record<"profile", unknown>, "profile"> & {
        profile: {
            organization: Omit<{
                id: number;
                name: string;
                calVideoLogo: string | null;
                bannerUrl: string | null;
                slug: string | null;
                metadata: Prisma.JsonValue;
            }, "metadata"> & {
                requestedSlug: string | null;
                metadata: {
                    requestedSlug: string | null;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                };
            };
            id: number;
            username: string | null;
            organizationId: number | null;
        } | {
            organization: null;
            id: number;
            username: string | null;
            organizationId: number | null;
        };
    }) | (T & {
        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
    })>;
    static updateWhereId({ whereId, data, }: {
        whereId: number;
        data: {
            movedToProfileId?: number | null;
        };
    }): Promise<{
        username: string | null;
        email: string;
        role: import('../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatar: string | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        away: boolean;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        organizationId: number | null;
        movedToProfileId: number | null;
        isPlatformManaged: boolean;
        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
    }>;
    static create({ email, username, organizationId, }: {
        email: string;
        username: string;
        organizationId: number | null;
    }): Promise<{
        username: string | null;
        email: string;
        role: import('../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatar: string | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        away: boolean;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        organizationId: number | null;
        movedToProfileId: number | null;
        isPlatformManaged: boolean;
        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
    }>;
}
//# sourceMappingURL=user.d.ts.map