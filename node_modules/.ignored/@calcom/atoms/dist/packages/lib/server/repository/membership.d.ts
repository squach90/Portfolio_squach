import type { MembershipRole } from '../../../prisma/client';
import { Prisma } from '../../../prisma/client';
type IMembership = {
    teamId: number;
    userId: number;
    accepted: boolean;
    role: MembershipRole;
};
export declare class MembershipRepository {
    static create(data: IMembership): Promise<{
        role: import('../../../prisma-client').$Enums.MembershipRole;
        id: number;
        userId: number;
        teamId: number;
        disableImpersonation: boolean;
        accepted: boolean;
    }>;
    static createMany(data: IMembership[]): Promise<import('../../../prisma-client/runtime/library').GetBatchResult>;
    /**
     * TODO: Using a specific function for specific tasks so that we don't have to focus on TS magic at the moment. May be try to make it a a generic findAllByProfileId with various options.
     */
    static findAllByUpIdIncludeTeamWithMembersAndEventTypes({ upId }: {
        upId: string;
    }, { where }?: {
        where?: Prisma.MembershipWhereInput;
    }): Promise<({
        team: {
            members: {
                role: import('../../../prisma-client').$Enums.MembershipRole;
                id: number;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
            }[];
            parent: {
                name: string;
                id: number;
                metadata: Prisma.JsonValue;
                slug: string | null;
                parentId: number | null;
                logoUrl: string | null;
            } | null;
            eventTypes: {
                price: number;
                title: string;
                description: string | null;
                hidden: boolean;
                length: number;
                users: {
                    username: string | null;
                    name: string | null;
                    id: number;
                    avatarUrl: string | null;
                }[];
                hosts: ({
                    user: {
                        username: string | null;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    };
                } & {
                    eventTypeId: number;
                    userId: number;
                    isFixed: boolean;
                    priority: number | null;
                })[];
                currency: string;
                children: ({
                    users: {
                        username: string | null;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    }[];
                } & {
                    price: number;
                    title: string;
                    description: string | null;
                    hidden: boolean;
                    length: number;
                    currency: string;
                    id: number;
                    timeZone: string | null;
                    userId: number | null;
                    metadata: Prisma.JsonValue;
                    position: number;
                    slug: string;
                    locations: Prisma.JsonValue;
                    offsetStart: number;
                    profileId: number | null;
                    teamId: number | null;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: Prisma.JsonValue;
                    periodType: import('../../../prisma-client').$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    recurringEvent: Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    bookingLimits: Prisma.JsonValue;
                    durationLimits: Prisma.JsonValue;
                    isInstantEvent: boolean;
                    assignAllTeamMembers: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    secondaryEmailId: number | null;
                })[];
                id: number;
                timeZone: string | null;
                userId: number | null;
                metadata: Prisma.JsonValue;
                position: number;
                slug: string;
                locations: Prisma.JsonValue;
                offsetStart: number;
                profileId: number | null;
                teamId: number | null;
                eventName: string | null;
                parentId: number | null;
                bookingFields: Prisma.JsonValue;
                periodType: import('../../../prisma-client').$Enums.PeriodType;
                periodStartDate: Date | null;
                periodEndDate: Date | null;
                periodDays: number | null;
                periodCountCalendarDays: boolean | null;
                lockTimeZoneToggleOnBookingPage: boolean;
                requiresConfirmation: boolean;
                requiresBookerEmailVerification: boolean;
                recurringEvent: Prisma.JsonValue;
                disableGuests: boolean;
                hideCalendarNotes: boolean;
                minimumBookingNotice: number;
                beforeEventBuffer: number;
                afterEventBuffer: number;
                seatsPerTimeSlot: number | null;
                onlyShowFirstAvailableSlot: boolean;
                seatsShowAttendees: boolean | null;
                seatsShowAvailabilityCount: boolean | null;
                schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                scheduleId: number | null;
                slotInterval: number | null;
                successRedirectUrl: string | null;
                bookingLimits: Prisma.JsonValue;
                durationLimits: Prisma.JsonValue;
                isInstantEvent: boolean;
                assignAllTeamMembers: boolean;
                useEventTypeDestinationCalendarEmail: boolean;
                secondaryEmailId: number | null;
                hashedLink: {
                    link: string;
                    id: number;
                    eventTypeId: number;
                } | null;
                aiPhoneCallConfig: {
                    enabled: boolean;
                    id: number;
                    eventTypeId: number;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    guestName: string;
                    guestEmail: string | null;
                    guestCompany: string | null;
                    generalPrompt: string;
                    beginMessage: string | null;
                    llmId: string | null;
                } | null;
            }[];
        } & {
            name: string;
            logo: string | null;
            bio: string | null;
            theme: string | null;
            id: number;
            timeFormat: number | null;
            weekStart: string;
            timeZone: string;
            metadata: Prisma.JsonValue;
            slug: string | null;
            parentId: number | null;
            hideBranding: boolean;
            brandColor: string | null;
            darkBrandColor: string | null;
            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
            createdAt: Date;
            logoUrl: string | null;
            calVideoLogo: string | null;
            appLogo: string | null;
            appIconLogo: string | null;
            isPrivate: boolean;
            hideBookATeamMember: boolean;
            bannerUrl: string | null;
            isOrganization: boolean;
            pendingPayment: boolean;
            isPlatform: boolean;
        };
    } & {
        role: import('../../../prisma-client').$Enums.MembershipRole;
        id: number;
        userId: number;
        teamId: number;
        disableImpersonation: boolean;
        accepted: boolean;
    })[]>;
}
export {};
//# sourceMappingURL=membership.d.ts.map