import type { Booking, EventType, Prisma, Webhook, BookingReference } from '../../prisma-client';
import type { CalendarEvent, Person, VideoCallData } from "@calcom/types/Calendar";
export declare const buildVideoCallData: (callData?: Partial<VideoCallData>) => VideoCallData;
export declare const buildPerson: (person?: Partial<Person>) => Person;
export declare const buildBooking: (booking?: Partial<Booking> & {
    references?: Partial<BookingReference>[];
}) => Booking & {
    references?: Partial<BookingReference>[];
};
export declare const buildEventType: (eventType?: Partial<EventType>) => EventType;
export declare const buildWebhook: (webhook?: Partial<Webhook>) => Webhook;
export declare const buildSubscriberEvent: (booking?: Partial<Booking>) => {
    type: string;
    title: string | undefined;
    description: string;
    additionalNotes: string;
    customInputs: {};
    startTime: Date | undefined;
    endTime: Date | undefined;
    organizer: {
        name: string;
        email: string;
        timeZone: string;
        language: {
            locale: string;
        };
    };
    attendees: never[];
    location: string;
    destinationCalendar: null;
    hideCalendar: boolean;
    uid: string | undefined;
    metadata: {};
};
export declare const buildCalendarEvent: (event?: Partial<CalendarEvent>, omitVideoCallData?: boolean) => CalendarEvent;
type UserPayload = Prisma.UserGetPayload<{
    select: {
        locked: true;
        name: true;
        email: true;
        timeZone: true;
        username: true;
        id: true;
        allowDynamicBooking: true;
        credentials: true;
        destinationCalendar: true;
        availability: true;
        selectedCalendars: true;
        schedules: true;
        avatarUrl: true;
        backupCodes: true;
        bio: true;
        brandColor: true;
        completedOnboarding: true;
        createdDate: true;
        bufferTime: true;
        darkBrandColor: true;
        defaultScheduleId: true;
        disableImpersonation: true;
        emailVerified: true;
        endTime: true;
        hideBranding: true;
        identityProvider: true;
        identityProviderId: true;
        invitedTo: true;
        locale: true;
        metadata: true;
        role: true;
        startTime: true;
        theme: true;
        appTheme: true;
        timeFormat: true;
        trialEndsAt: true;
        twoFactorEnabled: true;
        twoFactorSecret: true;
        verified: true;
        weekStart: true;
        organizationId: true;
        allowSEOIndexing: true;
        receiveMonthlyDigestEmail: true;
        movedToProfileId: true;
        isPlatformManaged: true;
        smsLockState: true;
    };
}>;
export declare const buildUser: <T extends Partial<{
    username: string | null;
    email: string;
    role: import('../../prisma-client').$Enums.UserPermissionRole;
    name: string | null;
    availability: {
        id: number;
        userId: number | null;
        eventTypeId: number | null;
        days: number[];
        startTime: Date;
        endTime: Date;
        date: Date | null;
        scheduleId: number | null;
    }[];
    bio: string | null;
    theme: string | null;
    verified: boolean | null;
    locked: boolean;
    schedules: {
        id: number;
        userId: number;
        name: string;
        timeZone: string | null;
    }[];
    id: number;
    timeFormat: number | null;
    defaultScheduleId: number | null;
    weekStart: string;
    timeZone: string;
    startTime: number;
    endTime: number;
    metadata: Prisma.JsonValue;
    destinationCalendar: {
        id: number;
        integration: string;
        externalId: string;
        primaryEmail: string | null;
        userId: number | null;
        eventTypeId: number | null;
        credentialId: number | null;
    } | null;
    emailVerified: Date | null;
    avatarUrl: string | null;
    bufferTime: number;
    hideBranding: boolean;
    appTheme: string | null;
    createdDate: Date;
    trialEndsAt: Date | null;
    completedOnboarding: boolean;
    locale: string | null;
    twoFactorSecret: string | null;
    twoFactorEnabled: boolean;
    backupCodes: string | null;
    identityProvider: import('../../prisma-client').$Enums.IdentityProvider;
    identityProviderId: string | null;
    invitedTo: number | null;
    brandColor: string | null;
    darkBrandColor: string | null;
    allowDynamicBooking: boolean | null;
    allowSEOIndexing: boolean | null;
    receiveMonthlyDigestEmail: boolean | null;
    disableImpersonation: boolean;
    organizationId: number | null;
    movedToProfileId: number | null;
    isPlatformManaged: boolean;
    smsLockState: import('../../prisma-client').$Enums.SMSLockState;
    selectedCalendars: {
        userId: number;
        integration: string;
        externalId: string;
        credentialId: number | null;
    }[];
    credentials: {
        id: number;
        type: string;
        key: Prisma.JsonValue;
        userId: number | null;
        teamId: number | null;
        appId: string | null;
        subscriptionId: string | null;
        paymentStatus: string | null;
        billingCycleStart: number | null;
        invalid: boolean | null;
    }[];
}>>(user?: T & {
    priority?: number;
}) => UserPayload & {
    priority: number | null;
};
export {};
//# sourceMappingURL=builder.d.ts.map