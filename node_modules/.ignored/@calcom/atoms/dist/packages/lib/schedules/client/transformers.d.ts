import type { Availability as AvailabilityModel, Schedule as ScheduleModel } from '../../../prisma-client';
import type { Schedule, TimeRange } from "@calcom/types/schedule";
export type ScheduleWithAvailabilities = ScheduleModel & {
    availability: AvailabilityModel[];
};
export type ScheduleWithAvailabilitiesForWeb = Pick<ScheduleModel, "id" | "name"> & {
    isManaged: boolean;
    workingHours: ReturnType<typeof transformWorkingHoursForClient>;
    schedule: AvailabilityModel[];
    availability: ReturnType<typeof transformAvailabilityForClient>;
    timeZone: string;
    dateOverrides: ReturnType<typeof transformDateOverridesForClient>;
    isDefault: boolean;
    isLastSchedule: boolean;
    readOnly: boolean;
};
export declare function transformWorkingHoursForClient(schedule: ScheduleWithAvailabilities): import("@calcom/types/schedule").WorkingHours[];
export declare function transformAvailabilityForClient(schedule: ScheduleWithAvailabilities): {
    end: Date;
    userId?: number | null | undefined;
    start: Date;
}[][];
export declare function transformDateOverridesForClient(schedule: ScheduleWithAvailabilities, timeZone: string): {
    ranges: TimeRange[];
}[];
export declare const transformScheduleToAvailabilityForClient: (schedule: Partial<ScheduleModel> & {
    availability: AvailabilityModel[];
}) => Schedule;
//# sourceMappingURL=transformers.d.ts.map