export default function useApp(appId: string): import("@trpc/react-query/shared").UseTRPCQueryResult<{
    installed?: boolean | undefined;
    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
    title?: string | undefined;
    name: string;
    description: string;
    variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
    slug: string;
    category?: string | undefined;
    categories: import('../../prisma-client').$Enums.AppCategories[];
    extendsFeature?: "User" | "EventType" | undefined;
    logo: string;
    publisher: string;
    url: string;
    docsUrl?: string | undefined;
    verified?: boolean | undefined;
    trending?: boolean | undefined;
    rating?: number | undefined;
    reviews?: number | undefined;
    isGlobal?: boolean | undefined;
    simplePath?: string | undefined;
    email: string;
    key?: import('../../prisma-client').Prisma.JsonValue | undefined;
    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
    price?: number | undefined;
    commission?: number | undefined;
    licenseRequired?: boolean | undefined;
    teamsPlanRequired?: {
        upgradeUrl: string;
    } | undefined;
    appData?: import("@calcom/types/App").AppData | undefined;
    paid?: import("@calcom/types/App").PaidAppData | undefined;
    dirName?: string | undefined;
    isTemplate?: boolean | undefined;
    __template?: string | undefined;
    dependencies?: string[] | undefined;
    concurrentMeetings?: boolean | undefined;
    createdAt?: string | undefined;
    isOAuth?: boolean | undefined;
    locationOption: {
        label: string;
        value: string;
        icon?: string | undefined;
        disabled?: boolean | undefined;
    } | null;
    isInstalled: number;
}, import('../../trpc/react').TRPCClientErrorLike<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
    ctx: import('../../trpc/server/createContext').InnerContext;
    meta: object;
    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
    transformer: {
        stringify: (object: any) => string;
        parse: <T = unknown>(string: string) => T;
        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
        allowErrorProps: (...props: string[]) => void;
    };
}>>>;
//# sourceMappingURL=useApp.d.ts.map