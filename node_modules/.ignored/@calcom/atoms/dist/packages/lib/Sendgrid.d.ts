import type { ClientRequest } from "@sendgrid/client/src/request";
import type { ClientResponse } from "@sendgrid/client/src/response";
export type SendgridFieldOptions = [string, string][];
type SendgridUsernameResult = {
    username: string;
    user_id: number;
};
export type SendgridCustomField = {
    id: string;
    name: string;
    field_type: string;
    _metadata: {
        self: string;
    };
};
export type SendgridContact = {
    id: string;
    first_name: string;
    last_name: string;
    email: string;
};
export type SendgridSearchResult = {
    result: SendgridContact[];
};
export type SendgridFieldDefinitions = {
    custom_fields: SendgridCustomField[];
};
export type SendgridNewContact = {
    job_id: string;
};
/**
 * This class to instance communicating to Sendgrid APIs requires an API Key.
 *
 * You can either pass to the constructor an API Key or have one defined as an
 * environment variable in case the communication to Sendgrid is just for
 * one account only, not configurable by any user at any moment.
 */
export default class Sendgrid {
    private log;
    constructor(providedApiKey?: string);
    username: () => Promise<SendgridUsernameResult>;
    sendgridRequest<R = ClientResponse>(data: ClientRequest): Promise<R>;
    getSendgridContactId(email: string): Promise<SendgridContact[]>;
    getSendgridCustomFieldsIds(customFields: SendgridFieldOptions): Promise<string[]>;
}
export {};
//# sourceMappingURL=Sendgrid.d.ts.map