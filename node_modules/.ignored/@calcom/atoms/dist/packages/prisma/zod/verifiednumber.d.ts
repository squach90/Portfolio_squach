import * as z from "zod";
import { CompleteUser, CompleteTeam } from "./index";
export declare const _VerifiedNumberModel: z.ZodObject<{
    id: z.ZodNumber;
    userId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    teamId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    phoneNumber: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: number;
    phoneNumber: string;
    userId?: number | null | undefined;
    teamId?: number | null | undefined;
}, {
    id: number;
    phoneNumber: string;
    userId?: number | null | undefined;
    teamId?: number | null | undefined;
}>;
export interface CompleteVerifiedNumber extends z.infer<typeof _VerifiedNumberModel> {
    user?: CompleteUser | null;
    team?: CompleteTeam | null;
}
/**
 * VerifiedNumberModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const VerifiedNumberModel: z.ZodSchema<CompleteVerifiedNumber>;
//# sourceMappingURL=verifiednumber.d.ts.map