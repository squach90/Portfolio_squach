import * as z from "zod";
import { CompleteTeam, CompleteUser } from "./index";
export declare const _MembershipModel: z.ZodObject<{
    id: z.ZodNumber;
    teamId: z.ZodNumber;
    userId: z.ZodNumber;
    accepted: z.ZodBoolean;
    role: z.ZodNativeEnum<{
        MEMBER: "MEMBER";
        ADMIN: "ADMIN";
        OWNER: "OWNER";
    }>;
    disableImpersonation: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    role: "ADMIN" | "MEMBER" | "OWNER";
    id: number;
    userId: number;
    teamId: number;
    disableImpersonation: boolean;
    accepted: boolean;
}, {
    role: "ADMIN" | "MEMBER" | "OWNER";
    id: number;
    userId: number;
    teamId: number;
    disableImpersonation: boolean;
    accepted: boolean;
}>;
export interface CompleteMembership extends z.infer<typeof _MembershipModel> {
    team: CompleteTeam;
    user: CompleteUser;
}
/**
 * MembershipModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const MembershipModel: z.ZodSchema<CompleteMembership>;
//# sourceMappingURL=membership.d.ts.map