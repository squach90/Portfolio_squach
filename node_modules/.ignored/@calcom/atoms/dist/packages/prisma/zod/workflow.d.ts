import * as z from "zod";
import { CompleteUser, CompleteTeam, CompleteWorkflowsOnEventTypes, CompleteWorkflowStep } from "./index";
export declare const _WorkflowModel: z.ZodObject<{
    id: z.ZodNumber;
    position: z.ZodNumber;
    name: z.ZodString;
    userId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    teamId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    trigger: z.ZodNativeEnum<{
        BEFORE_EVENT: "BEFORE_EVENT";
        EVENT_CANCELLED: "EVENT_CANCELLED";
        NEW_EVENT: "NEW_EVENT";
        AFTER_EVENT: "AFTER_EVENT";
        RESCHEDULE_EVENT: "RESCHEDULE_EVENT";
    }>;
    time: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    timeUnit: z.ZodOptional<z.ZodNullable<z.ZodNativeEnum<{
        DAY: "DAY";
        HOUR: "HOUR";
        MINUTE: "MINUTE";
    }>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    trigger: "BEFORE_EVENT" | "EVENT_CANCELLED" | "NEW_EVENT" | "AFTER_EVENT" | "RESCHEDULE_EVENT";
    id: number;
    position: number;
    userId?: number | null | undefined;
    teamId?: number | null | undefined;
    time?: number | null | undefined;
    timeUnit?: "DAY" | "HOUR" | "MINUTE" | null | undefined;
}, {
    name: string;
    trigger: "BEFORE_EVENT" | "EVENT_CANCELLED" | "NEW_EVENT" | "AFTER_EVENT" | "RESCHEDULE_EVENT";
    id: number;
    position: number;
    userId?: number | null | undefined;
    teamId?: number | null | undefined;
    time?: number | null | undefined;
    timeUnit?: "DAY" | "HOUR" | "MINUTE" | null | undefined;
}>;
export interface CompleteWorkflow extends z.infer<typeof _WorkflowModel> {
    user?: CompleteUser | null;
    team?: CompleteTeam | null;
    activeOn: CompleteWorkflowsOnEventTypes[];
    steps: CompleteWorkflowStep[];
}
/**
 * WorkflowModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const WorkflowModel: z.ZodSchema<CompleteWorkflow>;
//# sourceMappingURL=workflow.d.ts.map