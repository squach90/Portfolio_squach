import * as z from "zod";
import { CompleteUser, CompleteTeam, CompleteApp_RoutingForms_FormResponse } from "./index";
type Literal = boolean | number | string;
type Json = Literal | {
    [key: string]: Json;
} | Json[];
export declare const _App_RoutingForms_FormModel: z.ZodObject<{
    id: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    position: z.ZodNumber;
    routes: z.ZodType<Json, z.ZodTypeDef, Json>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    name: z.ZodString;
    fields: z.ZodType<Json, z.ZodTypeDef, Json>;
    userId: z.ZodNumber;
    teamId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    disabled: z.ZodBoolean;
    settings: z.ZodNullable<z.ZodObject<{
        emailOwnerOnSubmission: z.ZodBoolean;
        sendUpdatesTo: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        sendToAll: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        emailOwnerOnSubmission: boolean;
        sendUpdatesTo?: number[] | undefined;
        sendToAll?: boolean | undefined;
    }, {
        emailOwnerOnSubmission: boolean;
        sendUpdatesTo?: number[] | undefined;
        sendToAll?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    disabled: boolean;
    settings: {
        emailOwnerOnSubmission: boolean;
        sendUpdatesTo?: number[] | undefined;
        sendToAll?: boolean | undefined;
    } | null;
    id: string;
    userId: number;
    position: number;
    routes: Json & (Json | undefined);
    fields: Json & (Json | undefined);
    createdAt: Date;
    updatedAt: Date;
    description?: string | null | undefined;
    teamId?: number | null | undefined;
}, {
    name: string;
    disabled: boolean;
    settings: {
        emailOwnerOnSubmission: boolean;
        sendUpdatesTo?: number[] | undefined;
        sendToAll?: boolean | undefined;
    } | null;
    id: string;
    userId: number;
    position: number;
    routes: Json & (Json | undefined);
    fields: Json & (Json | undefined);
    createdAt: Date;
    updatedAt: Date;
    description?: string | null | undefined;
    teamId?: number | null | undefined;
}>;
export interface CompleteApp_RoutingForms_Form extends z.infer<typeof _App_RoutingForms_FormModel> {
    user: CompleteUser;
    team?: CompleteTeam | null;
    responses: CompleteApp_RoutingForms_FormResponse[];
}
/**
 * App_RoutingForms_FormModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const App_RoutingForms_FormModel: z.ZodSchema<CompleteApp_RoutingForms_Form>;
export {};
//# sourceMappingURL=app_routingforms_form.d.ts.map