import * as z from "zod";
import { CompleteCredential, CompletePayment, CompleteWebhook, CompleteApiKey } from "./index";
type Literal = boolean | number | string;
type Json = Literal | {
    [key: string]: Json;
} | Json[];
export declare const _AppModel: z.ZodObject<{
    slug: z.ZodString;
    dirName: z.ZodString;
    keys: z.ZodType<Json, z.ZodTypeDef, Json>;
    categories: z.ZodArray<z.ZodNativeEnum<{
        calendar: "calendar";
        messaging: "messaging";
        other: "other";
        payment: "payment";
        video: "video";
        web3: "web3";
        automation: "automation";
        analytics: "analytics";
        conferencing: "conferencing";
        crm: "crm";
    }>, "many">;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    enabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
    categories: ("payment" | "other" | "automation" | "conferencing" | "calendar" | "analytics" | "crm" | "messaging" | "video" | "web3")[];
    keys: Json & (Json | undefined);
    slug: string;
    createdAt: Date;
    updatedAt: Date;
    dirName: string;
}, {
    enabled: boolean;
    categories: ("payment" | "other" | "automation" | "conferencing" | "calendar" | "analytics" | "crm" | "messaging" | "video" | "web3")[];
    keys: Json & (Json | undefined);
    slug: string;
    createdAt: Date;
    updatedAt: Date;
    dirName: string;
}>;
export interface CompleteApp extends z.infer<typeof _AppModel> {
    credentials: CompleteCredential[];
    payments: CompletePayment[];
    Webhook: CompleteWebhook[];
    ApiKey: CompleteApiKey[];
}
/**
 * AppModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const AppModel: z.ZodSchema<CompleteApp>;
export {};
//# sourceMappingURL=app.d.ts.map