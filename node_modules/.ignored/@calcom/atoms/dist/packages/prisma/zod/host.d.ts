import * as z from "zod";
import { CompleteUser, CompleteEventType } from "./index";
export declare const _HostModel: z.ZodObject<{
    userId: z.ZodNumber;
    eventTypeId: z.ZodNumber;
    isFixed: z.ZodBoolean;
    priority: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    eventTypeId: number;
    userId: number;
    isFixed: boolean;
    priority?: number | null | undefined;
}, {
    eventTypeId: number;
    userId: number;
    isFixed: boolean;
    priority?: number | null | undefined;
}>;
export interface CompleteHost extends z.infer<typeof _HostModel> {
    user: CompleteUser;
    eventType: CompleteEventType;
}
/**
 * HostModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const HostModel: z.ZodSchema<CompleteHost>;
//# sourceMappingURL=host.d.ts.map