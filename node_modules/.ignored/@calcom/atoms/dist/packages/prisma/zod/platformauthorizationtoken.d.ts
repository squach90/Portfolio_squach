import * as z from "zod";
import { CompleteUser, CompletePlatformOAuthClient } from "./index";
export declare const _PlatformAuthorizationTokenModel: z.ZodObject<{
    id: z.ZodString;
    platformOAuthClientId: z.ZodString;
    userId: z.ZodNumber;
    createdAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: string;
    userId: number;
    createdAt: Date;
    platformOAuthClientId: string;
}, {
    id: string;
    userId: number;
    createdAt: Date;
    platformOAuthClientId: string;
}>;
export interface CompletePlatformAuthorizationToken extends z.infer<typeof _PlatformAuthorizationTokenModel> {
    owner: CompleteUser;
    client: CompletePlatformOAuthClient;
}
/**
 * PlatformAuthorizationTokenModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const PlatformAuthorizationTokenModel: z.ZodSchema<CompletePlatformAuthorizationToken>;
//# sourceMappingURL=platformauthorizationtoken.d.ts.map