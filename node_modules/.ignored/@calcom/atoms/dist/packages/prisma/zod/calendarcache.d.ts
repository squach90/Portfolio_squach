import * as z from "zod";
import { CompleteCredential } from "./index";
type Literal = boolean | number | string;
type Json = Literal | {
    [key: string]: Json;
} | Json[];
export declare const _CalendarCacheModel: z.ZodObject<{
    key: z.ZodString;
    value: z.ZodType<Json, z.ZodTypeDef, Json>;
    expiresAt: z.ZodDate;
    credentialId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: Json & (Json | undefined);
    credentialId: number;
    key: string;
    expiresAt: Date;
}, {
    value: Json & (Json | undefined);
    credentialId: number;
    key: string;
    expiresAt: Date;
}>;
export interface CompleteCalendarCache extends z.infer<typeof _CalendarCacheModel> {
    credential?: CompleteCredential | null;
}
/**
 * CalendarCacheModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const CalendarCacheModel: z.ZodSchema<CompleteCalendarCache>;
export {};
//# sourceMappingURL=calendarcache.d.ts.map