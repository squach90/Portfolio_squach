import * as z from "zod";
import { CompleteWebhook, CompleteBooking } from "./index";
export declare const _WebhookScheduledTriggersModel: z.ZodObject<{
    id: z.ZodNumber;
    jobName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    subscriberUrl: z.ZodString;
    payload: z.ZodString;
    startAfter: z.ZodDate;
    retryCount: z.ZodNumber;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    webhookId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    bookingId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    id: number;
    subscriberUrl: string;
    retryCount: number;
    payload: string;
    startAfter: Date;
    jobName?: string | null | undefined;
    createdAt?: Date | null | undefined;
    appId?: string | null | undefined;
    webhookId?: string | null | undefined;
    bookingId?: number | null | undefined;
}, {
    id: number;
    subscriberUrl: string;
    retryCount: number;
    payload: string;
    startAfter: Date;
    jobName?: string | null | undefined;
    createdAt?: Date | null | undefined;
    appId?: string | null | undefined;
    webhookId?: string | null | undefined;
    bookingId?: number | null | undefined;
}>;
export interface CompleteWebhookScheduledTriggers extends z.infer<typeof _WebhookScheduledTriggersModel> {
    webhook?: CompleteWebhook | null;
    booking?: CompleteBooking | null;
}
/**
 * WebhookScheduledTriggersModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const WebhookScheduledTriggersModel: z.ZodSchema<CompleteWebhookScheduledTriggers>;
//# sourceMappingURL=webhookscheduledtriggers.d.ts.map