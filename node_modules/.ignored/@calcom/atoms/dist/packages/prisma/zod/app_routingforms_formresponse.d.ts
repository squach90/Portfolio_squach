import * as z from "zod";
import { CompleteApp_RoutingForms_Form } from "./index";
type Literal = boolean | number | string;
type Json = Literal | {
    [key: string]: Json;
} | Json[];
export declare const _App_RoutingForms_FormResponseModel: z.ZodObject<{
    id: z.ZodNumber;
    formFillerId: z.ZodString;
    formId: z.ZodString;
    response: z.ZodType<Json, z.ZodTypeDef, Json>;
    createdAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: number;
    response: Json & (Json | undefined);
    createdAt: Date;
    formFillerId: string;
    formId: string;
}, {
    id: number;
    response: Json & (Json | undefined);
    createdAt: Date;
    formFillerId: string;
    formId: string;
}>;
export interface CompleteApp_RoutingForms_FormResponse extends z.infer<typeof _App_RoutingForms_FormResponseModel> {
    form: CompleteApp_RoutingForms_Form;
}
/**
 * App_RoutingForms_FormResponseModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const App_RoutingForms_FormResponseModel: z.ZodSchema<CompleteApp_RoutingForms_FormResponse>;
export {};
//# sourceMappingURL=app_routingforms_formresponse.d.ts.map