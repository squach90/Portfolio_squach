import * as z from "zod";
import { CompleteBooking, CompleteBookingSeat } from "./index";
export declare const _AttendeeModel: z.ZodObject<{
    id: z.ZodNumber;
    email: z.ZodString;
    name: z.ZodString;
    timeZone: z.ZodString;
    locale: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    bookingId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    email: string;
    name: string;
    id: number;
    timeZone: string;
    locale?: string | null | undefined;
    bookingId?: number | null | undefined;
}, {
    email: string;
    name: string;
    id: number;
    timeZone: string;
    locale?: string | null | undefined;
    bookingId?: number | null | undefined;
}>;
export interface CompleteAttendee extends z.infer<typeof _AttendeeModel> {
    booking?: CompleteBooking | null;
    bookingSeat?: CompleteBookingSeat | null;
}
/**
 * AttendeeModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const AttendeeModel: z.ZodSchema<CompleteAttendee>;
//# sourceMappingURL=attendee.d.ts.map