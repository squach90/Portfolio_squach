import * as z from "zod";
import { CompleteUser, CompleteTeam, CompleteEventType } from "./index";
export declare const _ProfileModel: z.ZodObject<{
    id: z.ZodNumber;
    uid: z.ZodString;
    userId: z.ZodNumber;
    organizationId: z.ZodNumber;
    username: z.ZodString;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    username: string;
    id: number;
    uid: string;
    userId: number;
    organizationId: number;
    createdAt: Date;
    updatedAt: Date;
}, {
    username: string;
    id: number;
    uid: string;
    userId: number;
    organizationId: number;
    createdAt: Date;
    updatedAt: Date;
}>;
export interface CompleteProfile extends z.infer<typeof _ProfileModel> {
    user: CompleteUser;
    organization: CompleteTeam;
    eventTypes: CompleteEventType[];
    movedFromUser?: CompleteUser | null;
}
/**
 * ProfileModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const ProfileModel: z.ZodSchema<CompleteProfile>;
//# sourceMappingURL=profile.d.ts.map