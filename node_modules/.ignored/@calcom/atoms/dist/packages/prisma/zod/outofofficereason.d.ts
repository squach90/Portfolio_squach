import * as z from "zod";
import { CompleteUser, CompleteOutOfOfficeEntry } from "./index";
export declare const _OutOfOfficeReasonModel: z.ZodObject<{
    id: z.ZodNumber;
    emoji: z.ZodString;
    reason: z.ZodString;
    enabled: z.ZodBoolean;
    userId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
    reason: string;
    id: number;
    emoji: string;
    userId?: number | null | undefined;
}, {
    enabled: boolean;
    reason: string;
    id: number;
    emoji: string;
    userId?: number | null | undefined;
}>;
export interface CompleteOutOfOfficeReason extends z.infer<typeof _OutOfOfficeReasonModel> {
    user?: CompleteUser | null;
    entries: CompleteOutOfOfficeEntry[];
}
/**
 * OutOfOfficeReasonModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const OutOfOfficeReasonModel: z.ZodSchema<CompleteOutOfOfficeReason>;
//# sourceMappingURL=outofofficereason.d.ts.map