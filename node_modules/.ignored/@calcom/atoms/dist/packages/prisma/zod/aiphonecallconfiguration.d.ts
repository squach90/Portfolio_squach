import * as z from "zod";
import { CompleteEventType } from "./index";
export declare const _AIPhoneCallConfigurationModel: z.ZodObject<{
    id: z.ZodNumber;
    eventTypeId: z.ZodNumber;
    generalPrompt: z.ZodString;
    yourPhoneNumber: z.ZodString;
    numberToCall: z.ZodString;
    guestName: z.ZodString;
    guestEmail: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    guestCompany: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    enabled: z.ZodBoolean;
    beginMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    llmId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
    id: number;
    eventTypeId: number;
    yourPhoneNumber: string;
    numberToCall: string;
    guestName: string;
    generalPrompt: string;
    guestEmail?: string | null | undefined;
    guestCompany?: string | null | undefined;
    beginMessage?: string | null | undefined;
    llmId?: string | null | undefined;
}, {
    enabled: boolean;
    id: number;
    eventTypeId: number;
    yourPhoneNumber: string;
    numberToCall: string;
    guestName: string;
    generalPrompt: string;
    guestEmail?: string | null | undefined;
    guestCompany?: string | null | undefined;
    beginMessage?: string | null | undefined;
    llmId?: string | null | undefined;
}>;
export interface CompleteAIPhoneCallConfiguration extends z.infer<typeof _AIPhoneCallConfigurationModel> {
    eventType: CompleteEventType;
}
/**
 * AIPhoneCallConfigurationModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const AIPhoneCallConfigurationModel: z.ZodSchema<CompleteAIPhoneCallConfiguration>;
//# sourceMappingURL=aiphonecallconfiguration.d.ts.map