import * as z from "zod";
import { CompleteUser, CompleteEventType, CompleteSchedule } from "./index";
export declare const _AvailabilityModel: z.ZodObject<{
    id: z.ZodNumber;
    userId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    eventTypeId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    days: z.ZodArray<z.ZodNumber, "many">;
    startTime: z.ZodDate;
    endTime: z.ZodDate;
    date: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    scheduleId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    days: number[];
    id: number;
    startTime: Date;
    endTime: Date;
    userId?: number | null | undefined;
    eventTypeId?: number | null | undefined;
    date?: Date | null | undefined;
    scheduleId?: number | null | undefined;
}, {
    days: number[];
    id: number;
    startTime: Date;
    endTime: Date;
    userId?: number | null | undefined;
    eventTypeId?: number | null | undefined;
    date?: Date | null | undefined;
    scheduleId?: number | null | undefined;
}>;
export interface CompleteAvailability extends z.infer<typeof _AvailabilityModel> {
    user?: CompleteUser | null;
    eventType?: CompleteEventType | null;
    Schedule?: CompleteSchedule | null;
}
/**
 * AvailabilityModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const AvailabilityModel: z.ZodSchema<CompleteAvailability>;
//# sourceMappingURL=availability.d.ts.map