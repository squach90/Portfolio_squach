/**
 * Create your application's root router
 * If you want to use SSG, you need export this
 * @link https://trpc.io/docs/ssg
 * @link https://trpc.io/docs/router
 */
export declare const appRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
    ctx: import("../createContext").InnerContext;
    meta: object;
    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
    transformer: {
        stringify: (object: any) => string;
        parse: <T = unknown>(string: string) => T;
        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
        allowErrorProps: (...props: string[]) => void;
    };
}>, {
    viewer: import("@trpc/server/unstable-core-do-not-import").Router<{
        _config: import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>;
        router: true;
        procedures: {
            loggedInViewerRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        includePasswordAdded?: boolean | undefined;
                    } | undefined;
                    output: {
                        passwordAdded?: boolean | undefined;
                        id: number;
                        name: string | null;
                        email: string;
                        emailMd5: string;
                        emailVerified: Date | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        locale: string;
                        timeFormat: number | null;
                        timeZone: string;
                        avatar: string;
                        avatarUrl: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        defaultScheduleId: number | null;
                        completedOnboarding: boolean;
                        twoFactorEnabled: boolean;
                        disableImpersonation: boolean;
                        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                        identityProviderEmail: string;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bio: string | null;
                        weekStart: string;
                        theme: string | null;
                        appTheme: string | null;
                        hideBranding: boolean;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        defaultBookerLayouts: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        organizationId: number | null;
                        organization: {
                            id: number | null;
                            isOrgAdmin: boolean;
                            metadata: {
                                requestedSlug?: string | null | undefined;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?: {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                } | undefined;
                            } | null;
                            requestedSlug: string | null;
                            members?: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                id: number;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[] | undefined;
                            name?: string | undefined;
                            slug?: string | null | undefined;
                            logoUrl?: string | null | undefined;
                            calVideoLogo?: string | null | undefined;
                            isPrivate?: boolean | undefined;
                            bannerUrl?: string | null | undefined;
                            isPlatform?: boolean | undefined;
                            organizationSettings?: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null | undefined;
                        };
                        username: string | null;
                        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                            name: string | null;
                            avatarUrl: string | null;
                            startTime: number;
                            endTime: number;
                            bufferTime: number;
                            username: string | null;
                            upId: string;
                            id: null;
                            organizationId: null;
                            organization: null;
                        } | {
                            name: string | null;
                            avatarUrl: string | null;
                            startTime: number;
                            endTime: number;
                            bufferTime: number;
                            organization: {
                                members: {
                                    role: import('../../../prisma-client').$Enums.MembershipRole;
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                                name: string;
                                id: number;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                isPrivate: boolean;
                                bannerUrl: string | null;
                                isPlatform: boolean;
                                organizationSettings: {
                                    lockEventTypeCreationForUsers: boolean;
                                } | null;
                            } & Omit<Pick<{
                                id: number;
                                name: string;
                                slug: string | null;
                                logo: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                createdAt: Date;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                parentId: number | null;
                                timeFormat: number | null;
                                timeZone: string;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                                requestedSlug: string | null;
                                metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?: {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                    } | undefined;
                                };
                            };
                            user: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                startTime: number;
                                endTime: number;
                                avatarUrl: string | null;
                                bufferTime: number;
                                locale: string | null;
                            };
                            movedFromUser: {
                                id: number;
                            } | null;
                            username: string;
                            id: number;
                            uid: string;
                            userId: number;
                            organizationId: number;
                            createdAt: Date & string;
                            updatedAt: Date & string;
                            upId: string;
                        } | ({
                            name: string | null;
                            avatarUrl: string | null;
                            startTime: number;
                            endTime: number;
                            bufferTime: number;
                            username: string | null;
                            upId: string;
                            id: null;
                            organizationId: null;
                            organization: null;
                        } & import("@calcom/types/UserProfile").UserAsPersonalProfile) | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                            name: string | null;
                            avatarUrl: string | null;
                            startTime: number;
                            endTime: number;
                            bufferTime: number;
                            username: string | null;
                            upId: string;
                            id: null;
                            organizationId: null;
                            organization: null;
                        });
                        profiles: import("@calcom/types/UserProfile").UserProfile[];
                        secondaryEmails: {
                            email: string;
                            id: number;
                            emailVerified: Date | null;
                        }[];
                        sumOfBookings: number | undefined;
                        sumOfCalendars: number | undefined;
                        sumOfTeams: number | undefined;
                        sumOfEventTypes: number | undefined;
                        isPremium: boolean | undefined;
                        sumOfTeamEventTypes: number;
                    };
                }>;
                deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        password: string;
                        totpCode?: string | undefined;
                    };
                    output: void;
                }>;
                deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: void;
                }>;
                connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        onboarding?: boolean | undefined;
                    } | undefined;
                    output: {
                        connectedCalendars: ({
                            integration: import("@calcom/types/App").App & {
                                credential: import('../../../app-store/utils').CredentialDataWithTeamName;
                                credentials: import('../../../app-store/utils').CredentialDataWithTeamName[];
                                locationOption: {
                                    label: string;
                                    value: string;
                                    icon?: string | undefined;
                                    disabled?: boolean | undefined;
                                } | null;
                            };
                            credentialId: number;
                            primary?: undefined;
                            calendars?: undefined;
                            error?: undefined;
                        } | {
                            integration: {
                                installed?: boolean | undefined;
                                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                                title?: string | undefined;
                                name: string;
                                description: string;
                                variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                                slug: string;
                                category?: string | undefined;
                                categories: import('../../../prisma-client').$Enums.AppCategories[];
                                extendsFeature?: "User" | "EventType" | undefined;
                                logo: string;
                                publisher: string;
                                url: string;
                                docsUrl?: string | undefined;
                                verified?: boolean | undefined;
                                trending?: boolean | undefined;
                                rating?: number | undefined;
                                reviews?: number | undefined;
                                isGlobal?: boolean | undefined;
                                simplePath?: string | undefined;
                                email: string;
                                key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                                feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                                price?: number | undefined;
                                commission?: number | undefined;
                                licenseRequired?: boolean | undefined;
                                teamsPlanRequired?: {
                                    upgradeUrl: string;
                                } | undefined;
                                appData?: import("@calcom/types/App").AppData | undefined;
                                paid?: import("@calcom/types/App").PaidAppData | undefined;
                                dirName?: string | undefined;
                                isTemplate?: boolean | undefined;
                                __template?: string | undefined;
                                dependencies?: string[] | undefined;
                                concurrentMeetings?: boolean | undefined;
                                createdAt?: string | undefined;
                                isOAuth?: boolean | undefined;
                                locationOption: {
                                    label: string;
                                    value: string;
                                    icon?: string | undefined;
                                    disabled?: boolean | undefined;
                                } | null;
                            };
                            credentialId: number;
                            primary: {
                                readOnly: boolean;
                                primary: true | null;
                                isSelected: boolean;
                                credentialId: number;
                                name?: string | undefined;
                                email?: string | undefined;
                                primaryEmail?: string | undefined;
                                integrationTitle?: string | undefined;
                                userId?: number | undefined;
                                integration?: string | undefined;
                                externalId: string;
                            };
                            calendars: {
                                readOnly: boolean;
                                primary: true | null;
                                isSelected: boolean;
                                credentialId: number;
                                name?: string | undefined;
                                email?: string | undefined;
                                primaryEmail?: string | undefined;
                                integrationTitle?: string | undefined;
                                userId?: number | undefined;
                                integration?: string | undefined;
                                externalId: string;
                            }[];
                            error?: undefined;
                        } | {
                            integration: {
                                installed?: boolean | undefined;
                                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                                title?: string | undefined;
                                name: string;
                                description: string;
                                variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                                slug: string;
                                category?: string | undefined;
                                categories: import('../../../prisma-client').$Enums.AppCategories[];
                                extendsFeature?: "User" | "EventType" | undefined;
                                logo: string;
                                publisher: string;
                                url: string;
                                docsUrl?: string | undefined;
                                verified?: boolean | undefined;
                                trending?: boolean | undefined;
                                rating?: number | undefined;
                                reviews?: number | undefined;
                                isGlobal?: boolean | undefined;
                                simplePath?: string | undefined;
                                email: string;
                                key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                                feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                                price?: number | undefined;
                                commission?: number | undefined;
                                licenseRequired?: boolean | undefined;
                                teamsPlanRequired?: {
                                    upgradeUrl: string;
                                } | undefined;
                                appData?: import("@calcom/types/App").AppData | undefined;
                                paid?: import("@calcom/types/App").PaidAppData | undefined;
                                dirName?: string | undefined;
                                isTemplate?: boolean | undefined;
                                __template?: string | undefined;
                                dependencies?: string[] | undefined;
                                concurrentMeetings?: boolean | undefined;
                                createdAt?: string | undefined;
                                isOAuth?: boolean | undefined;
                                locationOption: {
                                    label: string;
                                    value: string;
                                    icon?: string | undefined;
                                    disabled?: boolean | undefined;
                                } | null;
                            };
                            credentialId: number;
                            error: {
                                message: string;
                            };
                            primary?: undefined;
                            calendars?: undefined;
                        })[];
                        destinationCalendar: {
                            primary?: boolean | undefined;
                            name?: string | undefined;
                            readOnly?: boolean | undefined;
                            email?: string | undefined;
                            primaryEmail: string | null;
                            credentialId: number | null;
                            integrationTitle?: string | undefined;
                            userId: number | null;
                            integration: string;
                            externalId: string;
                            id: number;
                            eventTypeId: number | null;
                        };
                    };
                }>;
                setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        externalId: string;
                        integration: string;
                        eventTypeId?: number | null | undefined;
                        bookingId?: number | null | undefined;
                    };
                    output: void;
                }>;
                integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        variant?: string | undefined;
                        exclude?: string[] | undefined;
                        onlyInstalled?: boolean | undefined;
                        includeTeamInstalledApps?: boolean | undefined;
                        extendsFeature?: "EventType" | undefined;
                        teamId?: number | null | undefined;
                        sortByMostPopular?: boolean | undefined;
                        categories?: ("payment" | "other" | "automation" | "conferencing" | "calendar" | "analytics" | "crm" | "messaging" | "video" | "web3")[] | undefined;
                        appId?: string | undefined;
                    };
                    output: {
                        items: {
                            userCredentialIds: number[];
                            invalidCredentialIds: number[];
                            teams: ({
                                teamId: number;
                                name: string;
                                logoUrl: string | null;
                                credentialId: number;
                                isAdmin: boolean;
                            } | null)[];
                            isInstalled: boolean | undefined;
                            isSetupAlready: boolean | undefined;
                            credentialOwner?: import('../../../app-store/types').CredentialOwner | undefined;
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                            extendsFeature?: "User" | "EventType" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                            enabled: boolean;
                        }[];
                    };
                }>;
                appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        appId: string;
                    };
                    output: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                        extendsFeature?: "User" | "EventType" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                        isInstalled: number;
                    };
                }>;
                appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        appType: string;
                    };
                    output: {
                        credentials: {
                            type: string;
                            id: number;
                            userId: number | null;
                            invalid: boolean | null;
                            key: import('../../../prisma-client').Prisma.JsonValue;
                            teamId: number | null;
                            subscriptionId: string | null;
                            appId: string | null;
                            paymentStatus: string | null;
                            billingCycleStart: number | null;
                        }[];
                        userAdminTeams: import('../../../features/ee/teams/lib/getUserAdminTeams').UserAdminTeams;
                    };
                }>;
                stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        isPremium: boolean;
                        username: string | null;
                    };
                }>;
                updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        username?: string | undefined;
                        name?: string | undefined;
                        email?: string | undefined;
                        bio?: string | undefined;
                        avatarUrl?: string | null | undefined;
                        timeZone?: string | undefined;
                        weekStart?: string | undefined;
                        hideBranding?: boolean | undefined;
                        allowDynamicBooking?: boolean | undefined;
                        allowSEOIndexing?: boolean | undefined;
                        receiveMonthlyDigestEmail?: boolean | undefined;
                        brandColor?: string | undefined;
                        darkBrandColor?: string | undefined;
                        theme?: string | null | undefined;
                        appTheme?: string | null | undefined;
                        completedOnboarding?: boolean | undefined;
                        locale?: string | undefined;
                        timeFormat?: number | undefined;
                        disableImpersonation?: boolean | undefined;
                        metadata?: {
                            proPaidForByTeamId?: number | undefined;
                            stripeCustomerId?: string | undefined;
                            vitalSettings?: {
                                connected?: boolean | undefined;
                                selectedParam?: string | undefined;
                                sleepValue?: number | undefined;
                            } | undefined;
                            isPremium?: boolean | undefined;
                            sessionTimeout?: number | undefined;
                            defaultConferencingApp?: {
                                appSlug?: string | undefined;
                                appLink?: string | undefined;
                            } | undefined;
                            defaultBookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                            emailChangeWaitingForVerification?: string | undefined;
                            migratedToOrgFrom?: {
                                username?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                revertTime?: string | undefined;
                            } | undefined;
                        } | null | undefined;
                        travelSchedules?: {
                            timeZone: string;
                            startDate: Date;
                            id?: number | undefined;
                            endDate?: Date | undefined;
                        }[] | undefined;
                        secondaryEmails?: {
                            email: string;
                            id: number;
                            isDeleted?: boolean | undefined;
                        }[] | undefined;
                    };
                    output: {
                        email: string | undefined;
                        avatarUrl: string | null;
                        hasEmailBeenChanged: boolean | "" | undefined;
                        sendEmailVerification: boolean;
                        username?: string | undefined;
                        name?: string | undefined;
                        bio?: string | undefined;
                        timeZone?: string | undefined;
                        weekStart?: string | undefined;
                        hideBranding?: boolean | undefined;
                        allowDynamicBooking?: boolean | undefined;
                        allowSEOIndexing?: boolean | undefined;
                        receiveMonthlyDigestEmail?: boolean | undefined;
                        brandColor?: string | undefined;
                        darkBrandColor?: string | undefined;
                        theme?: string | null | undefined;
                        appTheme?: string | null | undefined;
                        completedOnboarding?: boolean | undefined;
                        locale?: string | undefined;
                        timeFormat?: number | undefined;
                        disableImpersonation?: boolean | undefined;
                        metadata?: {
                            proPaidForByTeamId?: number | undefined;
                            stripeCustomerId?: string | undefined;
                            vitalSettings?: {
                                connected?: boolean | undefined;
                                selectedParam?: string | undefined;
                                sleepValue?: number | undefined;
                            } | undefined;
                            isPremium?: boolean | undefined;
                            sessionTimeout?: number | undefined;
                            defaultConferencingApp?: {
                                appSlug?: string | undefined;
                                appLink?: string | undefined;
                            } | undefined;
                            defaultBookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                            emailChangeWaitingForVerification?: string | undefined;
                            migratedToOrgFrom?: {
                                username?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                revertTime?: string | undefined;
                            } | undefined;
                        } | null | undefined;
                        travelSchedules?: {
                            timeZone: string;
                            startDate: Date;
                            id?: number | undefined;
                            endDate?: Date | undefined;
                        }[] | undefined;
                        secondaryEmails?: {
                            email: string;
                            id: number;
                            isDeleted: boolean;
                        }[] | undefined;
                    };
                }>;
                unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: {
                        message: string;
                    };
                }>;
                eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        ids: number[];
                    };
                    output: void;
                }>;
                routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        ids: string[];
                    };
                    output: void;
                }>;
                workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        ids: number[];
                    };
                    output: void;
                }>;
                submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        rating: string;
                        comment: string;
                    };
                    output: void;
                }>;
                locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | undefined;
                    };
                    output: {
                        label: string;
                        options: {
                            label: string;
                            value: string;
                            disabled?: boolean | undefined;
                            icon?: string | undefined;
                            slug?: string | undefined;
                        }[];
                    }[];
                }>;
                deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        externalId?: string | undefined;
                        teamId?: number | undefined;
                    };
                    output: void;
                }>;
                bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: number;
                }>;
                getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        roomName: string;
                    };
                    output: {
                        data: {
                            duration: number;
                            status: string;
                            id: string;
                            room_name: string;
                            start_ts: number;
                            max_participants: number;
                            share_token: string;
                        }[];
                        total_count: number;
                    } | {} | undefined;
                }>;
                getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        teamUpgradeBanner: ({
                            team: {
                                children: {
                                    name: string;
                                    logo: string | null;
                                    bio: string | null;
                                    theme: string | null;
                                    id: number;
                                    timeFormat: number | null;
                                    weekStart: string;
                                    timeZone: string;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    slug: string | null;
                                    parentId: number | null;
                                    hideBranding: boolean;
                                    brandColor: string | null;
                                    darkBrandColor: string | null;
                                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                    createdAt: Date;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    appLogo: string | null;
                                    appIconLogo: string | null;
                                    isPrivate: boolean;
                                    hideBookATeamMember: boolean;
                                    bannerUrl: string | null;
                                    isOrganization: boolean;
                                    pendingPayment: boolean;
                                    isPlatform: boolean;
                                }[];
                            } & {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            };
                        } & {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        })[];
                        orgUpgradeBanner: ({
                            team: {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            };
                        } & {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        })[];
                        verifyEmailBanner: boolean;
                        calendarCredentialBanner: boolean;
                        invalidAppCredentialBanners: import('../../../features/users/components/InvalidAppCredentialsBanner').InvalidAppCredentialBannerProps[];
                    };
                }>;
                getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        recordingId: string;
                    };
                    output: {
                        download_link: string;
                    } | undefined;
                }>;
                getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                }>;
                updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    };
                    output: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    };
                }>;
                shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        id: number;
                        email: string;
                        isVerified: boolean;
                    };
                }>;
                teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: ({
                        teamId: number;
                        name: string;
                        slug: string | null;
                        image: string;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        readOnly: boolean;
                    } | {
                        teamId: null;
                        name: string | null;
                        slug: string | null;
                        image: string;
                        readOnly: boolean;
                    })[];
                }>;
                connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        token: string;
                    };
                    output: {
                        isBookingAlreadyAcceptedBySomeoneElse: boolean;
                        meetingUrl: string;
                    };
                }>;
                outOfOfficeCreate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        offset: number;
                        reasonId: number;
                        dateRange: {
                            startDate: Date;
                            endDate: Date;
                        };
                        toTeamUserId: number | null;
                        notes?: string | null | undefined;
                    };
                    output: {};
                }>;
                outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        notes: string | null;
                        reason: {
                            reason: string;
                            id: number;
                            userId: number | null;
                            emoji: string;
                        } | null;
                        id: number;
                        start: Date;
                        end: Date;
                        uuid: string;
                        toUserId: number | null;
                        toUser: {
                            username: string | null;
                        } | null;
                    }[];
                }>;
                outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        outOfOfficeUid: string;
                    };
                    output: {};
                }>;
                addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                    };
                    output: {
                        data: {
                            email: string;
                            id: number;
                            userId: number;
                            emailVerified: Date | null;
                        };
                        message: string;
                    };
                }>;
                getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        id: number;
                        timeZone: string;
                        startDate: Date;
                        endDate: Date | null;
                    }[];
                }>;
                outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        enabled: boolean;
                        reason: string;
                        id: number;
                        userId: number | null;
                        emoji: string;
                    }[];
                }>;
            }>;
            public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                session: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: import("next-auth").Session | null;
                }>;
                i18n: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        locale: string;
                        CalComVersion: string;
                    };
                    output: {
                        i18n: import("next-i18next").SSRConfig;
                        locale: string;
                    };
                }>;
                countryCode: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        countryCode: string;
                    };
                }>;
                submitRating: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        rating: number;
                        bookingUid: string;
                        comment?: string | undefined;
                    };
                    output: void;
                }>;
                noShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingUid: string;
                    };
                    output: void;
                }>;
                samlTenantProduct: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                    };
                    output: {
                        tenant: string;
                        product: string;
                    };
                }>;
                stripeCheckoutSession: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        stripeCustomerId?: string | undefined;
                        checkoutSessionId?: string | undefined;
                    };
                    output: {
                        valid: boolean;
                        hasPaymentFailed?: undefined;
                        isPremiumUsername?: undefined;
                        customer?: undefined;
                    } | {
                        valid: boolean;
                        hasPaymentFailed: boolean;
                        isPremiumUsername: boolean;
                        customer: {
                            username: string;
                            email: string;
                            stripeCustomerId: string;
                        };
                    };
                }>;
                slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                    ctx: import("../createContext").InnerContext;
                    meta: object;
                    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T = unknown>(string: string) => T;
                        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>, {
                    getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: {
                            startTime: string;
                            endTime: string;
                            eventTypeId?: number | undefined;
                            eventTypeSlug?: string | undefined;
                            timeZone?: string | undefined;
                            usernameList?: string[] | undefined;
                            debug?: boolean | undefined;
                            duration?: string | undefined;
                            rescheduleUid?: string | null | undefined;
                            isTeamEvent?: boolean | undefined;
                            orgSlug?: string | undefined;
                        };
                        output: import("./viewer/slots/util").IGetAvailableSlots;
                    }>;
                    reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            eventTypeId: number;
                            slotUtcStartDate: string;
                            slotUtcEndDate: string;
                            bookingUid?: string | undefined;
                        };
                        output: {
                            uid: string;
                        };
                    }>;
                    removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            uid: string | null;
                        };
                        output: void;
                    }>;
                }>;
                event: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        username: string;
                        org: string | null;
                        eventSlug: string;
                        isTeamEvent?: boolean | undefined;
                        fromRedirectOfNonOrgLink?: boolean | undefined;
                    };
                    output: {
                        bookingFields: {
                            name: string;
                            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                            options?: {
                                label: string;
                                value: string;
                            }[] | undefined;
                            required?: boolean | undefined;
                            label?: string | undefined;
                            placeholder?: string | undefined;
                            defaultLabel?: string | undefined;
                            defaultPlaceholder?: string | undefined;
                            labelAsSafeHtml?: string | undefined;
                            getOptionsAt?: string | undefined;
                            optionsInputs?: Record<string, {
                                type: "text" | "address" | "phone";
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                            }> | undefined;
                            variant?: string | undefined;
                            variantsConfig?: {
                                variants: Record<string, {
                                    fields: {
                                        name: string;
                                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                        required?: boolean | undefined;
                                        label?: string | undefined;
                                        placeholder?: string | undefined;
                                        labelAsSafeHtml?: string | undefined;
                                    }[];
                                }>;
                            } | undefined;
                            views?: {
                                label: string;
                                id: string;
                                description?: string | undefined;
                            }[] | undefined;
                            hideWhenJustOneOption?: boolean | undefined;
                            hidden?: boolean | undefined;
                            editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                            sources?: {
                                label: string;
                                type: string;
                                id: string;
                                editUrl?: string | undefined;
                                fieldRequired?: boolean | undefined;
                            }[] | undefined;
                        }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                        users: ({
                            metadata: undefined;
                            bookerUrl: string;
                            profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                            username: string | null;
                            email: string;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            emailVerified: Date | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            movedToProfileId: number | null;
                        } | {
                            metadata: undefined;
                            bookerUrl: string;
                            profile: {
                                organization: Omit<{
                                    name: string;
                                    id: number;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    slug: string | null;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    bannerUrl: string | null;
                                } & Omit<Pick<{
                                    id: number;
                                    name: string;
                                    slug: string | null;
                                    logo: string | null;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    appLogo: string | null;
                                    appIconLogo: string | null;
                                    bio: string | null;
                                    hideBranding: boolean;
                                    isPrivate: boolean;
                                    hideBookATeamMember: boolean;
                                    createdAt: Date;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    theme: string | null;
                                    brandColor: string | null;
                                    darkBrandColor: string | null;
                                    bannerUrl: string | null;
                                    parentId: number | null;
                                    timeFormat: number | null;
                                    timeZone: string;
                                    weekStart: string;
                                    isOrganization: boolean;
                                    pendingPayment: boolean;
                                    isPlatform: boolean;
                                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                                    requestedSlug: string | null;
                                    metadata: {
                                        requestedSlug: string | null;
                                        paymentId?: string | undefined;
                                        subscriptionId?: string | null | undefined;
                                        subscriptionItemId?: string | null | undefined;
                                        orgSeats?: number | null | undefined;
                                        orgPricePerSeat?: number | null | undefined;
                                        migratedToOrgFrom?: {
                                            teamSlug?: string | null | undefined;
                                            lastMigrationTime?: string | undefined;
                                            reverted?: boolean | undefined;
                                            lastRevertTime?: string | undefined;
                                        } | undefined;
                                    };
                                }, "metadata"> & {
                                    requestedSlug: string | null;
                                    metadata: {
                                        requestedSlug: string | null;
                                        paymentId?: string | undefined;
                                        subscriptionId?: string | null | undefined;
                                        subscriptionItemId?: string | null | undefined;
                                        orgSeats?: number | null | undefined;
                                        orgPricePerSeat?: number | null | undefined;
                                        migratedToOrgFrom?: {
                                            teamSlug?: string | null | undefined;
                                            lastMigrationTime?: string | undefined;
                                            reverted?: boolean | undefined;
                                            lastRevertTime?: string | undefined;
                                        } | undefined;
                                    };
                                };
                                username: string;
                                id: number;
                                uid: string;
                                userId: number;
                                organizationId: number;
                                createdAt: Date & string;
                                updatedAt: Date & string;
                                upId: string;
                            };
                            username: string | null;
                            email: string;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            emailVerified: Date | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            movedToProfileId: number | null;
                        })[];
                        locations: (Pick<Partial<import('../../../app-store/locations').LocationObject>, "link" | "address"> & Omit<import('../../../app-store/locations').LocationObject, "link" | "address">)[];
                        profile: {
                            image?: string | undefined;
                            name?: string | undefined;
                            username?: string | null | undefined;
                            weekStart: string;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            theme: null;
                            bookerLayouts: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null;
                        };
                        entity: {
                            considerUnpublished: boolean;
                            fromRedirectOfNonOrgLink: boolean;
                            orgSlug: string | null;
                            name: string | null;
                            teamSlug: null;
                            logoUrl: null;
                        };
                        isInstantEvent: boolean;
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        } | null;
                        isDynamic: boolean;
                        periodCountCalendarDays: boolean;
                        periodStartDate: null;
                        periodEndDate: null;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        periodType: "UNLIMITED";
                        periodDays: null;
                        slotInterval: null;
                        offsetStart: number;
                        customInputs: {
                            required: boolean;
                            label: string;
                            placeholder: string;
                            type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                            id: number;
                            eventTypeId: number;
                            options?: {
                                label: string;
                                type: string;
                            }[] | null | undefined;
                            hasToBeCreated?: boolean | undefined;
                        }[];
                        disableGuests: boolean;
                        minimumBookingNotice: number;
                        schedule: null;
                        timeZone: null;
                        successRedirectUrl: string;
                        forwardParamsSuccessRedirect: boolean;
                        teamId: null;
                        scheduleId: null;
                        availability: never[];
                        price: number;
                        currency: string;
                        schedulingType: "COLLECTIVE";
                        seatsPerTimeSlot: null;
                        seatsShowAttendees: null;
                        seatsShowAvailabilityCount: null;
                        onlyShowFirstAvailableSlot: boolean;
                        id: number;
                        hideCalendarNotes: boolean;
                        recurringEvent: null;
                        destinationCalendar: null;
                        team: null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        bookingLimits: null;
                        durationLimits: null;
                        hidden: boolean;
                        userId: number;
                        parentId: null;
                        owner: null;
                        workflows: never[];
                        hosts: never[];
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        secondaryEmailId: null;
                        secondaryEmail: null;
                        length: number;
                        slug: string;
                        title: string;
                        eventName: string;
                        description: string;
                        descriptionAsSafeHTML: string;
                        position: number;
                    } | {
                        bookerLayouts: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null;
                        description: string;
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        } | null;
                        customInputs: {
                            required: boolean;
                            label: string;
                            placeholder: string;
                            type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                            id: number;
                            eventTypeId: number;
                            options?: {
                                label: string;
                                type: string;
                            }[] | null | undefined;
                            hasToBeCreated?: boolean | undefined;
                        }[];
                        locations: (Pick<Partial<import('../../../app-store/locations').LocationObject>, "link" | "address"> & Omit<import('../../../app-store/locations').LocationObject, "link" | "address">)[];
                        bookingFields: {
                            name: string;
                            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                            options?: {
                                label: string;
                                value: string;
                            }[] | undefined;
                            required?: boolean | undefined;
                            label?: string | undefined;
                            placeholder?: string | undefined;
                            defaultLabel?: string | undefined;
                            defaultPlaceholder?: string | undefined;
                            labelAsSafeHtml?: string | undefined;
                            getOptionsAt?: string | undefined;
                            optionsInputs?: Record<string, {
                                type: "text" | "address" | "phone";
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                            }> | undefined;
                            variant?: string | undefined;
                            variantsConfig?: {
                                variants: Record<string, {
                                    fields: {
                                        name: string;
                                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                        required?: boolean | undefined;
                                        label?: string | undefined;
                                        placeholder?: string | undefined;
                                        labelAsSafeHtml?: string | undefined;
                                    }[];
                                }>;
                            } | undefined;
                            views?: {
                                label: string;
                                id: string;
                                description?: string | undefined;
                            }[] | undefined;
                            hideWhenJustOneOption?: boolean | undefined;
                            hidden?: boolean | undefined;
                            editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                            sources?: {
                                label: string;
                                type: string;
                                id: string;
                                editUrl?: string | undefined;
                                fieldRequired?: boolean | undefined;
                            }[] | undefined;
                        }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                        recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                        profile: {
                            username: string | null | undefined;
                            name: string | null;
                            weekStart: string;
                            image: string;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            theme: string | null;
                            bookerLayouts: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null;
                        };
                        users: {
                            username: string | null;
                            name: string | null;
                            weekStart: string;
                            organizationId: any;
                            avatarUrl: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                            bookerUrl: string;
                        }[];
                        entity: {
                            logoUrl?: string | undefined;
                            name: any;
                            fromRedirectOfNonOrgLink: boolean;
                            considerUnpublished: boolean;
                            orgSlug: string | null;
                            teamSlug: string | null;
                        };
                        isDynamic: boolean;
                        isInstantEvent: boolean;
                        aiPhoneCallConfig: {
                            enabled: boolean;
                            id: number;
                            eventTypeId: number;
                            yourPhoneNumber: string;
                            numberToCall: string;
                            guestName: string;
                            guestEmail: string | null;
                            guestCompany: string | null;
                            generalPrompt: string;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                        assignAllTeamMembers: boolean;
                        owner: ({
                            username: string | null;
                            name: string | null;
                            organization: {
                                name: string;
                                id: number;
                                slug: string | null;
                                calVideoLogo: string | null;
                                bannerUrl: string | null;
                            } | null;
                            theme: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            weekStart: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            avatarUrl: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        }) | null;
                        hosts: {
                            user: {
                                username: string | null;
                                name: string | null;
                                organization: {
                                    name: string;
                                    id: number;
                                    slug: string | null;
                                    calVideoLogo: string | null;
                                    bannerUrl: string | null;
                                } | null;
                                theme: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                weekStart: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                avatarUrl: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                            } & {
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            };
                        }[];
                        price: number;
                        title: string;
                        hidden: boolean;
                        team: {
                            name: string;
                            theme: string | null;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            parent: {
                                name: string;
                                slug: string | null;
                                logoUrl: string | null;
                                bannerUrl: string | null;
                            } | null;
                            slug: string | null;
                            parentId: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            logoUrl: string | null;
                        } | null;
                        length: number;
                        workflows: ({
                            workflow: {
                                steps: {
                                    action: import('../../../prisma-client').$Enums.WorkflowActions;
                                    id: number;
                                    template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                                    stepNumber: number;
                                    workflowId: number;
                                    sendTo: string | null;
                                    reminderBody: string | null;
                                    emailSubject: string | null;
                                    numberRequired: boolean | null;
                                    sender: string | null;
                                    numberVerificationPending: boolean;
                                    includeCalendarEvent: boolean;
                                }[];
                            } & {
                                name: string;
                                trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                                id: number;
                                userId: number | null;
                                time: number | null;
                                position: number;
                                teamId: number | null;
                                timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                            };
                        } & {
                            id: number;
                            eventTypeId: number;
                            workflowId: number;
                        })[];
                        currency: string;
                        schedule: {
                            id: number;
                            timeZone: string | null;
                        } | null;
                        id: number;
                        slug: string;
                        eventName: string | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        disableGuests: boolean;
                        seatsPerTimeSlot: number | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                    } | null;
                }>;
                ssoConnections: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        connectionExists: null;
                    } | {
                        connectionExists: boolean;
                    };
                }>;
            }>;
            auth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                changePassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        oldPassword: string;
                        newPassword: string;
                    };
                    output: void;
                }>;
                verifyPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        passwordInput: string;
                    };
                    output: void;
                }>;
                verifyCodeUnAuthenticated: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        code: string;
                    };
                    output: true;
                }>;
                sendVerifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        username?: string | undefined;
                        language?: string | undefined;
                        isVerifyingEmail?: boolean | undefined;
                    };
                    output: {
                        ok: boolean;
                        skipped: boolean;
                    };
                }>;
                resendVerifyEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                    } | undefined;
                    output: {
                        ok: boolean;
                        skipped: boolean;
                    };
                }>;
                createAccountPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: void;
                }>;
            }>;
            deploymentSetup: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        licenseKey?: string | undefined;
                    };
                    output: void;
                }>;
            }>;
            bookings: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        filters: {
                            status: "upcoming" | "recurring" | "past" | "unconfirmed" | "cancelled";
                            teamIds?: number[] | undefined;
                            userIds?: number[] | undefined;
                            eventTypeIds?: number[] | undefined;
                        };
                        limit?: number | null | undefined;
                        cursor?: number | null | undefined;
                    };
                    output: {
                        bookings: {
                            eventType: {
                                recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                                price: number;
                                currency: string;
                                metadata: {
                                    smartContractAddress?: string | undefined;
                                    blockchainId?: number | undefined;
                                    multipleDuration?: number[] | undefined;
                                    giphyThankYouPage?: string | undefined;
                                    apps?: {
                                        alby?: {
                                            price: number;
                                            currency: string;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                        } | undefined;
                                        basecamp3?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        dailyvideo?: {} | undefined;
                                        fathom?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        feishucalendar?: {} | undefined;
                                        ga4?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        giphy?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            thankYouPage?: string | undefined;
                                        } | undefined;
                                        googlecalendar?: {} | undefined;
                                        gtm?: {
                                            trackingId: string;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        hubspot?: {} | undefined;
                                        intercom?: {} | undefined;
                                        jelly?: {} | undefined;
                                        jitsivideo?: {} | undefined;
                                        larkcalendar?: {} | undefined;
                                        make?: {} | undefined;
                                        matomo?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            MATOMO_URL?: string | undefined;
                                            SITE_ID?: string | undefined;
                                        } | undefined;
                                        metapixel?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        "mock-payment-app"?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        office365calendar?: {
                                            client_id: string;
                                            client_secret: string;
                                        } | undefined;
                                        office365video?: {
                                            client_id: string;
                                            client_secret: string;
                                        } | undefined;
                                        paypal?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        "pipedrive-crm"?: {} | undefined;
                                        plausible?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            PLAUSIBLE_URL?: string | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        posthog?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            TRACKING_ID?: string | undefined;
                                            API_HOST?: string | undefined;
                                        } | undefined;
                                        qr_code?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        "routing-forms"?: any;
                                        salesforce?: {} | undefined;
                                        shimmervideo?: {} | undefined;
                                        stripe?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        tandemvideo?: {} | undefined;
                                        "booking-pages-tag"?: {
                                            trackingId: string;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        "event-type-app-card"?: {
                                            isSunrise: boolean;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        vital?: {} | undefined;
                                        webex?: {} | undefined;
                                        wordpress?: {
                                            isSunrise: boolean;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        zapier?: {} | undefined;
                                        "zoho-bigin"?: {} | undefined;
                                        zohocalendar?: {} | undefined;
                                        zohocrm?: {} | undefined;
                                        zoomvideo?: {} | undefined;
                                    } | undefined;
                                    additionalNotesRequired?: boolean | undefined;
                                    disableSuccessPage?: boolean | undefined;
                                    disableStandardEmails?: {
                                        confirmation?: {
                                            host?: boolean | undefined;
                                            attendee?: boolean | undefined;
                                        } | undefined;
                                    } | undefined;
                                    managedEventConfig?: {
                                        unlockedFields?: {
                                            price?: true | undefined;
                                            bookings?: true | undefined;
                                            webhooks?: true | undefined;
                                            profile?: true | undefined;
                                            owner?: true | undefined;
                                            title?: true | undefined;
                                            description?: true | undefined;
                                            hidden?: true | undefined;
                                            team?: true | undefined;
                                            availability?: true | undefined;
                                            length?: true | undefined;
                                            workflows?: true | undefined;
                                            users?: true | undefined;
                                            hosts?: true | undefined;
                                            currency?: true | undefined;
                                            children?: true | undefined;
                                            schedule?: true | undefined;
                                            timeZone?: true | undefined;
                                            userId?: true | undefined;
                                            metadata?: true | undefined;
                                            position?: true | undefined;
                                            parent?: true | undefined;
                                            slug?: true | undefined;
                                            locations?: true | undefined;
                                            offsetStart?: true | undefined;
                                            profileId?: true | undefined;
                                            teamId?: true | undefined;
                                            eventName?: true | undefined;
                                            parentId?: true | undefined;
                                            bookingFields?: true | undefined;
                                            periodType?: true | undefined;
                                            periodStartDate?: true | undefined;
                                            periodEndDate?: true | undefined;
                                            periodDays?: true | undefined;
                                            periodCountCalendarDays?: true | undefined;
                                            lockTimeZoneToggleOnBookingPage?: true | undefined;
                                            requiresConfirmation?: true | undefined;
                                            requiresBookerEmailVerification?: true | undefined;
                                            recurringEvent?: true | undefined;
                                            disableGuests?: true | undefined;
                                            hideCalendarNotes?: true | undefined;
                                            minimumBookingNotice?: true | undefined;
                                            beforeEventBuffer?: true | undefined;
                                            afterEventBuffer?: true | undefined;
                                            seatsPerTimeSlot?: true | undefined;
                                            onlyShowFirstAvailableSlot?: true | undefined;
                                            seatsShowAttendees?: true | undefined;
                                            seatsShowAvailabilityCount?: true | undefined;
                                            schedulingType?: true | undefined;
                                            scheduleId?: true | undefined;
                                            slotInterval?: true | undefined;
                                            successRedirectUrl?: true | undefined;
                                            forwardParamsSuccessRedirect?: true | undefined;
                                            bookingLimits?: true | undefined;
                                            durationLimits?: true | undefined;
                                            isInstantEvent?: true | undefined;
                                            assignAllTeamMembers?: true | undefined;
                                            useEventTypeDestinationCalendarEmail?: true | undefined;
                                            secondaryEmailId?: true | undefined;
                                            hashedLink?: true | undefined;
                                            destinationCalendar?: true | undefined;
                                            customInputs?: true | undefined;
                                            aiPhoneCallConfig?: true | undefined;
                                            secondaryEmail?: true | undefined;
                                            _count?: true | undefined;
                                        } | undefined;
                                    } | undefined;
                                    requiresConfirmationThreshold?: {
                                        time: number;
                                        unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                    } | undefined;
                                    config?: {
                                        useHostSchedulesForTeamEvent?: boolean | undefined;
                                    } | undefined;
                                    bookerLayouts?: {
                                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                    } | null | undefined;
                                } | null;
                                team?: {
                                    name: string;
                                    id: number;
                                } | null | undefined;
                                id?: number | undefined;
                                slug?: string | undefined;
                                eventName?: string | null | undefined;
                                seatsShowAttendees?: boolean | null | undefined;
                                seatsShowAvailabilityCount?: boolean | null | undefined;
                            };
                            startTime: string;
                            endTime: string;
                            paid: boolean;
                            payment: {
                                success: boolean;
                                currency: string;
                                paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
                                amount: number;
                            }[];
                            location: string | null;
                            title: string;
                            description: string | null;
                            attendees: {
                                email: string;
                                name: string;
                                id: number;
                                timeZone: string;
                                bookingId: number | null;
                                locale: string | null;
                            }[];
                            status: import('../../../prisma-client').$Enums.BookingStatus;
                            rescheduled: boolean | null;
                            user: {
                                email: string;
                                name: string | null;
                                id: number;
                            } | null;
                            id: number;
                            uid: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            customInputs: import('../../../prisma-client').Prisma.JsonValue;
                            recurringEventId: string | null;
                            userPrimaryEmail: string | null;
                            isRecorded: boolean;
                            references: {
                                type: string;
                                id: number;
                                uid: string;
                                credentialId: number | null;
                                deleted: boolean | null;
                                bookingId: number | null;
                                thirdPartyRecurringEventId: string | null;
                                meetingId: string | null;
                                meetingPassword: string | null;
                                meetingUrl: string | null;
                                externalCalendarId: string | null;
                            }[];
                            seatsReferences: {
                                attendee: {
                                    email: string;
                                };
                                referenceUid: string;
                            }[];
                        }[];
                        recurringInfo: {
                            recurringEventId: string | null;
                            count: number;
                            firstDate: Date | null;
                            bookings: {
                                [key: string]: Date[];
                            };
                        }[];
                        nextCursor: number | null;
                    };
                }>;
                requestReschedule: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingId: string;
                        rescheduleReason?: string | undefined;
                    };
                    output: void;
                }>;
                editLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingId: number;
                        newLocation: string;
                        details?: {
                            credentialId?: number | undefined;
                        } | undefined;
                    };
                    output: {
                        message: string;
                    };
                }>;
                confirm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingId: number;
                        confirmed: boolean;
                        recurringEventId?: string | undefined;
                        reason?: string | undefined;
                    };
                    output: {
                        message: string;
                        status: "ACCEPTED" | "REJECTED";
                    } | null;
                }>;
                getBookingAttendees: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        seatReferenceUid: string;
                    };
                    output: number;
                }>;
                find: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        bookingUid?: string | undefined;
                    };
                    output: {
                        booking: {
                            paid: boolean;
                            description: string | null;
                            status: import('../../../prisma-client').$Enums.BookingStatus;
                            id: number;
                            startTime: Date;
                            endTime: Date;
                            eventTypeId: number | null;
                            uid: string;
                        } | null;
                    };
                }>;
                getInstantBookingLocation: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        bookingId: number;
                    };
                    output: {
                        booking: {
                            location: string | null;
                            description: string | null;
                            status: import('../../../prisma-client').$Enums.BookingStatus;
                            id: number;
                            startTime: Date;
                            endTime: Date;
                            eventTypeId: number | null;
                            uid: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                        } | null;
                    };
                }>;
            }>;
            eventTypes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        filters?: {
                            teamIds?: number[] | undefined;
                            upIds?: string[] | undefined;
                        } | undefined;
                        forRoutingForms?: boolean | undefined;
                    } | null | undefined;
                    output: {
                        allUsersAcrossAllEventTypes: Map<number, {
                            username: string | null;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        }>;
                        eventTypeGroups: {
                            eventTypes: {
                                userIds: number[];
                                safeDescription: string | undefined;
                                metadata: {
                                    smartContractAddress?: string | undefined;
                                    blockchainId?: number | undefined;
                                    multipleDuration?: number[] | undefined;
                                    giphyThankYouPage?: string | undefined;
                                    apps?: {
                                        alby?: {
                                            price: number;
                                            currency: string;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                        } | undefined;
                                        basecamp3?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        dailyvideo?: {} | undefined;
                                        fathom?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        feishucalendar?: {} | undefined;
                                        ga4?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        giphy?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            thankYouPage?: string | undefined;
                                        } | undefined;
                                        googlecalendar?: {} | undefined;
                                        gtm?: {
                                            trackingId: string;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        hubspot?: {} | undefined;
                                        intercom?: {} | undefined;
                                        jelly?: {} | undefined;
                                        jitsivideo?: {} | undefined;
                                        larkcalendar?: {} | undefined;
                                        make?: {} | undefined;
                                        matomo?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            MATOMO_URL?: string | undefined;
                                            SITE_ID?: string | undefined;
                                        } | undefined;
                                        metapixel?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        "mock-payment-app"?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        office365calendar?: {
                                            client_id: string;
                                            client_secret: string;
                                        } | undefined;
                                        office365video?: {
                                            client_id: string;
                                            client_secret: string;
                                        } | undefined;
                                        paypal?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        "pipedrive-crm"?: {} | undefined;
                                        plausible?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            PLAUSIBLE_URL?: string | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        posthog?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            TRACKING_ID?: string | undefined;
                                            API_HOST?: string | undefined;
                                        } | undefined;
                                        qr_code?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        "routing-forms"?: any;
                                        salesforce?: {} | undefined;
                                        shimmervideo?: {} | undefined;
                                        stripe?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        tandemvideo?: {} | undefined;
                                        "booking-pages-tag"?: {
                                            trackingId: string;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        "event-type-app-card"?: {
                                            isSunrise: boolean;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        vital?: {} | undefined;
                                        webex?: {} | undefined;
                                        wordpress?: {
                                            isSunrise: boolean;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        zapier?: {} | undefined;
                                        "zoho-bigin"?: {} | undefined;
                                        zohocalendar?: {} | undefined;
                                        zohocrm?: {} | undefined;
                                        zoomvideo?: {} | undefined;
                                    } | undefined;
                                    additionalNotesRequired?: boolean | undefined;
                                    disableSuccessPage?: boolean | undefined;
                                    disableStandardEmails?: {
                                        confirmation?: {
                                            host?: boolean | undefined;
                                            attendee?: boolean | undefined;
                                        } | undefined;
                                    } | undefined;
                                    managedEventConfig?: {
                                        unlockedFields?: {
                                            price?: true | undefined;
                                            bookings?: true | undefined;
                                            webhooks?: true | undefined;
                                            profile?: true | undefined;
                                            owner?: true | undefined;
                                            title?: true | undefined;
                                            description?: true | undefined;
                                            hidden?: true | undefined;
                                            team?: true | undefined;
                                            availability?: true | undefined;
                                            length?: true | undefined;
                                            workflows?: true | undefined;
                                            users?: true | undefined;
                                            hosts?: true | undefined;
                                            currency?: true | undefined;
                                            children?: true | undefined;
                                            schedule?: true | undefined;
                                            timeZone?: true | undefined;
                                            userId?: true | undefined;
                                            metadata?: true | undefined;
                                            position?: true | undefined;
                                            parent?: true | undefined;
                                            slug?: true | undefined;
                                            locations?: true | undefined;
                                            offsetStart?: true | undefined;
                                            profileId?: true | undefined;
                                            teamId?: true | undefined;
                                            eventName?: true | undefined;
                                            parentId?: true | undefined;
                                            bookingFields?: true | undefined;
                                            periodType?: true | undefined;
                                            periodStartDate?: true | undefined;
                                            periodEndDate?: true | undefined;
                                            periodDays?: true | undefined;
                                            periodCountCalendarDays?: true | undefined;
                                            lockTimeZoneToggleOnBookingPage?: true | undefined;
                                            requiresConfirmation?: true | undefined;
                                            requiresBookerEmailVerification?: true | undefined;
                                            recurringEvent?: true | undefined;
                                            disableGuests?: true | undefined;
                                            hideCalendarNotes?: true | undefined;
                                            minimumBookingNotice?: true | undefined;
                                            beforeEventBuffer?: true | undefined;
                                            afterEventBuffer?: true | undefined;
                                            seatsPerTimeSlot?: true | undefined;
                                            onlyShowFirstAvailableSlot?: true | undefined;
                                            seatsShowAttendees?: true | undefined;
                                            seatsShowAvailabilityCount?: true | undefined;
                                            schedulingType?: true | undefined;
                                            scheduleId?: true | undefined;
                                            slotInterval?: true | undefined;
                                            successRedirectUrl?: true | undefined;
                                            forwardParamsSuccessRedirect?: true | undefined;
                                            bookingLimits?: true | undefined;
                                            durationLimits?: true | undefined;
                                            isInstantEvent?: true | undefined;
                                            assignAllTeamMembers?: true | undefined;
                                            useEventTypeDestinationCalendarEmail?: true | undefined;
                                            secondaryEmailId?: true | undefined;
                                            hashedLink?: true | undefined;
                                            destinationCalendar?: true | undefined;
                                            customInputs?: true | undefined;
                                            aiPhoneCallConfig?: true | undefined;
                                            secondaryEmail?: true | undefined;
                                            _count?: true | undefined;
                                        } | undefined;
                                    } | undefined;
                                    requiresConfirmationThreshold?: {
                                        time: number;
                                        unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                    } | undefined;
                                    config?: {
                                        useHostSchedulesForTeamEvent?: boolean | undefined;
                                    } | undefined;
                                    bookerLayouts?: {
                                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                    } | null | undefined;
                                } | null;
                                children: {
                                    users: ({
                                        username: string | null;
                                        name: string | null;
                                        id: number;
                                        avatarUrl: string | null;
                                    } & {
                                        nonProfileUsername: string | null;
                                        profile: import("@calcom/types/UserProfile").UserProfile;
                                    })[];
                                    price: number;
                                    title: string;
                                    description: string | null;
                                    hidden: boolean;
                                    length: number;
                                    currency: string;
                                    id: number;
                                    timeZone: string | null;
                                    userId: number | null;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    position: number;
                                    slug: string;
                                    locations: import('../../../prisma-client').Prisma.JsonValue;
                                    offsetStart: number;
                                    profileId: number | null;
                                    teamId: number | null;
                                    eventName: string | null;
                                    parentId: number | null;
                                    bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                    periodType: import('../../../prisma-client').$Enums.PeriodType;
                                    periodStartDate: Date | null;
                                    periodEndDate: Date | null;
                                    periodDays: number | null;
                                    periodCountCalendarDays: boolean | null;
                                    lockTimeZoneToggleOnBookingPage: boolean;
                                    requiresConfirmation: boolean;
                                    requiresBookerEmailVerification: boolean;
                                    recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                    disableGuests: boolean;
                                    hideCalendarNotes: boolean;
                                    minimumBookingNotice: number;
                                    beforeEventBuffer: number;
                                    afterEventBuffer: number;
                                    seatsPerTimeSlot: number | null;
                                    onlyShowFirstAvailableSlot: boolean;
                                    seatsShowAttendees: boolean | null;
                                    seatsShowAvailabilityCount: boolean | null;
                                    schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                    scheduleId: number | null;
                                    slotInterval: number | null;
                                    successRedirectUrl: string | null;
                                    forwardParamsSuccessRedirect: boolean | null;
                                    bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                    durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                    isInstantEvent: boolean;
                                    assignAllTeamMembers: boolean;
                                    useEventTypeDestinationCalendarEmail: boolean;
                                    secondaryEmailId: number | null;
                                }[];
                                price: number;
                                title: string;
                                description: string | null;
                                hidden: boolean;
                                length: number;
                                hosts: ({
                                    user: {
                                        username: string | null;
                                        name: string | null;
                                        id: number;
                                        avatarUrl: string | null;
                                    };
                                } & {
                                    eventTypeId: number;
                                    userId: number;
                                    isFixed: boolean;
                                    priority: number | null;
                                })[];
                                currency: string;
                                id: number;
                                timeZone: string | null;
                                userId: number | null;
                                position: number;
                                slug: string;
                                locations: import('../../../prisma-client').Prisma.JsonValue;
                                offsetStart: number;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                periodType: import('../../../prisma-client').$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                isInstantEvent: boolean;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                secondaryEmailId: number | null;
                                hashedLink: {
                                    link: string;
                                    id: number;
                                    eventTypeId: number;
                                } | null;
                                aiPhoneCallConfig: {
                                    enabled: boolean;
                                    id: number;
                                    eventTypeId: number;
                                    yourPhoneNumber: string;
                                    numberToCall: string;
                                    guestName: string;
                                    guestEmail: string | null;
                                    guestCompany: string | null;
                                    generalPrompt: string;
                                    beginMessage: string | null;
                                    llmId: string | null;
                                } | null;
                            }[];
                            teamId?: number | null | undefined;
                            parentId?: number | null | undefined;
                            bookerUrl: string;
                            membershipRole?: import('../../../prisma/enums').MembershipRole | null | undefined;
                            profile: {
                                slug: string | null;
                                name: string | null;
                                image: string;
                                eventTypesLockedByOrg?: boolean | undefined;
                            };
                            metadata: {
                                membershipCount: number;
                                readOnly: boolean;
                            };
                        }[];
                        profiles: {
                            teamId: number | null | undefined;
                            membershipRole: import('../../../prisma/enums').MembershipRole | null | undefined;
                            membershipCount: number;
                            readOnly: boolean;
                            slug: string | null;
                            name: string | null;
                            image: string;
                            eventTypesLockedByOrg?: boolean | undefined;
                        }[];
                    };
                }>;
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        title: string;
                        description: string | null;
                        hidden: boolean;
                        length: number;
                        id: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string;
                        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                    }[];
                }>;
                listWithTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        title: string;
                        team: {
                            name: string;
                            id: number;
                        } | null;
                        id: number;
                        slug: string;
                    }[];
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        title: string;
                        length: number;
                        slug: string;
                        description?: string | null | undefined;
                        hidden?: boolean | undefined;
                        metadata?: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        } | null | undefined;
                        locations?: {
                            type: string;
                            address?: string | undefined;
                            link?: string | undefined;
                            displayLocationPublicly?: boolean | undefined;
                            hostPhoneNumber?: string | undefined;
                            credentialId?: number | undefined;
                            teamName?: string | undefined;
                        }[] | undefined;
                        teamId?: number | null | undefined;
                        disableGuests?: boolean | undefined;
                        minimumBookingNotice?: number | undefined;
                        beforeEventBuffer?: number | undefined;
                        afterEventBuffer?: number | undefined;
                        schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                        slotInterval?: number | null | undefined;
                    };
                    output: {
                        eventType: {
                            price: number;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            length: number;
                            currency: string;
                            id: number;
                            timeZone: string | null;
                            userId: number | null;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            position: number;
                            slug: string;
                            locations: import('../../../prisma-client').Prisma.JsonValue;
                            offsetStart: number;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                            periodType: import('../../../prisma-client').$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                            durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                            isInstantEvent: boolean;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            secondaryEmailId: number | null;
                        };
                    };
                }>;
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id: number;
                        users?: number[] | undefined;
                    };
                    output: {
                        eventType: {
                            schedule: number | null;
                            scheduleName: string | null;
                            recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                            bookingLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                            durationLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                            locations: import('../../../app-store/locations').LocationObject[];
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {} | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {} | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {} | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {} | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {} | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        price?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        profile?: true | undefined;
                                        owner?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        hidden?: true | undefined;
                                        team?: true | undefined;
                                        availability?: true | undefined;
                                        length?: true | undefined;
                                        workflows?: true | undefined;
                                        users?: true | undefined;
                                        hosts?: true | undefined;
                                        currency?: true | undefined;
                                        children?: true | undefined;
                                        schedule?: true | undefined;
                                        timeZone?: true | undefined;
                                        userId?: true | undefined;
                                        metadata?: true | undefined;
                                        position?: true | undefined;
                                        parent?: true | undefined;
                                        slug?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hashedLink?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        customInputs?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                    defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                } | null | undefined;
                            };
                            customInputs: {
                                required: boolean;
                                label: string;
                                placeholder: string;
                                type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                                id: number;
                                eventTypeId: number;
                                options?: {
                                    label: string;
                                    type: string;
                                }[] | null | undefined;
                                hasToBeCreated?: boolean | undefined;
                            }[];
                            users: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                avatarUrl: string | null;
                                locale: string | null;
                            }[];
                            bookerUrl: string;
                            children: {
                                owner: {
                                    avatar: string;
                                    email: string;
                                    name: string;
                                    username: string;
                                    membership: import('../../../prisma-client').$Enums.MembershipRole;
                                    id: number;
                                    avatarUrl: string | null;
                                    nonProfileUsername: string | null;
                                    profile: import("@calcom/types/UserProfile").UserProfile;
                                };
                                created: boolean;
                                hidden: boolean;
                                slug: string;
                            }[];
                            price: number;
                            webhooks: {
                                active: boolean;
                                secret: string | null;
                                id: string;
                                eventTypeId: number | null;
                                subscriberUrl: string;
                                payloadTemplate: string | null;
                                eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                            }[];
                            owner: {
                                id: number;
                            } | null;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            team: {
                                members: {
                                    role: import('../../../prisma-client').$Enums.MembershipRole;
                                    user: {
                                        username: string | null;
                                        email: string;
                                        name: string | null;
                                        id: number;
                                        defaultScheduleId: number | null;
                                        avatarUrl: string | null;
                                        locale: string | null;
                                        eventTypes: {
                                            slug: string;
                                        }[];
                                    };
                                    accepted: boolean;
                                }[];
                                name: string;
                                id: number;
                                parent: {
                                    slug: string | null;
                                    organizationSettings: {
                                        lockEventTypeCreationForUsers: boolean;
                                    } | null;
                                } | null;
                                slug: string | null;
                                parentId: number | null;
                            } | null;
                            length: number;
                            workflows: ({
                                workflow: {
                                    team: {
                                        members: {
                                            role: import('../../../prisma-client').$Enums.MembershipRole;
                                            id: number;
                                            userId: number;
                                            teamId: number;
                                            disableImpersonation: boolean;
                                            accepted: boolean;
                                        }[];
                                        name: string;
                                        id: number;
                                        slug: string | null;
                                    } | null;
                                    activeOn: {
                                        eventType: {
                                            title: string;
                                            id: number;
                                            parentId: number | null;
                                            _count: {
                                                children: number;
                                            };
                                        };
                                    }[];
                                    steps: {
                                        action: import('../../../prisma-client').$Enums.WorkflowActions;
                                        id: number;
                                        template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                                        stepNumber: number;
                                        workflowId: number;
                                        sendTo: string | null;
                                        reminderBody: string | null;
                                        emailSubject: string | null;
                                        numberRequired: boolean | null;
                                        sender: string | null;
                                        numberVerificationPending: boolean;
                                        includeCalendarEvent: boolean;
                                    }[];
                                } & {
                                    name: string;
                                    trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                                    id: number;
                                    userId: number | null;
                                    time: number | null;
                                    position: number;
                                    teamId: number | null;
                                    timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                                };
                            } & {
                                id: number;
                                eventTypeId: number;
                                workflowId: number;
                            })[];
                            hosts: {
                                userId: number;
                                isFixed: boolean;
                                priority: number | null;
                            }[];
                            currency: string;
                            id: number;
                            timeZone: string | null;
                            userId: number | null;
                            parent: {
                                teamId: number | null;
                            } | null;
                            slug: string;
                            offsetStart: number;
                            teamId: number | null;
                            eventName: string | null;
                            bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                            periodType: import('../../../prisma-client').$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            isInstantEvent: boolean;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            secondaryEmailId: number | null;
                            hashedLink: {
                                link: string;
                                id: number;
                                eventTypeId: number;
                            } | null;
                            destinationCalendar: {
                                id: number;
                                eventTypeId: number | null;
                                credentialId: number | null;
                                externalId: string;
                                userId: number | null;
                                integration: string;
                                primaryEmail: string | null;
                            } | null;
                            aiPhoneCallConfig: {
                                enabled: boolean;
                                id: number;
                                eventTypeId: number;
                                yourPhoneNumber: string;
                                numberToCall: string;
                                guestName: string;
                                guestEmail: string | null;
                                guestCompany: string | null;
                                generalPrompt: string;
                                beginMessage: string | null;
                                llmId: string | null;
                            } | null;
                        } & {
                            users: ({
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                avatarUrl: string | null;
                                locale: string | null;
                            } & {
                                avatar: string;
                            })[];
                            periodStartDate: string | null;
                            periodEndDate: string | null;
                            bookingFields: {
                                name: string;
                                type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                options?: {
                                    label: string;
                                    value: string;
                                }[] | undefined;
                                required?: boolean | undefined;
                                label?: string | undefined;
                                placeholder?: string | undefined;
                                defaultLabel?: string | undefined;
                                defaultPlaceholder?: string | undefined;
                                labelAsSafeHtml?: string | undefined;
                                getOptionsAt?: string | undefined;
                                optionsInputs?: Record<string, {
                                    type: "text" | "address" | "phone";
                                    required?: boolean | undefined;
                                    placeholder?: string | undefined;
                                }> | undefined;
                                variant?: string | undefined;
                                variantsConfig?: {
                                    variants: Record<string, {
                                        fields: {
                                            name: string;
                                            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                            required?: boolean | undefined;
                                            label?: string | undefined;
                                            placeholder?: string | undefined;
                                            labelAsSafeHtml?: string | undefined;
                                        }[];
                                    }>;
                                } | undefined;
                                views?: {
                                    label: string;
                                    id: string;
                                    description?: string | undefined;
                                }[] | undefined;
                                hideWhenJustOneOption?: boolean | undefined;
                                hidden?: boolean | undefined;
                                editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                                sources?: {
                                    label: string;
                                    type: string;
                                    id: string;
                                    editUrl?: string | undefined;
                                    fieldRequired?: boolean | undefined;
                                }[] | undefined;
                            }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                        };
                        locationOptions: {
                            label: string;
                            options: {
                                label: string;
                                value: string;
                                disabled?: boolean | undefined;
                                icon?: string | undefined;
                                slug?: string | undefined;
                            }[];
                        }[];
                        destinationCalendar: {
                            id: number;
                            eventTypeId: number | null;
                            credentialId: number | null;
                            externalId: string;
                            userId: number | null;
                            integration: string;
                            primaryEmail: string | null;
                        } | null;
                        team: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                user: {
                                    username: string | null;
                                    email: string;
                                    name: string | null;
                                    id: number;
                                    defaultScheduleId: number | null;
                                    avatarUrl: string | null;
                                    locale: string | null;
                                    eventTypes: {
                                        slug: string;
                                    }[];
                                };
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            parent: {
                                slug: string | null;
                                organizationSettings: {
                                    lockEventTypeCreationForUsers: boolean;
                                } | null;
                            } | null;
                            slug: string | null;
                            parentId: number | null;
                        } | null;
                        teamMembers: {
                            profileId: number | null;
                            eventTypes: string[];
                            membership: import('../../../prisma-client').$Enums.MembershipRole;
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            avatarUrl: string | null;
                            locale: string | null;
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                            avatar: string;
                        }[];
                        currentUserMembership: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            user: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                avatarUrl: string | null;
                                locale: string | null;
                                eventTypes: {
                                    slug: string;
                                }[];
                            };
                            accepted: boolean;
                        } | null;
                        isUserOrganizationAdmin: boolean;
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        users?: (number[] & (string | number)[]) | undefined;
                        price?: number | undefined;
                        title?: string | undefined;
                        description?: string | null | undefined;
                        hidden?: boolean | undefined;
                        length?: number | undefined;
                        hosts?: {
                            userId: number;
                            profileId?: number | null | undefined;
                            isFixed?: boolean | undefined;
                            priority?: number | null | undefined;
                        }[] | undefined;
                        currency?: string | undefined;
                        children?: {
                            owner: {
                                email: string;
                                name: string;
                                id: number;
                                eventTypeSlugs: string[];
                            };
                            hidden: boolean;
                        }[] | undefined;
                        schedule?: number | null | undefined;
                        timeZone?: string | null | undefined;
                        userId?: number | null | undefined;
                        metadata?: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        } | null | undefined;
                        position?: number | undefined;
                        slug?: string | undefined;
                        locations?: {
                            type: string;
                            address?: string | undefined;
                            link?: string | undefined;
                            displayLocationPublicly?: boolean | undefined;
                            hostPhoneNumber?: string | undefined;
                            credentialId?: number | undefined;
                            teamName?: string | undefined;
                        }[] | undefined;
                        offsetStart?: number | undefined;
                        profileId?: number | null | undefined;
                        teamId?: number | null | undefined;
                        eventName?: string | null | undefined;
                        parentId?: number | null | undefined;
                        bookingFields?: {
                            name: string;
                            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                            options?: {
                                label: string;
                                value: string;
                            }[] | undefined;
                            required?: boolean | undefined;
                            label?: string | undefined;
                            placeholder?: string | undefined;
                            defaultLabel?: string | undefined;
                            defaultPlaceholder?: string | undefined;
                            labelAsSafeHtml?: string | undefined;
                            getOptionsAt?: string | undefined;
                            optionsInputs?: Record<string, {
                                type: "text" | "address" | "phone";
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                            }> | undefined;
                            variant?: string | undefined;
                            variantsConfig?: {
                                variants: Record<string, {
                                    fields: {
                                        name: string;
                                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                        required?: boolean | undefined;
                                        label?: string | undefined;
                                        placeholder?: string | undefined;
                                        labelAsSafeHtml?: string | undefined;
                                    }[];
                                }>;
                            } | undefined;
                            views?: {
                                label: string;
                                id: string;
                                description?: string | undefined;
                            }[] | undefined;
                            hideWhenJustOneOption?: boolean | undefined;
                            hidden?: boolean | undefined;
                            editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                            sources?: {
                                label: string;
                                type: string;
                                id: string;
                                editUrl?: string | undefined;
                                fieldRequired?: boolean | undefined;
                            }[] | undefined;
                        }[] | undefined;
                        periodType?: "UNLIMITED" | "ROLLING" | "ROLLING_WINDOW" | "RANGE" | undefined;
                        periodStartDate?: Date | null | undefined;
                        periodEndDate?: Date | null | undefined;
                        periodDays?: number | null | undefined;
                        periodCountCalendarDays?: boolean | null | undefined;
                        lockTimeZoneToggleOnBookingPage?: boolean | undefined;
                        requiresConfirmation?: boolean | undefined;
                        requiresBookerEmailVerification?: boolean | undefined;
                        recurringEvent?: {
                            interval: number;
                            count: number;
                            freq: import('../../../prisma/zod-utils').Frequency;
                            dtstart?: Date | undefined;
                            until?: Date | undefined;
                            tzid?: string | undefined;
                        } | null | undefined;
                        disableGuests?: boolean | undefined;
                        hideCalendarNotes?: boolean | undefined;
                        minimumBookingNotice?: number | undefined;
                        beforeEventBuffer?: number | undefined;
                        afterEventBuffer?: number | undefined;
                        seatsPerTimeSlot?: number | null | undefined;
                        onlyShowFirstAvailableSlot?: boolean | undefined;
                        seatsShowAttendees?: boolean | null | undefined;
                        seatsShowAvailabilityCount?: boolean | null | undefined;
                        schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                        scheduleId?: number | null | undefined;
                        slotInterval?: number | null | undefined;
                        successRedirectUrl?: string | null | undefined;
                        forwardParamsSuccessRedirect?: boolean | null | undefined;
                        bookingLimits?: {
                            PER_DAY?: number | undefined;
                            PER_WEEK?: number | undefined;
                            PER_MONTH?: number | undefined;
                            PER_YEAR?: number | undefined;
                        } | null | undefined;
                        durationLimits?: {
                            PER_DAY?: number | undefined;
                            PER_WEEK?: number | undefined;
                            PER_MONTH?: number | undefined;
                            PER_YEAR?: number | undefined;
                        } | null | undefined;
                        isInstantEvent?: boolean | undefined;
                        assignAllTeamMembers?: boolean | undefined;
                        useEventTypeDestinationCalendarEmail?: boolean | undefined;
                        secondaryEmailId?: number | null | undefined;
                        hashedLink?: string | undefined;
                        destinationCalendar?: {
                            externalId: string;
                            integration: string;
                        } | null | undefined;
                        customInputs?: {
                            required: boolean;
                            label: string;
                            placeholder: string;
                            type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                            id: number;
                            eventTypeId: number;
                            options?: {
                                label: string;
                                type: string;
                            }[] | null | undefined;
                            hasToBeCreated?: boolean | undefined;
                        }[] | undefined;
                        aiPhoneCallConfig?: {
                            enabled: boolean;
                            generalPrompt: string;
                            beginMessage: string | null;
                            yourPhoneNumber?: string | undefined;
                            numberToCall?: string | undefined;
                            guestName?: string | undefined;
                            guestEmail?: string | null | undefined;
                            guestCompany?: string | null | undefined;
                        } | undefined;
                        calAiPhoneScript?: string | undefined;
                    };
                    output: {
                        eventType: {
                            title: string;
                            team: {
                                members: {
                                    role: import('../../../prisma-client').$Enums.MembershipRole;
                                    user: {
                                        email: string;
                                        name: string | null;
                                        id: number;
                                        eventTypes: {
                                            slug: string;
                                        }[];
                                    };
                                    accepted: boolean;
                                }[];
                                name: string;
                                id: number;
                                parent: {
                                    slug: string | null;
                                } | null;
                                slug: string | null;
                                parentId: number | null;
                            } | null;
                            workflows: {
                                workflowId: number;
                            }[];
                            children: {
                                userId: number | null;
                            }[];
                            aiPhoneCallConfig: {
                                enabled: boolean;
                                generalPrompt: string;
                                beginMessage: string | null;
                                llmId: string | null;
                            } | null;
                        };
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        users?: number[] | undefined;
                    };
                    output: {
                        id: number;
                    };
                }>;
                duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        users?: number[] | undefined;
                        title: string;
                        description: string;
                        length: number;
                        slug: string;
                    };
                    output: {
                        eventType: {
                            price: number;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            length: number;
                            currency: string;
                            id: number;
                            timeZone: string | null;
                            userId: number | null;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            position: number;
                            slug: string;
                            locations: import('../../../prisma-client').Prisma.JsonValue;
                            offsetStart: number;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                            periodType: import('../../../prisma-client').$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                            durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                            isInstantEvent: boolean;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            secondaryEmailId: number | null;
                        };
                    };
                }>;
                bulkEventFetch: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        eventTypes: {
                            logo: string | undefined;
                            title: string;
                            id: number;
                            locations: import('../../../prisma-client').Prisma.JsonValue;
                        }[];
                    };
                }>;
                bulkUpdateToDefaultLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeIds: number[];
                    };
                    output: import('../../../prisma-client/runtime/library').GetBatchResult;
                }>;
            }>;
            availability: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        schedules: {
                            isDefault: boolean;
                            name: string;
                            availability: {
                                days: number[];
                                date: Date | null;
                                id: number;
                                startTime: Date;
                                endTime: Date;
                                eventTypeId: number | null;
                                userId: number | null;
                                scheduleId: number | null;
                            }[];
                            id: number;
                            timeZone: string | null;
                        }[];
                    };
                }>;
                user: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        username: string;
                        dateFrom: string;
                        dateTo: string;
                        eventTypeId?: string | number | undefined;
                        withSource?: boolean | undefined;
                    };
                    output: {
                        busy: import("@calcom/types/Calendar").EventBusyDetails[];
                        timeZone: string;
                        dateRanges: import('../../../lib/date-ranges').DateRange[];
                        oooExcludedDateRanges: import('../../../lib/date-ranges').DateRange[];
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        dateOverrides: import("@calcom/types/schedule").TimeRange[];
                        currentSeats: {
                            uid: string;
                            startTime: Date;
                            _count: {
                                attendees: number;
                            };
                        }[] | null;
                        datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                    };
                }>;
                listTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        limit: number;
                        loggedInUsersTz: string;
                        startDate: string;
                        endDate: string;
                        cursor?: number | null | undefined;
                        teamId?: number | undefined;
                    };
                    output: {
                        rows: ({
                            id: number;
                            organizationId: number | null;
                            name: string | null;
                            username: string | null;
                            email: string;
                            timeZone: string;
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            defaultScheduleId: number;
                            dateRanges: import('../../../lib/date-ranges').DateRange[];
                            avatarUrl?: undefined;
                            profile?: undefined;
                        } | {
                            id: number;
                            username: string | null;
                            email: string;
                            avatarUrl: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                            organizationId: number | null;
                            name: string | null;
                            timeZone: string;
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            defaultScheduleId: number;
                            dateRanges: import('../../../lib/date-ranges').DateRange[];
                        })[];
                        nextCursor: number | undefined;
                        meta: {
                            totalRowCount: number;
                        };
                    };
                }>;
                schedule: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                    ctx: import("../createContext").InnerContext;
                    meta: object;
                    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T = unknown>(string: string) => T;
                        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>, {
                    get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: {
                            scheduleId?: number | undefined;
                            isManagedEventType?: boolean | undefined;
                        };
                        output: import('../../../lib').ScheduleWithAvailabilitiesForWeb;
                    }>;
                    create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            name: string;
                            schedule?: {
                                start: Date;
                                end: Date;
                            }[][] | undefined;
                            eventTypeId?: number | undefined;
                        };
                        output: {
                            schedule: {
                                name: string;
                                id: number;
                                timeZone: string | null;
                                userId: number;
                            };
                        };
                    }>;
                    delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            scheduleId: number;
                        };
                        output: void;
                    }>;
                    update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            scheduleId: number;
                            timeZone?: string | undefined;
                            name?: string | undefined;
                            isDefault?: boolean | undefined;
                            schedule?: {
                                start: Date;
                                end: Date;
                            }[][] | undefined;
                            dateOverrides?: {
                                start: Date;
                                end: Date;
                            }[] | undefined;
                        };
                        output: {
                            schedule: {
                                name: string;
                                id: number;
                                userId: number;
                            };
                            isDefault: boolean;
                            availability?: undefined;
                            timeZone?: undefined;
                            prevDefaultId?: undefined;
                            currentDefaultId?: undefined;
                        } | {
                            schedule: {
                                name: string;
                                availability: {
                                    days: number[];
                                    date: Date | null;
                                    id: number;
                                    startTime: Date;
                                    endTime: Date;
                                    eventTypeId: number | null;
                                    userId: number | null;
                                    scheduleId: number | null;
                                }[];
                                eventType: {
                                    id: number;
                                    eventName: string | null;
                                }[];
                                id: number;
                                timeZone: string | null;
                                userId: number;
                            };
                            availability: import("@calcom/types/schedule").Schedule;
                            timeZone: string;
                            isDefault: boolean;
                            prevDefaultId: number | null;
                            currentDefaultId: number | null;
                        };
                    }>;
                    duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            scheduleId: number;
                        };
                        output: {
                            schedule: {
                                name: string;
                                id: number;
                                timeZone: string | null;
                                userId: number;
                            };
                        };
                    }>;
                    getScheduleByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: {
                            userId?: number | undefined;
                        };
                        output: {
                            hasDefaultSchedule: boolean;
                            name: string;
                            id: number;
                            isManaged: boolean;
                            workingHours: import("@calcom/types/schedule").WorkingHours[];
                            schedule: {
                                id: number;
                                userId: number | null;
                                eventTypeId: number | null;
                                days: number[];
                                startTime: Date;
                                endTime: Date;
                                date: Date | null;
                                scheduleId: number | null;
                            }[];
                            availability: {
                                end: Date;
                                userId?: number | null | undefined;
                                start: Date;
                            }[][];
                            timeZone: string;
                            dateOverrides: {
                                ranges: import("@calcom/types/schedule").TimeRange[];
                            }[];
                            isDefault: boolean;
                            isLastSchedule: boolean;
                            readOnly: boolean;
                        } | {
                            id: number;
                            name: string;
                            availability: never[][];
                            dateOverrides: never[];
                            timeZone: string;
                            workingHours: never[];
                            isDefault: boolean;
                            hasDefaultSchedule: boolean;
                        };
                    }>;
                    getScheduleByEventSlug: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: {
                            eventSlug: string;
                        };
                        output: import('../../../lib').ScheduleWithAvailabilitiesForWeb | {
                            id: number;
                            name: string;
                            availability: never[][];
                            dateOverrides: never[];
                            timeZone: string;
                            workingHours: never[];
                            isDefault: boolean;
                        };
                    }>;
                    bulkUpdateToDefaultAvailability: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            eventTypeIds: number[];
                        };
                        output: import('../../../prisma-client/runtime/library').GetBatchResult;
                    }>;
                }>;
                calendarOverlay: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        loggedInUsersTz: string;
                        dateFrom: string | null;
                        dateTo: string | null;
                        calendarsToLoad: {
                            credentialId: number;
                            externalId: string;
                        }[];
                    };
                    output: import("@calcom/types/Calendar").EventBusyDate[];
                }>;
            }>;
            teams: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number;
                        isOrg?: boolean | undefined;
                    };
                    output: {
                        members: {
                            username: string | null;
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                            organizationId: number | null;
                            organization: any;
                            accepted: boolean;
                            disableImpersonation: boolean;
                            subteams: (string | null)[] | null;
                            bookerUrl: string;
                            connectedApps: {
                                name: any;
                                logo: any;
                                app: {
                                    categories: import('../../../prisma-client').$Enums.AppCategories[];
                                    slug: string;
                                } | null;
                                externalId: string | null;
                            }[] | null;
                            email: string;
                            name: string | null;
                            teams: {
                                team: {
                                    id: number;
                                    slug: string | null;
                                };
                            }[];
                            bio: string | null;
                            id: number;
                            avatarUrl: string | null;
                            nonProfileUsername: string | null;
                        }[];
                        safeBio: string;
                        membership: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            accepted: boolean;
                        };
                        inviteToken: {
                            expires: Date;
                            identifier: string;
                            token: string;
                            expiresInDays: number | null;
                        } | undefined;
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        };
                        eventTypes: {
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {} | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {} | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {} | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {} | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {} | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        price?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        profile?: true | undefined;
                                        owner?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        hidden?: true | undefined;
                                        team?: true | undefined;
                                        availability?: true | undefined;
                                        length?: true | undefined;
                                        workflows?: true | undefined;
                                        users?: true | undefined;
                                        hosts?: true | undefined;
                                        currency?: true | undefined;
                                        children?: true | undefined;
                                        schedule?: true | undefined;
                                        timeZone?: true | undefined;
                                        userId?: true | undefined;
                                        metadata?: true | undefined;
                                        position?: true | undefined;
                                        parent?: true | undefined;
                                        slug?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hashedLink?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        customInputs?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                    defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                } | null | undefined;
                            } | null;
                            users: ({
                                username: string | null;
                                email: string;
                                name: string | null;
                                teams: {
                                    team: {
                                        id: number;
                                        slug: string | null;
                                    };
                                }[];
                                bio: string | null;
                                id: number;
                                avatarUrl: string | null;
                                credentials: {
                                    app: {
                                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                                        slug: string;
                                    } | null;
                                    destinationCalendars: {
                                        externalId: string;
                                    }[];
                                }[];
                            } & {
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            })[];
                            price: number;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            length: number;
                            hosts: {
                                user: {
                                    username: string | null;
                                    email: string;
                                    name: string | null;
                                    teams: {
                                        team: {
                                            id: number;
                                            slug: string | null;
                                        };
                                    }[];
                                    bio: string | null;
                                    id: number;
                                    avatarUrl: string | null;
                                    credentials: {
                                        app: {
                                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                                            slug: string;
                                        } | null;
                                        destinationCalendars: {
                                            externalId: string;
                                        }[];
                                    }[];
                                };
                            }[];
                            currency: string;
                            id: number;
                            slug: string;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                        }[] | null;
                        logo?: string | undefined;
                        name: string;
                        bio: string | null;
                        theme: string | null;
                        children: {
                            name: string;
                            slug: string | null;
                        }[];
                        id: number;
                        parent: {
                            name: string;
                            id: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            logoUrl: string | null;
                            isPrivate: boolean;
                            isOrganization: boolean;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        isOrganization: boolean;
                    };
                }>;
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        includeOrgs?: boolean | undefined;
                    } | undefined;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        inviteToken: {
                            expires: Date;
                            identifier: string;
                            id: number;
                            teamId: number | null;
                            secondaryEmailId: number | null;
                            token: string;
                            createdAt: Date;
                            updatedAt: Date;
                            expiresInDays: number | null;
                        } | undefined;
                        name: string;
                        id: number;
                        parent: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        isOrganization: boolean;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        accepted: boolean;
                    }[];
                }>;
                listOwnedTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        inviteToken: {
                            expires: Date;
                            identifier: string;
                            id: number;
                            teamId: number | null;
                            secondaryEmailId: number | null;
                            token: string;
                            createdAt: Date;
                            updatedAt: Date;
                            expiresInDays: number | null;
                        } | undefined;
                        name: string;
                        id: number;
                        parent: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        isOrganization: boolean;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        accepted: boolean;
                    }[];
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        slug: string;
                        logo?: string | null | undefined;
                    };
                    output: {
                        url: string;
                        message: string;
                        team: null;
                    } | {
                        url: string;
                        message: string;
                        team: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        bio?: string | undefined;
                        name?: string | undefined;
                        logo?: string | null | undefined;
                        slug?: string | undefined;
                        hideBranding?: boolean | undefined;
                        hideBookATeamMember?: boolean | undefined;
                        isPrivate?: boolean | undefined;
                        brandColor?: string | undefined;
                        darkBrandColor?: string | undefined;
                        theme?: string | null | undefined;
                    };
                    output: {
                        logoUrl: string | null;
                        name: string;
                        bio: string | null;
                        slug: string | null;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                    } | undefined;
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                    };
                    output: void;
                }>;
                removeMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                        memberId: number;
                        isOrg?: boolean | undefined;
                    };
                    output: void;
                }>;
                inviteMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        role: "ADMIN" | "MEMBER" | "OWNER";
                        language: string;
                        teamId: number;
                        usernameOrEmail: (string | string[]) & (string | string[] | undefined);
                        isOrg?: boolean | undefined;
                    };
                    output: {
                        role: "ADMIN" | "MEMBER" | "OWNER";
                        language: string;
                        teamId: number;
                        isOrg: boolean;
                        usernameOrEmail: (string | string[]) & (string | string[] | undefined);
                    };
                }>;
                acceptOrLeave: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        accept: boolean;
                        teamId: number;
                    };
                    output: void;
                }>;
                changeMemberRole: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        role: "ADMIN" | "MEMBER" | "OWNER";
                        teamId: number;
                        memberId: number;
                    };
                    output: void;
                }>;
                getMemberAvailability: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        timezone: string;
                        dateFrom: string;
                        dateTo: string;
                        teamId: number;
                        memberId: number;
                    };
                    output: {
                        busy: import("@calcom/types/Calendar").EventBusyDetails[];
                        timeZone: string;
                        dateRanges: import('../../../lib/date-ranges').DateRange[];
                        oooExcludedDateRanges: import('../../../lib/date-ranges').DateRange[];
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        dateOverrides: import("@calcom/types/schedule").TimeRange[];
                        currentSeats: {
                            uid: string;
                            startTime: Date;
                            _count: {
                                attendees: number;
                            };
                        }[] | null;
                        datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                    };
                }>;
                getMembershipbyUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number;
                        memberId: number;
                    };
                    output: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    } | null;
                }>;
                updateMembership: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                        disableImpersonation: boolean;
                        memberId: number;
                    };
                    output: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    };
                }>;
                publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                    };
                    output: {
                        url: string;
                        message: string;
                    };
                }>;
                getUpgradeable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: ({
                        team: {
                            children: {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            }[];
                        } & {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                }>;
                listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamIds?: number[] | undefined;
                    };
                    output: ({
                        username: string | null;
                        name: string | null;
                        id: number;
                    } & {
                        accepted: boolean;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    })[];
                }>;
                hasTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        hasTeamPlan: boolean;
                    };
                }>;
                listInvites: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                }>;
                createInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                        token?: string | undefined;
                    };
                    output: {
                        token: string;
                        inviteLink: string;
                    };
                }>;
                setInviteExpiration: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        token: string;
                        expiresInDays?: number | undefined;
                    };
                    output: void;
                }>;
                deleteInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        token: string;
                    };
                    output: void;
                }>;
                inviteMemberByToken: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        token: string;
                    };
                    output: string;
                }>;
                hasEditPermissionForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        memberId: number;
                    };
                    output: boolean;
                }>;
                resendInvitation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        language: string;
                        teamId: number;
                        isOrg?: boolean | undefined;
                    };
                    output: {
                        email: string;
                        language: string;
                        teamId: number;
                        isOrg: boolean;
                    };
                }>;
            }>;
            timezones: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                cityTimezones: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        city: string;
                        timezone: string;
                        pop: number;
                    }[];
                }>;
            }>;
            organizations: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        slug: string;
                        orgOwnerEmail: string;
                        language?: string | undefined;
                        seats?: number | undefined;
                        pricePerSeat?: number | undefined;
                        isPlatform?: boolean | undefined;
                    };
                    output: {
                        userId: number;
                        email: string;
                        organizationId: number;
                        upId: string;
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name?: string | undefined;
                        orgId?: string | number | undefined;
                        bio?: string | undefined;
                        logoUrl?: string | null | undefined;
                        calVideoLogo?: string | null | undefined;
                        banner?: string | null | undefined;
                        slug?: string | undefined;
                        hideBranding?: boolean | undefined;
                        hideBookATeamMember?: boolean | undefined;
                        brandColor?: string | undefined;
                        darkBrandColor?: string | undefined;
                        theme?: string | null | undefined;
                        timeZone?: string | undefined;
                        weekStart?: string | undefined;
                        timeFormat?: number | undefined;
                        metadata?: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | undefined;
                        lockEventTypeCreation?: boolean | undefined;
                        lockEventTypeCreationOptions?: "DELETE" | "HIDE" | undefined;
                        adminGetsNoSlotsNotification?: boolean | undefined;
                    };
                    output: {
                        update: boolean;
                        userId: number;
                        data: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    };
                }>;
                verifyCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        code: string;
                    };
                    output: true;
                }>;
                createTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        orgId: number;
                        teamNames: string[];
                        moveTeams: {
                            id: number;
                            newSlug: string | null;
                            shouldMove: boolean;
                        }[];
                    };
                    output: {
                        duplicatedSlugs: string[];
                    };
                }>;
                listCurrent: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        canAdminImpersonate: boolean;
                        organizationSettings: {
                            lockEventTypeCreationForUsers: boolean | undefined;
                            adminGetsNoSlotsNotification: boolean | undefined;
                        };
                        user: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            accepted: boolean;
                        };
                    };
                }>;
                checkIfOrgNeedsUpgrade: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: ({
                        team: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                }>;
                publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: {
                        url: string;
                        message: string;
                    };
                }>;
                setPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        newPassword: string;
                    };
                    output: {
                        update: boolean;
                    };
                }>;
                getMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamIdToExclude?: number | undefined;
                        accepted?: boolean | undefined;
                        distinctUser?: boolean | undefined;
                    };
                    output: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        user: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            completedOnboarding: boolean;
                        };
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                }>;
                listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        limit: number;
                        cursor?: number | null | undefined;
                        searchTerm?: string | undefined;
                    };
                    output: {
                        canUserGetMembers: boolean;
                        rows: never[];
                        meta: {
                            totalRowCount: number;
                        };
                        nextCursor?: undefined;
                    } | {
                        rows: {
                            id: number;
                            username: string | null;
                            email: string;
                            timeZone: string;
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            accepted: boolean;
                            disableImpersonation: boolean;
                            completedOnboarding: boolean;
                            avatarUrl: string | null;
                            teams: ({
                                id: number;
                                name: string;
                                slug: string | null;
                            } | undefined)[];
                        }[];
                        nextCursor: number | undefined;
                        meta: {
                            totalRowCount: number;
                        };
                        canUserGetMembers?: undefined;
                    };
                }>;
                getBrand: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        slug: string;
                        fullDomain: string;
                        domainSuffix: string;
                        name: string;
                        logoUrl: string | null;
                    } | null;
                }>;
                getUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        userId?: number | undefined;
                    };
                    output: {
                        teams: {
                            accepted: boolean;
                            name: string;
                            id: number;
                        }[];
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        username: string | null;
                        email: string;
                        name: string | null;
                        bio: string | null;
                        schedules: {
                            name: string;
                            id: number;
                        }[];
                        id: number;
                        timeZone: string;
                    };
                }>;
                updateUser: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        role: "ADMIN" | "MEMBER" | "OWNER";
                        timeZone: string;
                        userId: number;
                        username?: string | undefined;
                        bio?: string | undefined;
                        name?: string | undefined;
                        email?: string | undefined;
                        avatar?: string | undefined;
                    };
                    output: {
                        success: boolean;
                    };
                }>;
                getTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        name: string;
                        id: number;
                    }[];
                }>;
                bulkAddToTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userIds: number[];
                        teamIds: number[];
                    };
                    output: {
                        success: boolean;
                        invitedTotalUsers: number;
                    };
                }>;
                bulkDeleteUsers: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userIds: number[];
                    };
                    output: {
                        success: boolean;
                        usersDeleted: number;
                    };
                }>;
                listOtherTeamMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        limit: number;
                        teamId: number;
                        query?: string | undefined;
                        offset?: number | undefined;
                        cursor?: number | null | undefined;
                    };
                    output: {
                        rows: {
                            bookerUrl: string;
                            user: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                avatarUrl: string | null;
                            } & {
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            };
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                        nextCursor: number | null | undefined;
                    };
                }>;
                getOtherTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number;
                    };
                    output: {
                        safeBio: string;
                        name: string;
                        bio: string | null;
                        id: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        parent: {
                            id: number;
                            slug: string | null;
                        } | null;
                        slug: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                    };
                }>;
                listOtherTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    }[];
                }>;
                deleteTeam: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                    };
                    output: void;
                }>;
                adminGetAll: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        members: {
                            user: {
                                email: string;
                                name: string | null;
                                id: number;
                            };
                        }[];
                        name: string;
                        id: number;
                        slug: string | null;
                        organizationSettings: {
                            id: number;
                            isOrganizationVerified: boolean;
                            isOrganizationConfigured: boolean;
                            isAdminReviewed: boolean;
                            orgAutoAcceptEmail: string;
                            organizationId: number;
                            lockEventTypeCreationForUsers: boolean;
                            adminGetsNoSlotsNotification: boolean;
                        } | null;
                    }[];
                }>;
                adminGet: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id: number;
                    };
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        members: {
                            user: {
                                email: string;
                                name: string | null;
                                id: number;
                            };
                        }[];
                        name: string;
                        id: number;
                        slug: string | null;
                        isOrganization: boolean;
                        organizationSettings: {
                            isOrganizationVerified: boolean;
                            isOrganizationConfigured: boolean;
                            orgAutoAcceptEmail: string;
                        } | null;
                    };
                }>;
                adminUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        name?: string | undefined;
                        slug?: string | null | undefined;
                        organizationSettings?: {
                            isOrganizationVerified?: boolean | undefined;
                            isOrganizationConfigured?: boolean | undefined;
                            isAdminReviewed?: boolean | undefined;
                            orgAutoAcceptEmail?: string | undefined;
                        } | undefined;
                    };
                    output: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    };
                }>;
                adminVerify: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        orgId: number;
                    };
                    output: {
                        ok: boolean;
                        message: string;
                    };
                }>;
                adminDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        orgId: number;
                    };
                    output: {
                        ok: boolean;
                        message: string;
                    };
                }>;
                createPhoneCall: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeId: number;
                        yourPhoneNumber: string;
                        numberToCall: string;
                        guestName: string;
                        generalPrompt: string;
                        beginMessage: string | null;
                        calApiKey: string;
                        guestEmail?: string | null | undefined;
                        guestCompany?: string | null | undefined;
                    };
                    output: import("zod").objectOutputType<{
                        call_id: import("zod").ZodString;
                        agent_id: import("zod").ZodString;
                    }, import("zod").ZodTypeAny, "passthrough">;
                }>;
            }>;
            webhook: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        appId?: string | undefined;
                        eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING")[] | undefined;
                    } | undefined;
                    output: {
                        active: boolean;
                        secret: string | null;
                        id: string;
                        eventTypeId: number | null;
                        userId: number | null;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                        platform: boolean;
                    }[];
                }>;
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        webhookId?: string | undefined;
                    };
                    output: {
                        active: boolean;
                        secret: string | null;
                        id: string;
                        userId: number | null;
                        teamId: number | null;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                        platform: boolean;
                    };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        active: boolean;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        eventTriggers: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING")[];
                        appId?: string | null | undefined;
                        secret?: string | null | undefined;
                        platform?: boolean | undefined;
                    };
                    output: {
                        id: string;
                        userId: number | null;
                        teamId: number | null;
                        eventTypeId: number | null;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        createdAt: Date;
                        active: boolean;
                        eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                        appId: string | null;
                        secret: string | null;
                        platform: boolean;
                    };
                }>;
                edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        payloadTemplate: string | null;
                        subscriberUrl?: string | undefined;
                        eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING")[] | undefined;
                        active?: boolean | undefined;
                        appId?: string | null | undefined;
                        secret?: string | null | undefined;
                    };
                    output: {
                        active: boolean;
                        secret: string | null;
                        id: string;
                        eventTypeId: number | null;
                        userId: number | null;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                        platform: boolean;
                    } | null;
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                    };
                    output: {
                        id: string;
                    };
                }>;
                testTrigger: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        url: string;
                        type: string;
                        secret?: string | undefined;
                        payloadTemplate?: string | null | undefined;
                    };
                    output: {
                        message?: string | undefined;
                        ok: boolean;
                        status: number;
                    };
                }>;
                getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                    } | undefined;
                    output: {
                        webhookGroups: {
                            teamId?: number | null | undefined;
                            profile: {
                                slug: string | null;
                                name: string | null;
                                image?: string | undefined;
                            };
                            metadata?: {
                                readOnly: boolean;
                            } | undefined;
                            webhooks: {
                                id: string;
                                userId: number | null;
                                teamId: number | null;
                                eventTypeId: number | null;
                                subscriberUrl: string;
                                payloadTemplate: string | null;
                                createdAt: Date;
                                active: boolean;
                                eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                                appId: string | null;
                                secret: string | null;
                                platform: boolean;
                            }[];
                        }[];
                        profiles: {
                            readOnly?: boolean | undefined;
                            slug: string | null;
                            name: string | null;
                            image?: string | undefined;
                            teamId: number | null | undefined;
                        }[];
                    };
                }>;
            }>;
            apiKeys: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        id: string;
                        userId: number;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        note: string | null;
                        expiresAt: Date | null;
                        lastUsedAt: Date | null;
                        hashedKey: string;
                    }[];
                }>;
                findKeyOfType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        appId?: string | undefined;
                        teamId?: number | undefined;
                    };
                    output: {
                        id: string;
                        userId: number;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        note: string | null;
                        expiresAt: Date | null;
                        lastUsedAt: Date | null;
                        hashedKey: string;
                    }[];
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        note?: string | null | undefined;
                        expiresAt?: Date | null | undefined;
                        neverExpires?: boolean | undefined;
                        appId?: string | null | undefined;
                        teamId?: number | undefined;
                    };
                    output: string;
                }>;
                edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                        note?: string | null | undefined;
                        expiresAt?: Date | undefined;
                    };
                    output: {
                        id: string;
                        userId: number;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        note: string | null;
                        expiresAt: Date | null;
                        lastUsedAt: Date | null;
                        hashedKey: string;
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                        eventTypeId?: number | undefined;
                    };
                    output: {
                        id: string;
                    };
                }>;
            }>;
            slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startTime: string;
                        endTime: string;
                        eventTypeId?: number | undefined;
                        eventTypeSlug?: string | undefined;
                        timeZone?: string | undefined;
                        usernameList?: string[] | undefined;
                        debug?: boolean | undefined;
                        duration?: string | undefined;
                        rescheduleUid?: string | null | undefined;
                        isTeamEvent?: boolean | undefined;
                        orgSlug?: string | undefined;
                    };
                    output: import("./viewer/slots/util").IGetAvailableSlots;
                }>;
                reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeId: number;
                        slotUtcStartDate: string;
                        slotUtcEndDate: string;
                        bookingUid?: string | undefined;
                    };
                    output: {
                        uid: string;
                    };
                }>;
                removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        uid: string | null;
                    };
                    output: void;
                }>;
            }>;
            workflows: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | undefined;
                        userId?: number | undefined;
                    } | undefined;
                    output: {
                        workflows: import('../../../features/ee/workflows/components/WorkflowListPage').WorkflowType[];
                    };
                }>;
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id: number;
                    };
                    output: {
                        name: string;
                        team: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                id: number;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            slug: string | null;
                        } | null;
                        trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                        id: number;
                        userId: number | null;
                        time: number | null;
                        teamId: number | null;
                        timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                        activeOn: {
                            eventType: {
                                price: number;
                                title: string;
                                description: string | null;
                                hidden: boolean;
                                length: number;
                                currency: string;
                                id: number;
                                timeZone: string | null;
                                userId: number | null;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                position: number;
                                slug: string;
                                locations: import('../../../prisma-client').Prisma.JsonValue;
                                offsetStart: number;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                periodType: import('../../../prisma-client').$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                forwardParamsSuccessRedirect: boolean | null;
                                bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                isInstantEvent: boolean;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                secondaryEmailId: number | null;
                            };
                        }[];
                        steps: {
                            action: import('../../../prisma-client').$Enums.WorkflowActions;
                            id: number;
                            template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                            stepNumber: number;
                            workflowId: number;
                            sendTo: string | null;
                            reminderBody: string | null;
                            emailSubject: string | null;
                            numberRequired: boolean | null;
                            sender: string | null;
                            numberVerificationPending: boolean;
                            includeCalendarEvent: boolean;
                        }[];
                    } | null;
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId?: number | undefined;
                    };
                    output: {
                        workflow: {
                            id: number;
                            position: number;
                            name: string;
                            userId: number | null;
                            teamId: number | null;
                            trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                            time: number | null;
                            timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                        };
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                    };
                    output: {
                        id: number;
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        trigger: "BEFORE_EVENT" | "EVENT_CANCELLED" | "NEW_EVENT" | "AFTER_EVENT" | "RESCHEDULE_EVENT";
                        id: number;
                        time: number | null;
                        timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
                        activeOn: number[];
                        steps: {
                            action: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                            id: number;
                            template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                            stepNumber: number;
                            workflowId: number;
                            numberRequired: boolean | null;
                            includeCalendarEvent: boolean;
                            sendTo?: string | null | undefined;
                            reminderBody?: string | null | undefined;
                            emailSubject?: string | null | undefined;
                            sender?: string | null | undefined;
                            senderName?: string | null | undefined;
                        }[];
                    };
                    output: {
                        workflow: ({
                            team: {
                                members: {
                                    role: import('../../../prisma-client').$Enums.MembershipRole;
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                                name: string;
                                id: number;
                                slug: string | null;
                            } | null;
                            activeOn: {
                                eventType: {
                                    price: number;
                                    title: string;
                                    description: string | null;
                                    hidden: boolean;
                                    length: number;
                                    currency: string;
                                    id: number;
                                    timeZone: string | null;
                                    userId: number | null;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    position: number;
                                    slug: string;
                                    locations: import('../../../prisma-client').Prisma.JsonValue;
                                    offsetStart: number;
                                    profileId: number | null;
                                    teamId: number | null;
                                    eventName: string | null;
                                    parentId: number | null;
                                    bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                    periodType: import('../../../prisma-client').$Enums.PeriodType;
                                    periodStartDate: Date | null;
                                    periodEndDate: Date | null;
                                    periodDays: number | null;
                                    periodCountCalendarDays: boolean | null;
                                    lockTimeZoneToggleOnBookingPage: boolean;
                                    requiresConfirmation: boolean;
                                    requiresBookerEmailVerification: boolean;
                                    recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                    disableGuests: boolean;
                                    hideCalendarNotes: boolean;
                                    minimumBookingNotice: number;
                                    beforeEventBuffer: number;
                                    afterEventBuffer: number;
                                    seatsPerTimeSlot: number | null;
                                    onlyShowFirstAvailableSlot: boolean;
                                    seatsShowAttendees: boolean | null;
                                    seatsShowAvailabilityCount: boolean | null;
                                    schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                    scheduleId: number | null;
                                    slotInterval: number | null;
                                    successRedirectUrl: string | null;
                                    forwardParamsSuccessRedirect: boolean | null;
                                    bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                    durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                    isInstantEvent: boolean;
                                    assignAllTeamMembers: boolean;
                                    useEventTypeDestinationCalendarEmail: boolean;
                                    secondaryEmailId: number | null;
                                };
                            }[];
                            steps: {
                                action: import('../../../prisma-client').$Enums.WorkflowActions;
                                id: number;
                                template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                                stepNumber: number;
                                workflowId: number;
                                sendTo: string | null;
                                reminderBody: string | null;
                                emailSubject: string | null;
                                numberRequired: boolean | null;
                                sender: string | null;
                                numberVerificationPending: boolean;
                                includeCalendarEvent: boolean;
                            }[];
                        } & {
                            name: string;
                            trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                            id: number;
                            userId: number | null;
                            time: number | null;
                            position: number;
                            teamId: number | null;
                            timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                        }) | null;
                    };
                }>;
                activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeId: number;
                        workflowId: number;
                    };
                    output: void;
                }>;
                sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        phoneNumber: string;
                    };
                    output: void;
                }>;
                verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        code: string;
                        phoneNumber: string;
                        teamId?: number | undefined;
                    };
                    output: boolean;
                }>;
                getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | undefined;
                    };
                    output: {
                        id: number;
                        userId: number | null;
                        teamId: number | null;
                        phoneNumber: string;
                    }[];
                }>;
                getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | undefined;
                    };
                    output: {
                        id: number;
                        userId: number | null;
                        teamId: number | null;
                        email: string;
                    }[];
                }>;
                verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        code: string;
                        teamId?: number | undefined;
                    };
                    output: true;
                }>;
                getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        label: string;
                        value: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                        needsTeamsUpgrade: boolean;
                    }[];
                }>;
                filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        filters?: {
                            teamIds?: number[] | undefined;
                            userIds?: number[] | undefined;
                            upIds?: string[] | undefined;
                        } | undefined;
                    } | null | undefined;
                    output: {
                        filtered: import('../../../features/ee/workflows/components/WorkflowListPage').WorkflowType[];
                        totalCount: number;
                    } | undefined;
                }>;
            }>;
            saml: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number | null;
                    };
                    output: import('../../../features/ee/sso/lib/saml').SSOConnection | null;
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number | null;
                        encodedRawMetadata: string;
                    };
                    output: import("@boxyhq/saml-jackson").SAMLSSORecord;
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number | null;
                    };
                    output: void;
                }>;
                updateOIDC: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        clientId: string;
                        teamId: number | null;
                        clientSecret: string;
                        wellKnownUrl: string;
                    };
                    output: import("@boxyhq/saml-jackson").OIDCSSORecord;
                }>;
            }>;
            dsync: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        organizationId: number | null;
                        provider: string;
                    };
                    output: import("@boxyhq/saml-jackson").Directory;
                }>;
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        organizationId: number | null;
                    };
                    output: import("@boxyhq/saml-jackson").Directory | null;
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        organizationId: number | null;
                        directoryId: string;
                    };
                    output: null;
                }>;
                teamGroupMapping: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                    ctx: import("../createContext").InnerContext;
                    meta: object;
                    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T = unknown>(string: string) => T;
                        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>, {
                    get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: void;
                        output: {
                            teamGroupMapping: {
                                id: number;
                                name: string;
                                slug: string | null;
                                directoryId: string;
                                groupNames: string[];
                            }[];
                        };
                    }>;
                    create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            name: string;
                            teamId: number;
                            directoryId: string;
                        };
                        output: {
                            newGroupName: string;
                        };
                    }>;
                    delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            teamId: number;
                            groupName: string;
                        };
                        output: {
                            deletedGroupName: string;
                        };
                    }>;
                }>;
            }>;
            insights: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                eventsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        memberUserId?: number | undefined;
                        userId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        empty: boolean;
                        created: {
                            count: number;
                            deltaPrevious: number;
                        };
                        completed: {
                            count: number;
                            deltaPrevious: number;
                        };
                        rescheduled: {
                            count: number;
                            deltaPrevious: number;
                        };
                        cancelled: {
                            count: number;
                            deltaPrevious: number;
                        };
                        rating: {
                            count: number;
                            deltaPrevious: number;
                        };
                        no_show: {
                            count: number;
                            deltaPrevious: number;
                        };
                        csat: {
                            count: number;
                            deltaPrevious: number;
                        };
                        previousRange: {
                            startDate: string;
                            endDate: string;
                        };
                    };
                }>;
                eventsTimeline: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        timeView: "week" | "month" | "year" | "day";
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        memberUserId?: number | undefined;
                        userId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        Month: string;
                        Created: number;
                        Completed: number;
                        Rescheduled: number;
                        Cancelled: number;
                        "No-Show (Host)": number;
                    }[];
                }>;
                popularEventTypes: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        memberUserId?: number | undefined;
                        teamId?: number | null | undefined;
                        userId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: ({
                        eventTypeId?: undefined;
                        eventTypeName?: undefined;
                        count?: undefined;
                    } | {
                        eventTypeId: number | null;
                        eventTypeName: string;
                        count: number;
                    })[];
                }>;
                averageEventDuration: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        memberUserId?: number | undefined;
                        teamId?: number | null | undefined;
                        userId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        Date: string;
                        Average: number;
                    }[];
                }>;
                membersWithMostBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        count: number;
                    }[];
                }>;
                membersWithLeastBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        count: number;
                    }[];
                }>;
                teamListForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: import('../../../features/insights/server/trpc-router').IResultTeamList[];
                }>;
                userList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number | null;
                        isAll: boolean | null;
                    };
                    output: {
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    }[];
                }>;
                eventTypeList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | null | undefined;
                        userId?: number | null | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        title: string;
                        team: {
                            name: string;
                        } | null;
                        id: number;
                        slug: string;
                        teamId: number | null;
                    }[];
                }>;
                recentRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        rating: number | null;
                        feedback: string | null;
                    }[];
                }>;
                membersWithMostNoShow: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        count: number;
                    }[];
                }>;
                membersWithHighestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        averageRating: number | null;
                    }[];
                }>;
                membersWithLowestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        averageRating: number | null;
                    }[];
                }>;
                rawData: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        userId?: number | null | undefined;
                        memberUserId?: number | null | undefined;
                        isAll?: boolean | undefined;
                        eventTypeId?: number | null | undefined;
                    };
                    output: {
                        data: string;
                        filename: string;
                    };
                }>;
            }>;
            payments: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                chargeCard: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingId: number;
                    };
                    output: {
                        id: number;
                        uid: string;
                        appId: string | null;
                        bookingId: number;
                        amount: number;
                        fee: number;
                        currency: string;
                        success: boolean;
                        refunded: boolean;
                        data: import('../../../prisma-client').Prisma.JsonValue;
                        externalId: string;
                        paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
                    };
                }>;
            }>;
            appRoutingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                    ctx: import("../createContext").InnerContext;
                    meta: object;
                    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T = unknown>(string: string) => T;
                        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>, {
                    response: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            response: Record<string, {
                                label: string;
                                value: (string | number | string[]) & (string | number | string[] | undefined);
                            }>;
                            formFillerId: string;
                            formId: string;
                        };
                        output: {
                            id: number;
                            response: import('../../../prisma-client').Prisma.JsonValue;
                            createdAt: Date;
                            formFillerId: string;
                            formId: string;
                        };
                    }>;
                }>;
                forms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        filters?: {
                            teamIds?: number[] | undefined;
                            userIds?: number[] | undefined;
                            upIds?: string[] | undefined;
                        } | undefined;
                    } | null | undefined;
                    output: {
                        filtered: {
                            form: import('../../../app-store/routing-forms/types/types').SerializableForm<{
                                team: ({
                                    members: {
                                        role: import('../../../prisma-client').$Enums.MembershipRole;
                                        id: number;
                                        userId: number;
                                        teamId: number;
                                        disableImpersonation: boolean;
                                        accepted: boolean;
                                    }[];
                                } & {
                                    name: string;
                                    logo: string | null;
                                    bio: string | null;
                                    theme: string | null;
                                    id: number;
                                    timeFormat: number | null;
                                    weekStart: string;
                                    timeZone: string;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    slug: string | null;
                                    parentId: number | null;
                                    hideBranding: boolean;
                                    brandColor: string | null;
                                    darkBrandColor: string | null;
                                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                    createdAt: Date;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    appLogo: string | null;
                                    appIconLogo: string | null;
                                    isPrivate: boolean;
                                    hideBookATeamMember: boolean;
                                    bannerUrl: string | null;
                                    isOrganization: boolean;
                                    pendingPayment: boolean;
                                    isPlatform: boolean;
                                }) | null;
                                _count: {
                                    responses: number;
                                };
                            } & {
                                description: string | null;
                                name: string;
                                disabled: boolean;
                                settings: import('../../../prisma-client').Prisma.JsonValue;
                                id: string;
                                userId: number;
                                position: number;
                                routes: import('../../../prisma-client').Prisma.JsonValue;
                                fields: import('../../../prisma-client').Prisma.JsonValue;
                                teamId: number | null;
                                createdAt: Date;
                                updatedAt: Date;
                            }>;
                            readOnly: boolean;
                        }[];
                        totalCount: number;
                    };
                }>;
                formQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id: string;
                    };
                    output: import('../../../app-store/routing-forms/types/types').SerializableForm<{
                        team: {
                            name: string;
                            slug: string | null;
                        } | null;
                        _count: {
                            responses: number;
                        };
                    } & {
                        description: string | null;
                        name: string;
                        disabled: boolean;
                        settings: import('../../../prisma-client').Prisma.JsonValue;
                        id: string;
                        userId: number;
                        position: number;
                        routes: import('../../../prisma-client').Prisma.JsonValue;
                        fields: import('../../../prisma-client').Prisma.JsonValue;
                        teamId: number | null;
                        createdAt: Date;
                        updatedAt: Date;
                    }> | null;
                }>;
                formMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        id: string;
                        description?: string | null | undefined;
                        disabled?: boolean | undefined;
                        fields?: ({
                            label: string;
                            type: string;
                            id: string;
                            identifier?: string | undefined;
                            placeholder?: string | undefined;
                            selectText?: string | undefined;
                            required?: boolean | undefined;
                            deleted?: boolean | undefined;
                        } | {
                            label: string;
                            type: string;
                            id: string;
                            routerId: string;
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                            identifier?: string | undefined;
                            selectText?: string | undefined;
                            deleted?: boolean | undefined;
                        })[] | undefined;
                        routes?: ({
                            action: {
                                type: "customPageMessage" | "externalRedirectUrl" | "eventTypeRedirectUrl";
                                value: string;
                            };
                            id: string;
                            queryValue: {
                                type: "group" | "switch_group";
                                id?: string | undefined;
                                children1?: any;
                                properties?: any;
                            };
                            isFallback?: boolean | undefined;
                        } | {
                            id: string;
                            isRouter: true;
                        })[] | null | undefined;
                        addFallback?: boolean | undefined;
                        duplicateFrom?: string | null | undefined;
                        teamId?: number | null | undefined;
                        shouldConnect?: boolean | undefined;
                        settings?: {
                            emailOwnerOnSubmission: boolean;
                            sendUpdatesTo?: number[] | undefined;
                            sendToAll?: boolean | undefined;
                        } | null | undefined;
                    };
                    output: {
                        description: string | null;
                        name: string;
                        disabled: boolean;
                        settings: import('../../../prisma-client').Prisma.JsonValue;
                        id: string;
                        userId: number;
                        position: number;
                        routes: import('../../../prisma-client').Prisma.JsonValue;
                        fields: import('../../../prisma-client').Prisma.JsonValue;
                        teamId: number | null;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                }>;
                deleteForm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                    };
                    output: import('../../../prisma-client/runtime/library').GetBatchResult;
                }>;
                report: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        formId: string;
                        jsonLogicQuery: {
                            logic: Record<string, any> | null;
                        };
                        cursor?: number | null | undefined;
                    };
                    output: {
                        headers: string[];
                        responses: (string | number)[][];
                        nextCursor: number | null;
                    };
                }>;
            }>;
            appBasecamp3: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                projects: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: any;
                }>;
                projectMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        projectId: string;
                    };
                    output: any;
                }>;
            }>;
            features: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        description: string | null;
                        enabled: boolean;
                        type: import('../../../prisma-client').$Enums.FeatureType | null;
                        slug: string;
                        createdAt: Date | null;
                        updatedAt: Date | null;
                        lastUsedAt: Date | null;
                        stale: boolean | null;
                        updatedBy: number | null;
                    }[];
                }>;
                map: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: Partial<import('../../../features/flags/config').AppFlags>;
                }>;
            }>;
            appsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                listLocal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        category: string;
                    };
                    output: ({
                        name: string;
                        slug: string;
                        logo: string;
                        title: string | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        description: string;
                        keys: import('../../../prisma-client').Prisma.JsonObject | null;
                        dirName: string;
                        enabled: boolean;
                        isTemplate: boolean | undefined;
                    } | {
                        name: string;
                        slug: string;
                        logo: string;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title: string | undefined;
                        description: string;
                        enabled: boolean;
                        dirName: string;
                        keys: Record<string, string> | null;
                        isTemplate?: undefined;
                    })[];
                }>;
                toggle: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        enabled: boolean;
                        slug: string;
                    };
                    output: boolean;
                }>;
                saveKeys: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        type: string;
                        slug: string;
                        dirName: string;
                        keys?: unknown;
                        fromEnabled?: boolean | undefined;
                    };
                    output: void;
                }>;
                checkForGCal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: boolean;
                }>;
                updateAppCredentials: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        credentialId: number;
                        key: {} & {
                            [k: string]: unknown;
                        };
                    };
                    output: boolean;
                }>;
                queryForDependencies: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: string[] | undefined;
                    output: {
                        name: string;
                        slug: string;
                        installed: boolean;
                    }[] | undefined;
                }>;
                checkGlobalKeys: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        slug: string;
                    };
                    output: boolean;
                }>;
            }>;
            users: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        userId: number;
                    };
                    output: {
                        user: {
                            username: string | null;
                            email: string;
                            role: import('../../../prisma-client').$Enums.UserPermissionRole;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            defaultScheduleId: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            emailVerified: Date | null;
                            avatar: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            appTheme: string | null;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            away: boolean;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            organizationId: number | null;
                            movedToProfileId: number | null;
                            isPlatformManaged: boolean;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        };
                    };
                }>;
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        username: string | null;
                        email: string;
                        role: import('../../../prisma-client').$Enums.UserPermissionRole;
                        name: string | null;
                        bio: string | null;
                        theme: string | null;
                        verified: boolean | null;
                        locked: boolean;
                        id: number;
                        timeFormat: number | null;
                        defaultScheduleId: number | null;
                        weekStart: string;
                        timeZone: string;
                        startTime: number;
                        endTime: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        emailVerified: Date | null;
                        avatar: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        hideBranding: boolean;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        locale: string | null;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        away: boolean;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        disableImpersonation: boolean;
                        organizationId: number | null;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                    }[];
                }>;
                add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        role: "USER" | "ADMIN";
                        weekStart: string;
                        timeZone: string;
                        identityProvider: "SAML" | "CAL" | "GOOGLE";
                        username?: string | null | undefined;
                        name?: string | null | undefined;
                        bio?: string | null | undefined;
                        theme?: string | null | undefined;
                        timeFormat?: number | null | undefined;
                        defaultScheduleId?: number | null | undefined;
                        avatarUrl?: string | null | undefined;
                        locale?: string | null | undefined;
                        allowDynamicBooking?: boolean | null | undefined;
                    };
                    output: {
                        user: {
                            username: string | null;
                            email: string;
                            role: import('../../../prisma-client').$Enums.UserPermissionRole;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            defaultScheduleId: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            emailVerified: Date | null;
                            avatar: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            appTheme: string | null;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            away: boolean;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            organizationId: number | null;
                            movedToProfileId: number | null;
                            isPlatformManaged: boolean;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        };
                        message: string;
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        username?: string | null | undefined;
                        email?: string | undefined;
                        role?: "USER" | "ADMIN" | undefined;
                        name?: string | null | undefined;
                        bio?: string | null | undefined;
                        theme?: string | null | undefined;
                        timeFormat?: number | null | undefined;
                        defaultScheduleId?: number | null | undefined;
                        weekStart?: string | undefined;
                        timeZone?: string | undefined;
                        avatarUrl?: string | null | undefined;
                        locale?: string | null | undefined;
                        identityProvider?: "SAML" | "CAL" | "GOOGLE" | undefined;
                        allowDynamicBooking?: boolean | null | undefined;
                    };
                    output: {
                        user: {
                            username: string | null;
                            email: string;
                            role: import('../../../prisma-client').$Enums.UserPermissionRole;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            defaultScheduleId: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            emailVerified: Date | null;
                            avatar: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            appTheme: string | null;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            away: boolean;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            organizationId: number | null;
                            movedToProfileId: number | null;
                            isPlatformManaged: boolean;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        };
                        message: string;
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userId: number;
                    };
                    output: {
                        message: string;
                    };
                }>;
            }>;
            oAuth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                getClient: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        clientId: string;
                    };
                    output: {
                        name: string;
                        logo: string | null;
                        clientId: string;
                        redirectUri: string;
                    } | null;
                }>;
                addClient: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        logo: string;
                        redirectUri: string;
                    };
                    output: {
                        clientSecret: string;
                        name: string;
                        logo: string | null;
                        clientId: string;
                        redirectUri: string;
                    };
                }>;
                generateAuthCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        clientId: string;
                        scopes: string[];
                        teamSlug?: string | undefined;
                    };
                    output: {
                        client: {
                            name: string;
                            clientId: string;
                            redirectUri: string;
                        };
                        authorizationCode: string;
                    };
                }>;
            }>;
            googleWorkspace: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                checkForGWorkspace: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        id: number | undefined;
                    };
                }>;
                getUsersFromGWorkspace: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: string[];
                }>;
                removeCurrentGoogleWorkspaceConnection: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: {
                        deleted: number;
                    };
                }>;
            }>;
            admin: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                listPaginated: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        limit: number;
                        cursor?: number | null | undefined;
                        searchTerm?: string | null | undefined;
                    };
                    output: {
                        rows: {
                            username: string | null;
                            email: string;
                            role: import('../../../prisma-client').$Enums.UserPermissionRole;
                            name: string | null;
                            locked: boolean;
                            id: number;
                            timeZone: string;
                        }[];
                        nextCursor: number | undefined;
                        meta: {
                            totalRowCount: number;
                        };
                    };
                }>;
                sendPasswordReset: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userId: number;
                    };
                    output: {
                        success: boolean;
                    };
                }>;
                lockUserAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        locked: boolean;
                        userId: number;
                    };
                    output: {
                        success: boolean;
                        userId: number;
                        locked: boolean;
                    };
                }>;
                toggleFeatureFlag: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        enabled: boolean;
                        slug: string;
                    };
                    output: {
                        description: string | null;
                        enabled: boolean;
                        type: import('../../../prisma-client').$Enums.FeatureType | null;
                        slug: string;
                        createdAt: Date | null;
                        updatedAt: Date | null;
                        lastUsedAt: Date | null;
                        stale: boolean | null;
                        updatedBy: number | null;
                    };
                }>;
                removeTwoFactor: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userId: number;
                    };
                    output: {
                        success: boolean;
                        userId: number;
                    };
                }>;
                getSMSLockStateTeamsUsers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        users: {
                            locked: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                avatarUrl: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            }[];
                            reviewNeeded: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                avatarUrl: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            }[];
                        };
                        teams: {
                            locked: {
                                name: string;
                                id: number;
                                slug: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                logoUrl: string | null;
                            }[];
                            reviewNeeded: {
                                name: string;
                                id: number;
                                slug: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                logoUrl: string | null;
                            }[];
                        };
                    };
                }>;
                setSMSLockState: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userId?: number | undefined;
                        username?: string | undefined;
                        teamId?: number | undefined;
                        teamSlug?: string | undefined;
                        lock?: boolean | undefined;
                    };
                    output: {
                        name: string | null;
                        locked: boolean | undefined;
                    };
                }>;
            }>;
        } & {
            me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includePasswordAdded?: boolean | undefined;
                } | undefined;
                output: {
                    passwordAdded?: boolean | undefined;
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                    defaultBookerLayouts: {
                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    organizationId: number | null;
                    organization: {
                        id: number | null;
                        isOrgAdmin: boolean;
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        requestedSlug: string | null;
                        members?: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[] | undefined;
                        name?: string | undefined;
                        slug?: string | null | undefined;
                        logoUrl?: string | null | undefined;
                        calVideoLogo?: string | null | undefined;
                        isPrivate?: boolean | undefined;
                        bannerUrl?: string | null | undefined;
                        isPlatform?: boolean | undefined;
                        organizationSettings?: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null | undefined;
                    };
                    username: string | null;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                    } | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        organization: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                id: number;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            isPrivate: boolean;
                            bannerUrl: string | null;
                            isPlatform: boolean;
                            organizationSettings: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null;
                        } & Omit<Pick<{
                            id: number;
                            name: string;
                            slug: string | null;
                            logo: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            createdAt: Date;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            parentId: number | null;
                            timeFormat: number | null;
                            timeZone: string;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                            requestedSlug: string | null;
                            metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?: {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                } | undefined;
                            };
                        };
                        user: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            startTime: number;
                            endTime: number;
                            avatarUrl: string | null;
                            bufferTime: number;
                            locale: string | null;
                        };
                        movedFromUser: {
                            id: number;
                        } | null;
                        username: string;
                        id: number;
                        uid: string;
                        userId: number;
                        organizationId: number;
                        createdAt: Date & string;
                        updatedAt: Date & string;
                        upId: string;
                    } | ({
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                    } & import("@calcom/types/UserProfile").UserAsPersonalProfile) | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                    });
                    profiles: import("@calcom/types/UserProfile").UserProfile[];
                    secondaryEmails: {
                        email: string;
                        id: number;
                        emailVerified: Date | null;
                    }[];
                    sumOfBookings: number | undefined;
                    sumOfCalendars: number | undefined;
                    sumOfTeams: number | undefined;
                    sumOfEventTypes: number | undefined;
                    isPremium: boolean | undefined;
                    sumOfTeamEventTypes: number;
                };
            }>;
            deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    password: string;
                    totpCode?: string | undefined;
                };
                output: void;
            }>;
            deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: void;
            }>;
            connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    onboarding?: boolean | undefined;
                } | undefined;
                output: {
                    connectedCalendars: ({
                        integration: import("@calcom/types/App").App & {
                            credential: import('../../../app-store/utils').CredentialDataWithTeamName;
                            credentials: import('../../../app-store/utils').CredentialDataWithTeamName[];
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary?: undefined;
                        calendars?: undefined;
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                            extendsFeature?: "User" | "EventType" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        };
                        calendars: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        }[];
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                            extendsFeature?: "User" | "EventType" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        error: {
                            message: string;
                        };
                        primary?: undefined;
                        calendars?: undefined;
                    })[];
                    destinationCalendar: {
                        primary?: boolean | undefined;
                        name?: string | undefined;
                        readOnly?: boolean | undefined;
                        email?: string | undefined;
                        primaryEmail: string | null;
                        credentialId: number | null;
                        integrationTitle?: string | undefined;
                        userId: number | null;
                        integration: string;
                        externalId: string;
                        id: number;
                        eventTypeId: number | null;
                    };
                };
            }>;
            setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    externalId: string;
                    integration: string;
                    eventTypeId?: number | null | undefined;
                    bookingId?: number | null | undefined;
                };
                output: void;
            }>;
            integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    variant?: string | undefined;
                    exclude?: string[] | undefined;
                    onlyInstalled?: boolean | undefined;
                    includeTeamInstalledApps?: boolean | undefined;
                    extendsFeature?: "EventType" | undefined;
                    teamId?: number | null | undefined;
                    sortByMostPopular?: boolean | undefined;
                    categories?: ("payment" | "other" | "automation" | "conferencing" | "calendar" | "analytics" | "crm" | "messaging" | "video" | "web3")[] | undefined;
                    appId?: string | undefined;
                };
                output: {
                    items: {
                        userCredentialIds: number[];
                        invalidCredentialIds: number[];
                        teams: ({
                            teamId: number;
                            name: string;
                            logoUrl: string | null;
                            credentialId: number;
                            isAdmin: boolean;
                        } | null)[];
                        isInstalled: boolean | undefined;
                        isSetupAlready: boolean | undefined;
                        credentialOwner?: import('../../../app-store/types').CredentialOwner | undefined;
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                        extendsFeature?: "User" | "EventType" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                        enabled: boolean;
                    }[];
                };
            }>;
            appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appId: string;
                };
                output: {
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import('../../../prisma-client').$Enums.AppCategories[];
                    extendsFeature?: "User" | "EventType" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                    isInstalled: number;
                };
            }>;
            appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appType: string;
                };
                output: {
                    credentials: {
                        type: string;
                        id: number;
                        userId: number | null;
                        invalid: boolean | null;
                        key: import('../../../prisma-client').Prisma.JsonValue;
                        teamId: number | null;
                        subscriptionId: string | null;
                        appId: string | null;
                        paymentStatus: string | null;
                        billingCycleStart: number | null;
                    }[];
                    userAdminTeams: import('../../../features/ee/teams/lib/getUserAdminTeams').UserAdminTeams;
                };
            }>;
            stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    isPremium: boolean;
                    username: string | null;
                };
            }>;
            updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    username?: string | undefined;
                    name?: string | undefined;
                    email?: string | undefined;
                    bio?: string | undefined;
                    avatarUrl?: string | null | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        email: string;
                        id: number;
                        isDeleted?: boolean | undefined;
                    }[] | undefined;
                };
                output: {
                    email: string | undefined;
                    avatarUrl: string | null;
                    hasEmailBeenChanged: boolean | "" | undefined;
                    sendEmailVerification: boolean;
                    username?: string | undefined;
                    name?: string | undefined;
                    bio?: string | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        email: string;
                        id: number;
                        isDeleted: boolean;
                    }[] | undefined;
                };
            }>;
            unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    message: string;
                };
            }>;
            eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: string[];
                };
                output: void;
            }>;
            workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    rating: string;
                    comment: string;
                };
                output: void;
            }>;
            locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    label: string;
                    options: {
                        label: string;
                        value: string;
                        disabled?: boolean | undefined;
                        icon?: string | undefined;
                        slug?: string | undefined;
                    }[];
                }[];
            }>;
            deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    externalId?: string | undefined;
                    teamId?: number | undefined;
                };
                output: void;
            }>;
            bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: number;
            }>;
            getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    roomName: string;
                };
                output: {
                    data: {
                        duration: number;
                        status: string;
                        id: string;
                        room_name: string;
                        start_ts: number;
                        max_participants: number;
                        share_token: string;
                    }[];
                    total_count: number;
                } | {} | undefined;
            }>;
            getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    teamUpgradeBanner: ({
                        team: {
                            children: {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            }[];
                        } & {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    orgUpgradeBanner: ({
                        team: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    verifyEmailBanner: boolean;
                    calendarCredentialBanner: boolean;
                    invalidAppCredentialBanners: import('../../../features/users/components/InvalidAppCredentialsBanner').InvalidAppCredentialBannerProps[];
                };
            }>;
            getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    recordingId: string;
                };
                output: {
                    download_link: string;
                } | undefined;
            }>;
            getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                } | undefined;
            }>;
            updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
            }>;
            shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    email: string;
                    isVerified: boolean;
                };
            }>;
            teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    teamId: number;
                    name: string;
                    slug: string | null;
                    image: string;
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    readOnly: boolean;
                } | {
                    teamId: null;
                    name: string | null;
                    slug: string | null;
                    image: string;
                    readOnly: boolean;
                })[];
            }>;
            connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: {
                    isBookingAlreadyAcceptedBySomeoneElse: boolean;
                    meetingUrl: string;
                };
            }>;
            outOfOfficeCreate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    offset: number;
                    reasonId: number;
                    dateRange: {
                        startDate: Date;
                        endDate: Date;
                    };
                    toTeamUserId: number | null;
                    notes?: string | null | undefined;
                };
                output: {};
            }>;
            outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    notes: string | null;
                    reason: {
                        reason: string;
                        id: number;
                        userId: number | null;
                        emoji: string;
                    } | null;
                    id: number;
                    start: Date;
                    end: Date;
                    uuid: string;
                    toUserId: number | null;
                    toUser: {
                        username: string | null;
                    } | null;
                }[];
            }>;
            outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    outOfOfficeUid: string;
                };
                output: {};
            }>;
            addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                };
                output: {
                    data: {
                        email: string;
                        id: number;
                        userId: number;
                        emailVerified: Date | null;
                    };
                    message: string;
                };
            }>;
            getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    timeZone: string;
                    startDate: Date;
                    endDate: Date | null;
                }[];
            }>;
            outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    enabled: boolean;
                    reason: string;
                    id: number;
                    userId: number | null;
                    emoji: string;
                }[];
            }>;
        };
        record: {
            loggedInViewerRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        includePasswordAdded?: boolean | undefined;
                    } | undefined;
                    output: {
                        passwordAdded?: boolean | undefined;
                        id: number;
                        name: string | null;
                        email: string;
                        emailMd5: string;
                        emailVerified: Date | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        locale: string;
                        timeFormat: number | null;
                        timeZone: string;
                        avatar: string;
                        avatarUrl: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        defaultScheduleId: number | null;
                        completedOnboarding: boolean;
                        twoFactorEnabled: boolean;
                        disableImpersonation: boolean;
                        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                        identityProviderEmail: string;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bio: string | null;
                        weekStart: string;
                        theme: string | null;
                        appTheme: string | null;
                        hideBranding: boolean;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        defaultBookerLayouts: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        organizationId: number | null;
                        organization: {
                            id: number | null;
                            isOrgAdmin: boolean;
                            metadata: {
                                requestedSlug?: string | null | undefined;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?: {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                } | undefined;
                            } | null;
                            requestedSlug: string | null;
                            members?: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                id: number;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[] | undefined;
                            name?: string | undefined;
                            slug?: string | null | undefined;
                            logoUrl?: string | null | undefined;
                            calVideoLogo?: string | null | undefined;
                            isPrivate?: boolean | undefined;
                            bannerUrl?: string | null | undefined;
                            isPlatform?: boolean | undefined;
                            organizationSettings?: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null | undefined;
                        };
                        username: string | null;
                        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                            name: string | null;
                            avatarUrl: string | null;
                            startTime: number;
                            endTime: number;
                            bufferTime: number;
                            username: string | null;
                            upId: string;
                            id: null;
                            organizationId: null;
                            organization: null;
                        } | {
                            name: string | null;
                            avatarUrl: string | null;
                            startTime: number;
                            endTime: number;
                            bufferTime: number;
                            organization: {
                                members: {
                                    role: import('../../../prisma-client').$Enums.MembershipRole;
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                                name: string;
                                id: number;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                isPrivate: boolean;
                                bannerUrl: string | null;
                                isPlatform: boolean;
                                organizationSettings: {
                                    lockEventTypeCreationForUsers: boolean;
                                } | null;
                            } & Omit<Pick<{
                                id: number;
                                name: string;
                                slug: string | null;
                                logo: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                createdAt: Date;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                parentId: number | null;
                                timeFormat: number | null;
                                timeZone: string;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                                requestedSlug: string | null;
                                metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?: {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                    } | undefined;
                                };
                            };
                            user: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                startTime: number;
                                endTime: number;
                                avatarUrl: string | null;
                                bufferTime: number;
                                locale: string | null;
                            };
                            movedFromUser: {
                                id: number;
                            } | null;
                            username: string;
                            id: number;
                            uid: string;
                            userId: number;
                            organizationId: number;
                            createdAt: Date & string;
                            updatedAt: Date & string;
                            upId: string;
                        } | ({
                            name: string | null;
                            avatarUrl: string | null;
                            startTime: number;
                            endTime: number;
                            bufferTime: number;
                            username: string | null;
                            upId: string;
                            id: null;
                            organizationId: null;
                            organization: null;
                        } & import("@calcom/types/UserProfile").UserAsPersonalProfile) | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                            name: string | null;
                            avatarUrl: string | null;
                            startTime: number;
                            endTime: number;
                            bufferTime: number;
                            username: string | null;
                            upId: string;
                            id: null;
                            organizationId: null;
                            organization: null;
                        });
                        profiles: import("@calcom/types/UserProfile").UserProfile[];
                        secondaryEmails: {
                            email: string;
                            id: number;
                            emailVerified: Date | null;
                        }[];
                        sumOfBookings: number | undefined;
                        sumOfCalendars: number | undefined;
                        sumOfTeams: number | undefined;
                        sumOfEventTypes: number | undefined;
                        isPremium: boolean | undefined;
                        sumOfTeamEventTypes: number;
                    };
                }>;
                deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        password: string;
                        totpCode?: string | undefined;
                    };
                    output: void;
                }>;
                deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: void;
                }>;
                connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        onboarding?: boolean | undefined;
                    } | undefined;
                    output: {
                        connectedCalendars: ({
                            integration: import("@calcom/types/App").App & {
                                credential: import('../../../app-store/utils').CredentialDataWithTeamName;
                                credentials: import('../../../app-store/utils').CredentialDataWithTeamName[];
                                locationOption: {
                                    label: string;
                                    value: string;
                                    icon?: string | undefined;
                                    disabled?: boolean | undefined;
                                } | null;
                            };
                            credentialId: number;
                            primary?: undefined;
                            calendars?: undefined;
                            error?: undefined;
                        } | {
                            integration: {
                                installed?: boolean | undefined;
                                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                                title?: string | undefined;
                                name: string;
                                description: string;
                                variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                                slug: string;
                                category?: string | undefined;
                                categories: import('../../../prisma-client').$Enums.AppCategories[];
                                extendsFeature?: "User" | "EventType" | undefined;
                                logo: string;
                                publisher: string;
                                url: string;
                                docsUrl?: string | undefined;
                                verified?: boolean | undefined;
                                trending?: boolean | undefined;
                                rating?: number | undefined;
                                reviews?: number | undefined;
                                isGlobal?: boolean | undefined;
                                simplePath?: string | undefined;
                                email: string;
                                key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                                feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                                price?: number | undefined;
                                commission?: number | undefined;
                                licenseRequired?: boolean | undefined;
                                teamsPlanRequired?: {
                                    upgradeUrl: string;
                                } | undefined;
                                appData?: import("@calcom/types/App").AppData | undefined;
                                paid?: import("@calcom/types/App").PaidAppData | undefined;
                                dirName?: string | undefined;
                                isTemplate?: boolean | undefined;
                                __template?: string | undefined;
                                dependencies?: string[] | undefined;
                                concurrentMeetings?: boolean | undefined;
                                createdAt?: string | undefined;
                                isOAuth?: boolean | undefined;
                                locationOption: {
                                    label: string;
                                    value: string;
                                    icon?: string | undefined;
                                    disabled?: boolean | undefined;
                                } | null;
                            };
                            credentialId: number;
                            primary: {
                                readOnly: boolean;
                                primary: true | null;
                                isSelected: boolean;
                                credentialId: number;
                                name?: string | undefined;
                                email?: string | undefined;
                                primaryEmail?: string | undefined;
                                integrationTitle?: string | undefined;
                                userId?: number | undefined;
                                integration?: string | undefined;
                                externalId: string;
                            };
                            calendars: {
                                readOnly: boolean;
                                primary: true | null;
                                isSelected: boolean;
                                credentialId: number;
                                name?: string | undefined;
                                email?: string | undefined;
                                primaryEmail?: string | undefined;
                                integrationTitle?: string | undefined;
                                userId?: number | undefined;
                                integration?: string | undefined;
                                externalId: string;
                            }[];
                            error?: undefined;
                        } | {
                            integration: {
                                installed?: boolean | undefined;
                                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                                title?: string | undefined;
                                name: string;
                                description: string;
                                variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                                slug: string;
                                category?: string | undefined;
                                categories: import('../../../prisma-client').$Enums.AppCategories[];
                                extendsFeature?: "User" | "EventType" | undefined;
                                logo: string;
                                publisher: string;
                                url: string;
                                docsUrl?: string | undefined;
                                verified?: boolean | undefined;
                                trending?: boolean | undefined;
                                rating?: number | undefined;
                                reviews?: number | undefined;
                                isGlobal?: boolean | undefined;
                                simplePath?: string | undefined;
                                email: string;
                                key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                                feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                                price?: number | undefined;
                                commission?: number | undefined;
                                licenseRequired?: boolean | undefined;
                                teamsPlanRequired?: {
                                    upgradeUrl: string;
                                } | undefined;
                                appData?: import("@calcom/types/App").AppData | undefined;
                                paid?: import("@calcom/types/App").PaidAppData | undefined;
                                dirName?: string | undefined;
                                isTemplate?: boolean | undefined;
                                __template?: string | undefined;
                                dependencies?: string[] | undefined;
                                concurrentMeetings?: boolean | undefined;
                                createdAt?: string | undefined;
                                isOAuth?: boolean | undefined;
                                locationOption: {
                                    label: string;
                                    value: string;
                                    icon?: string | undefined;
                                    disabled?: boolean | undefined;
                                } | null;
                            };
                            credentialId: number;
                            error: {
                                message: string;
                            };
                            primary?: undefined;
                            calendars?: undefined;
                        })[];
                        destinationCalendar: {
                            primary?: boolean | undefined;
                            name?: string | undefined;
                            readOnly?: boolean | undefined;
                            email?: string | undefined;
                            primaryEmail: string | null;
                            credentialId: number | null;
                            integrationTitle?: string | undefined;
                            userId: number | null;
                            integration: string;
                            externalId: string;
                            id: number;
                            eventTypeId: number | null;
                        };
                    };
                }>;
                setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        externalId: string;
                        integration: string;
                        eventTypeId?: number | null | undefined;
                        bookingId?: number | null | undefined;
                    };
                    output: void;
                }>;
                integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        variant?: string | undefined;
                        exclude?: string[] | undefined;
                        onlyInstalled?: boolean | undefined;
                        includeTeamInstalledApps?: boolean | undefined;
                        extendsFeature?: "EventType" | undefined;
                        teamId?: number | null | undefined;
                        sortByMostPopular?: boolean | undefined;
                        categories?: ("payment" | "other" | "automation" | "conferencing" | "calendar" | "analytics" | "crm" | "messaging" | "video" | "web3")[] | undefined;
                        appId?: string | undefined;
                    };
                    output: {
                        items: {
                            userCredentialIds: number[];
                            invalidCredentialIds: number[];
                            teams: ({
                                teamId: number;
                                name: string;
                                logoUrl: string | null;
                                credentialId: number;
                                isAdmin: boolean;
                            } | null)[];
                            isInstalled: boolean | undefined;
                            isSetupAlready: boolean | undefined;
                            credentialOwner?: import('../../../app-store/types').CredentialOwner | undefined;
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                            extendsFeature?: "User" | "EventType" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                            enabled: boolean;
                        }[];
                    };
                }>;
                appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        appId: string;
                    };
                    output: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                        extendsFeature?: "User" | "EventType" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                        isInstalled: number;
                    };
                }>;
                appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        appType: string;
                    };
                    output: {
                        credentials: {
                            type: string;
                            id: number;
                            userId: number | null;
                            invalid: boolean | null;
                            key: import('../../../prisma-client').Prisma.JsonValue;
                            teamId: number | null;
                            subscriptionId: string | null;
                            appId: string | null;
                            paymentStatus: string | null;
                            billingCycleStart: number | null;
                        }[];
                        userAdminTeams: import('../../../features/ee/teams/lib/getUserAdminTeams').UserAdminTeams;
                    };
                }>;
                stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        isPremium: boolean;
                        username: string | null;
                    };
                }>;
                updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        username?: string | undefined;
                        name?: string | undefined;
                        email?: string | undefined;
                        bio?: string | undefined;
                        avatarUrl?: string | null | undefined;
                        timeZone?: string | undefined;
                        weekStart?: string | undefined;
                        hideBranding?: boolean | undefined;
                        allowDynamicBooking?: boolean | undefined;
                        allowSEOIndexing?: boolean | undefined;
                        receiveMonthlyDigestEmail?: boolean | undefined;
                        brandColor?: string | undefined;
                        darkBrandColor?: string | undefined;
                        theme?: string | null | undefined;
                        appTheme?: string | null | undefined;
                        completedOnboarding?: boolean | undefined;
                        locale?: string | undefined;
                        timeFormat?: number | undefined;
                        disableImpersonation?: boolean | undefined;
                        metadata?: {
                            proPaidForByTeamId?: number | undefined;
                            stripeCustomerId?: string | undefined;
                            vitalSettings?: {
                                connected?: boolean | undefined;
                                selectedParam?: string | undefined;
                                sleepValue?: number | undefined;
                            } | undefined;
                            isPremium?: boolean | undefined;
                            sessionTimeout?: number | undefined;
                            defaultConferencingApp?: {
                                appSlug?: string | undefined;
                                appLink?: string | undefined;
                            } | undefined;
                            defaultBookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                            emailChangeWaitingForVerification?: string | undefined;
                            migratedToOrgFrom?: {
                                username?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                revertTime?: string | undefined;
                            } | undefined;
                        } | null | undefined;
                        travelSchedules?: {
                            timeZone: string;
                            startDate: Date;
                            id?: number | undefined;
                            endDate?: Date | undefined;
                        }[] | undefined;
                        secondaryEmails?: {
                            email: string;
                            id: number;
                            isDeleted?: boolean | undefined;
                        }[] | undefined;
                    };
                    output: {
                        email: string | undefined;
                        avatarUrl: string | null;
                        hasEmailBeenChanged: boolean | "" | undefined;
                        sendEmailVerification: boolean;
                        username?: string | undefined;
                        name?: string | undefined;
                        bio?: string | undefined;
                        timeZone?: string | undefined;
                        weekStart?: string | undefined;
                        hideBranding?: boolean | undefined;
                        allowDynamicBooking?: boolean | undefined;
                        allowSEOIndexing?: boolean | undefined;
                        receiveMonthlyDigestEmail?: boolean | undefined;
                        brandColor?: string | undefined;
                        darkBrandColor?: string | undefined;
                        theme?: string | null | undefined;
                        appTheme?: string | null | undefined;
                        completedOnboarding?: boolean | undefined;
                        locale?: string | undefined;
                        timeFormat?: number | undefined;
                        disableImpersonation?: boolean | undefined;
                        metadata?: {
                            proPaidForByTeamId?: number | undefined;
                            stripeCustomerId?: string | undefined;
                            vitalSettings?: {
                                connected?: boolean | undefined;
                                selectedParam?: string | undefined;
                                sleepValue?: number | undefined;
                            } | undefined;
                            isPremium?: boolean | undefined;
                            sessionTimeout?: number | undefined;
                            defaultConferencingApp?: {
                                appSlug?: string | undefined;
                                appLink?: string | undefined;
                            } | undefined;
                            defaultBookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                            emailChangeWaitingForVerification?: string | undefined;
                            migratedToOrgFrom?: {
                                username?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                revertTime?: string | undefined;
                            } | undefined;
                        } | null | undefined;
                        travelSchedules?: {
                            timeZone: string;
                            startDate: Date;
                            id?: number | undefined;
                            endDate?: Date | undefined;
                        }[] | undefined;
                        secondaryEmails?: {
                            email: string;
                            id: number;
                            isDeleted: boolean;
                        }[] | undefined;
                    };
                }>;
                unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: {
                        message: string;
                    };
                }>;
                eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        ids: number[];
                    };
                    output: void;
                }>;
                routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        ids: string[];
                    };
                    output: void;
                }>;
                workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        ids: number[];
                    };
                    output: void;
                }>;
                submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        rating: string;
                        comment: string;
                    };
                    output: void;
                }>;
                locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | undefined;
                    };
                    output: {
                        label: string;
                        options: {
                            label: string;
                            value: string;
                            disabled?: boolean | undefined;
                            icon?: string | undefined;
                            slug?: string | undefined;
                        }[];
                    }[];
                }>;
                deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        externalId?: string | undefined;
                        teamId?: number | undefined;
                    };
                    output: void;
                }>;
                bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: number;
                }>;
                getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        roomName: string;
                    };
                    output: {
                        data: {
                            duration: number;
                            status: string;
                            id: string;
                            room_name: string;
                            start_ts: number;
                            max_participants: number;
                            share_token: string;
                        }[];
                        total_count: number;
                    } | {} | undefined;
                }>;
                getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        teamUpgradeBanner: ({
                            team: {
                                children: {
                                    name: string;
                                    logo: string | null;
                                    bio: string | null;
                                    theme: string | null;
                                    id: number;
                                    timeFormat: number | null;
                                    weekStart: string;
                                    timeZone: string;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    slug: string | null;
                                    parentId: number | null;
                                    hideBranding: boolean;
                                    brandColor: string | null;
                                    darkBrandColor: string | null;
                                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                    createdAt: Date;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    appLogo: string | null;
                                    appIconLogo: string | null;
                                    isPrivate: boolean;
                                    hideBookATeamMember: boolean;
                                    bannerUrl: string | null;
                                    isOrganization: boolean;
                                    pendingPayment: boolean;
                                    isPlatform: boolean;
                                }[];
                            } & {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            };
                        } & {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        })[];
                        orgUpgradeBanner: ({
                            team: {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            };
                        } & {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        })[];
                        verifyEmailBanner: boolean;
                        calendarCredentialBanner: boolean;
                        invalidAppCredentialBanners: import('../../../features/users/components/InvalidAppCredentialsBanner').InvalidAppCredentialBannerProps[];
                    };
                }>;
                getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        recordingId: string;
                    };
                    output: {
                        download_link: string;
                    } | undefined;
                }>;
                getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                }>;
                updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    };
                    output: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    };
                }>;
                shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        id: number;
                        email: string;
                        isVerified: boolean;
                    };
                }>;
                teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: ({
                        teamId: number;
                        name: string;
                        slug: string | null;
                        image: string;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        readOnly: boolean;
                    } | {
                        teamId: null;
                        name: string | null;
                        slug: string | null;
                        image: string;
                        readOnly: boolean;
                    })[];
                }>;
                connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        token: string;
                    };
                    output: {
                        isBookingAlreadyAcceptedBySomeoneElse: boolean;
                        meetingUrl: string;
                    };
                }>;
                outOfOfficeCreate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        offset: number;
                        reasonId: number;
                        dateRange: {
                            startDate: Date;
                            endDate: Date;
                        };
                        toTeamUserId: number | null;
                        notes?: string | null | undefined;
                    };
                    output: {};
                }>;
                outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        notes: string | null;
                        reason: {
                            reason: string;
                            id: number;
                            userId: number | null;
                            emoji: string;
                        } | null;
                        id: number;
                        start: Date;
                        end: Date;
                        uuid: string;
                        toUserId: number | null;
                        toUser: {
                            username: string | null;
                        } | null;
                    }[];
                }>;
                outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        outOfOfficeUid: string;
                    };
                    output: {};
                }>;
                addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                    };
                    output: {
                        data: {
                            email: string;
                            id: number;
                            userId: number;
                            emailVerified: Date | null;
                        };
                        message: string;
                    };
                }>;
                getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        id: number;
                        timeZone: string;
                        startDate: Date;
                        endDate: Date | null;
                    }[];
                }>;
                outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        enabled: boolean;
                        reason: string;
                        id: number;
                        userId: number | null;
                        emoji: string;
                    }[];
                }>;
            }>;
            public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                session: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: import("next-auth").Session | null;
                }>;
                i18n: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        locale: string;
                        CalComVersion: string;
                    };
                    output: {
                        i18n: import("next-i18next").SSRConfig;
                        locale: string;
                    };
                }>;
                countryCode: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        countryCode: string;
                    };
                }>;
                submitRating: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        rating: number;
                        bookingUid: string;
                        comment?: string | undefined;
                    };
                    output: void;
                }>;
                noShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingUid: string;
                    };
                    output: void;
                }>;
                samlTenantProduct: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                    };
                    output: {
                        tenant: string;
                        product: string;
                    };
                }>;
                stripeCheckoutSession: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        stripeCustomerId?: string | undefined;
                        checkoutSessionId?: string | undefined;
                    };
                    output: {
                        valid: boolean;
                        hasPaymentFailed?: undefined;
                        isPremiumUsername?: undefined;
                        customer?: undefined;
                    } | {
                        valid: boolean;
                        hasPaymentFailed: boolean;
                        isPremiumUsername: boolean;
                        customer: {
                            username: string;
                            email: string;
                            stripeCustomerId: string;
                        };
                    };
                }>;
                slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                    ctx: import("../createContext").InnerContext;
                    meta: object;
                    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T = unknown>(string: string) => T;
                        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>, {
                    getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: {
                            startTime: string;
                            endTime: string;
                            eventTypeId?: number | undefined;
                            eventTypeSlug?: string | undefined;
                            timeZone?: string | undefined;
                            usernameList?: string[] | undefined;
                            debug?: boolean | undefined;
                            duration?: string | undefined;
                            rescheduleUid?: string | null | undefined;
                            isTeamEvent?: boolean | undefined;
                            orgSlug?: string | undefined;
                        };
                        output: import("./viewer/slots/util").IGetAvailableSlots;
                    }>;
                    reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            eventTypeId: number;
                            slotUtcStartDate: string;
                            slotUtcEndDate: string;
                            bookingUid?: string | undefined;
                        };
                        output: {
                            uid: string;
                        };
                    }>;
                    removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            uid: string | null;
                        };
                        output: void;
                    }>;
                }>;
                event: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        username: string;
                        org: string | null;
                        eventSlug: string;
                        isTeamEvent?: boolean | undefined;
                        fromRedirectOfNonOrgLink?: boolean | undefined;
                    };
                    output: {
                        bookingFields: {
                            name: string;
                            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                            options?: {
                                label: string;
                                value: string;
                            }[] | undefined;
                            required?: boolean | undefined;
                            label?: string | undefined;
                            placeholder?: string | undefined;
                            defaultLabel?: string | undefined;
                            defaultPlaceholder?: string | undefined;
                            labelAsSafeHtml?: string | undefined;
                            getOptionsAt?: string | undefined;
                            optionsInputs?: Record<string, {
                                type: "text" | "address" | "phone";
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                            }> | undefined;
                            variant?: string | undefined;
                            variantsConfig?: {
                                variants: Record<string, {
                                    fields: {
                                        name: string;
                                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                        required?: boolean | undefined;
                                        label?: string | undefined;
                                        placeholder?: string | undefined;
                                        labelAsSafeHtml?: string | undefined;
                                    }[];
                                }>;
                            } | undefined;
                            views?: {
                                label: string;
                                id: string;
                                description?: string | undefined;
                            }[] | undefined;
                            hideWhenJustOneOption?: boolean | undefined;
                            hidden?: boolean | undefined;
                            editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                            sources?: {
                                label: string;
                                type: string;
                                id: string;
                                editUrl?: string | undefined;
                                fieldRequired?: boolean | undefined;
                            }[] | undefined;
                        }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                        users: ({
                            metadata: undefined;
                            bookerUrl: string;
                            profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                            username: string | null;
                            email: string;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            emailVerified: Date | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            movedToProfileId: number | null;
                        } | {
                            metadata: undefined;
                            bookerUrl: string;
                            profile: {
                                organization: Omit<{
                                    name: string;
                                    id: number;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    slug: string | null;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    bannerUrl: string | null;
                                } & Omit<Pick<{
                                    id: number;
                                    name: string;
                                    slug: string | null;
                                    logo: string | null;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    appLogo: string | null;
                                    appIconLogo: string | null;
                                    bio: string | null;
                                    hideBranding: boolean;
                                    isPrivate: boolean;
                                    hideBookATeamMember: boolean;
                                    createdAt: Date;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    theme: string | null;
                                    brandColor: string | null;
                                    darkBrandColor: string | null;
                                    bannerUrl: string | null;
                                    parentId: number | null;
                                    timeFormat: number | null;
                                    timeZone: string;
                                    weekStart: string;
                                    isOrganization: boolean;
                                    pendingPayment: boolean;
                                    isPlatform: boolean;
                                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                                    requestedSlug: string | null;
                                    metadata: {
                                        requestedSlug: string | null;
                                        paymentId?: string | undefined;
                                        subscriptionId?: string | null | undefined;
                                        subscriptionItemId?: string | null | undefined;
                                        orgSeats?: number | null | undefined;
                                        orgPricePerSeat?: number | null | undefined;
                                        migratedToOrgFrom?: {
                                            teamSlug?: string | null | undefined;
                                            lastMigrationTime?: string | undefined;
                                            reverted?: boolean | undefined;
                                            lastRevertTime?: string | undefined;
                                        } | undefined;
                                    };
                                }, "metadata"> & {
                                    requestedSlug: string | null;
                                    metadata: {
                                        requestedSlug: string | null;
                                        paymentId?: string | undefined;
                                        subscriptionId?: string | null | undefined;
                                        subscriptionItemId?: string | null | undefined;
                                        orgSeats?: number | null | undefined;
                                        orgPricePerSeat?: number | null | undefined;
                                        migratedToOrgFrom?: {
                                            teamSlug?: string | null | undefined;
                                            lastMigrationTime?: string | undefined;
                                            reverted?: boolean | undefined;
                                            lastRevertTime?: string | undefined;
                                        } | undefined;
                                    };
                                };
                                username: string;
                                id: number;
                                uid: string;
                                userId: number;
                                organizationId: number;
                                createdAt: Date & string;
                                updatedAt: Date & string;
                                upId: string;
                            };
                            username: string | null;
                            email: string;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            emailVerified: Date | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            movedToProfileId: number | null;
                        })[];
                        locations: (Pick<Partial<import('../../../app-store/locations').LocationObject>, "link" | "address"> & Omit<import('../../../app-store/locations').LocationObject, "link" | "address">)[];
                        profile: {
                            image?: string | undefined;
                            name?: string | undefined;
                            username?: string | null | undefined;
                            weekStart: string;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            theme: null;
                            bookerLayouts: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null;
                        };
                        entity: {
                            considerUnpublished: boolean;
                            fromRedirectOfNonOrgLink: boolean;
                            orgSlug: string | null;
                            name: string | null;
                            teamSlug: null;
                            logoUrl: null;
                        };
                        isInstantEvent: boolean;
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        } | null;
                        isDynamic: boolean;
                        periodCountCalendarDays: boolean;
                        periodStartDate: null;
                        periodEndDate: null;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        periodType: "UNLIMITED";
                        periodDays: null;
                        slotInterval: null;
                        offsetStart: number;
                        customInputs: {
                            required: boolean;
                            label: string;
                            placeholder: string;
                            type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                            id: number;
                            eventTypeId: number;
                            options?: {
                                label: string;
                                type: string;
                            }[] | null | undefined;
                            hasToBeCreated?: boolean | undefined;
                        }[];
                        disableGuests: boolean;
                        minimumBookingNotice: number;
                        schedule: null;
                        timeZone: null;
                        successRedirectUrl: string;
                        forwardParamsSuccessRedirect: boolean;
                        teamId: null;
                        scheduleId: null;
                        availability: never[];
                        price: number;
                        currency: string;
                        schedulingType: "COLLECTIVE";
                        seatsPerTimeSlot: null;
                        seatsShowAttendees: null;
                        seatsShowAvailabilityCount: null;
                        onlyShowFirstAvailableSlot: boolean;
                        id: number;
                        hideCalendarNotes: boolean;
                        recurringEvent: null;
                        destinationCalendar: null;
                        team: null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        bookingLimits: null;
                        durationLimits: null;
                        hidden: boolean;
                        userId: number;
                        parentId: null;
                        owner: null;
                        workflows: never[];
                        hosts: never[];
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        secondaryEmailId: null;
                        secondaryEmail: null;
                        length: number;
                        slug: string;
                        title: string;
                        eventName: string;
                        description: string;
                        descriptionAsSafeHTML: string;
                        position: number;
                    } | {
                        bookerLayouts: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null;
                        description: string;
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        } | null;
                        customInputs: {
                            required: boolean;
                            label: string;
                            placeholder: string;
                            type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                            id: number;
                            eventTypeId: number;
                            options?: {
                                label: string;
                                type: string;
                            }[] | null | undefined;
                            hasToBeCreated?: boolean | undefined;
                        }[];
                        locations: (Pick<Partial<import('../../../app-store/locations').LocationObject>, "link" | "address"> & Omit<import('../../../app-store/locations').LocationObject, "link" | "address">)[];
                        bookingFields: {
                            name: string;
                            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                            options?: {
                                label: string;
                                value: string;
                            }[] | undefined;
                            required?: boolean | undefined;
                            label?: string | undefined;
                            placeholder?: string | undefined;
                            defaultLabel?: string | undefined;
                            defaultPlaceholder?: string | undefined;
                            labelAsSafeHtml?: string | undefined;
                            getOptionsAt?: string | undefined;
                            optionsInputs?: Record<string, {
                                type: "text" | "address" | "phone";
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                            }> | undefined;
                            variant?: string | undefined;
                            variantsConfig?: {
                                variants: Record<string, {
                                    fields: {
                                        name: string;
                                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                        required?: boolean | undefined;
                                        label?: string | undefined;
                                        placeholder?: string | undefined;
                                        labelAsSafeHtml?: string | undefined;
                                    }[];
                                }>;
                            } | undefined;
                            views?: {
                                label: string;
                                id: string;
                                description?: string | undefined;
                            }[] | undefined;
                            hideWhenJustOneOption?: boolean | undefined;
                            hidden?: boolean | undefined;
                            editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                            sources?: {
                                label: string;
                                type: string;
                                id: string;
                                editUrl?: string | undefined;
                                fieldRequired?: boolean | undefined;
                            }[] | undefined;
                        }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                        recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                        profile: {
                            username: string | null | undefined;
                            name: string | null;
                            weekStart: string;
                            image: string;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            theme: string | null;
                            bookerLayouts: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null;
                        };
                        users: {
                            username: string | null;
                            name: string | null;
                            weekStart: string;
                            organizationId: any;
                            avatarUrl: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                            bookerUrl: string;
                        }[];
                        entity: {
                            logoUrl?: string | undefined;
                            name: any;
                            fromRedirectOfNonOrgLink: boolean;
                            considerUnpublished: boolean;
                            orgSlug: string | null;
                            teamSlug: string | null;
                        };
                        isDynamic: boolean;
                        isInstantEvent: boolean;
                        aiPhoneCallConfig: {
                            enabled: boolean;
                            id: number;
                            eventTypeId: number;
                            yourPhoneNumber: string;
                            numberToCall: string;
                            guestName: string;
                            guestEmail: string | null;
                            guestCompany: string | null;
                            generalPrompt: string;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                        assignAllTeamMembers: boolean;
                        owner: ({
                            username: string | null;
                            name: string | null;
                            organization: {
                                name: string;
                                id: number;
                                slug: string | null;
                                calVideoLogo: string | null;
                                bannerUrl: string | null;
                            } | null;
                            theme: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            weekStart: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            avatarUrl: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        }) | null;
                        hosts: {
                            user: {
                                username: string | null;
                                name: string | null;
                                organization: {
                                    name: string;
                                    id: number;
                                    slug: string | null;
                                    calVideoLogo: string | null;
                                    bannerUrl: string | null;
                                } | null;
                                theme: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                weekStart: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                avatarUrl: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                            } & {
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            };
                        }[];
                        price: number;
                        title: string;
                        hidden: boolean;
                        team: {
                            name: string;
                            theme: string | null;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            parent: {
                                name: string;
                                slug: string | null;
                                logoUrl: string | null;
                                bannerUrl: string | null;
                            } | null;
                            slug: string | null;
                            parentId: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            logoUrl: string | null;
                        } | null;
                        length: number;
                        workflows: ({
                            workflow: {
                                steps: {
                                    action: import('../../../prisma-client').$Enums.WorkflowActions;
                                    id: number;
                                    template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                                    stepNumber: number;
                                    workflowId: number;
                                    sendTo: string | null;
                                    reminderBody: string | null;
                                    emailSubject: string | null;
                                    numberRequired: boolean | null;
                                    sender: string | null;
                                    numberVerificationPending: boolean;
                                    includeCalendarEvent: boolean;
                                }[];
                            } & {
                                name: string;
                                trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                                id: number;
                                userId: number | null;
                                time: number | null;
                                position: number;
                                teamId: number | null;
                                timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                            };
                        } & {
                            id: number;
                            eventTypeId: number;
                            workflowId: number;
                        })[];
                        currency: string;
                        schedule: {
                            id: number;
                            timeZone: string | null;
                        } | null;
                        id: number;
                        slug: string;
                        eventName: string | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        disableGuests: boolean;
                        seatsPerTimeSlot: number | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                    } | null;
                }>;
                ssoConnections: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        connectionExists: null;
                    } | {
                        connectionExists: boolean;
                    };
                }>;
            }>;
            auth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                changePassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        oldPassword: string;
                        newPassword: string;
                    };
                    output: void;
                }>;
                verifyPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        passwordInput: string;
                    };
                    output: void;
                }>;
                verifyCodeUnAuthenticated: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        code: string;
                    };
                    output: true;
                }>;
                sendVerifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        username?: string | undefined;
                        language?: string | undefined;
                        isVerifyingEmail?: boolean | undefined;
                    };
                    output: {
                        ok: boolean;
                        skipped: boolean;
                    };
                }>;
                resendVerifyEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                    } | undefined;
                    output: {
                        ok: boolean;
                        skipped: boolean;
                    };
                }>;
                createAccountPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: void;
                }>;
            }>;
            deploymentSetup: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        licenseKey?: string | undefined;
                    };
                    output: void;
                }>;
            }>;
            bookings: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        filters: {
                            status: "upcoming" | "recurring" | "past" | "unconfirmed" | "cancelled";
                            teamIds?: number[] | undefined;
                            userIds?: number[] | undefined;
                            eventTypeIds?: number[] | undefined;
                        };
                        limit?: number | null | undefined;
                        cursor?: number | null | undefined;
                    };
                    output: {
                        bookings: {
                            eventType: {
                                recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                                price: number;
                                currency: string;
                                metadata: {
                                    smartContractAddress?: string | undefined;
                                    blockchainId?: number | undefined;
                                    multipleDuration?: number[] | undefined;
                                    giphyThankYouPage?: string | undefined;
                                    apps?: {
                                        alby?: {
                                            price: number;
                                            currency: string;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                        } | undefined;
                                        basecamp3?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        dailyvideo?: {} | undefined;
                                        fathom?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        feishucalendar?: {} | undefined;
                                        ga4?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        giphy?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            thankYouPage?: string | undefined;
                                        } | undefined;
                                        googlecalendar?: {} | undefined;
                                        gtm?: {
                                            trackingId: string;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        hubspot?: {} | undefined;
                                        intercom?: {} | undefined;
                                        jelly?: {} | undefined;
                                        jitsivideo?: {} | undefined;
                                        larkcalendar?: {} | undefined;
                                        make?: {} | undefined;
                                        matomo?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            MATOMO_URL?: string | undefined;
                                            SITE_ID?: string | undefined;
                                        } | undefined;
                                        metapixel?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        "mock-payment-app"?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        office365calendar?: {
                                            client_id: string;
                                            client_secret: string;
                                        } | undefined;
                                        office365video?: {
                                            client_id: string;
                                            client_secret: string;
                                        } | undefined;
                                        paypal?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        "pipedrive-crm"?: {} | undefined;
                                        plausible?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            PLAUSIBLE_URL?: string | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        posthog?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            TRACKING_ID?: string | undefined;
                                            API_HOST?: string | undefined;
                                        } | undefined;
                                        qr_code?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        "routing-forms"?: any;
                                        salesforce?: {} | undefined;
                                        shimmervideo?: {} | undefined;
                                        stripe?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        tandemvideo?: {} | undefined;
                                        "booking-pages-tag"?: {
                                            trackingId: string;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        "event-type-app-card"?: {
                                            isSunrise: boolean;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        vital?: {} | undefined;
                                        webex?: {} | undefined;
                                        wordpress?: {
                                            isSunrise: boolean;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        zapier?: {} | undefined;
                                        "zoho-bigin"?: {} | undefined;
                                        zohocalendar?: {} | undefined;
                                        zohocrm?: {} | undefined;
                                        zoomvideo?: {} | undefined;
                                    } | undefined;
                                    additionalNotesRequired?: boolean | undefined;
                                    disableSuccessPage?: boolean | undefined;
                                    disableStandardEmails?: {
                                        confirmation?: {
                                            host?: boolean | undefined;
                                            attendee?: boolean | undefined;
                                        } | undefined;
                                    } | undefined;
                                    managedEventConfig?: {
                                        unlockedFields?: {
                                            price?: true | undefined;
                                            bookings?: true | undefined;
                                            webhooks?: true | undefined;
                                            profile?: true | undefined;
                                            owner?: true | undefined;
                                            title?: true | undefined;
                                            description?: true | undefined;
                                            hidden?: true | undefined;
                                            team?: true | undefined;
                                            availability?: true | undefined;
                                            length?: true | undefined;
                                            workflows?: true | undefined;
                                            users?: true | undefined;
                                            hosts?: true | undefined;
                                            currency?: true | undefined;
                                            children?: true | undefined;
                                            schedule?: true | undefined;
                                            timeZone?: true | undefined;
                                            userId?: true | undefined;
                                            metadata?: true | undefined;
                                            position?: true | undefined;
                                            parent?: true | undefined;
                                            slug?: true | undefined;
                                            locations?: true | undefined;
                                            offsetStart?: true | undefined;
                                            profileId?: true | undefined;
                                            teamId?: true | undefined;
                                            eventName?: true | undefined;
                                            parentId?: true | undefined;
                                            bookingFields?: true | undefined;
                                            periodType?: true | undefined;
                                            periodStartDate?: true | undefined;
                                            periodEndDate?: true | undefined;
                                            periodDays?: true | undefined;
                                            periodCountCalendarDays?: true | undefined;
                                            lockTimeZoneToggleOnBookingPage?: true | undefined;
                                            requiresConfirmation?: true | undefined;
                                            requiresBookerEmailVerification?: true | undefined;
                                            recurringEvent?: true | undefined;
                                            disableGuests?: true | undefined;
                                            hideCalendarNotes?: true | undefined;
                                            minimumBookingNotice?: true | undefined;
                                            beforeEventBuffer?: true | undefined;
                                            afterEventBuffer?: true | undefined;
                                            seatsPerTimeSlot?: true | undefined;
                                            onlyShowFirstAvailableSlot?: true | undefined;
                                            seatsShowAttendees?: true | undefined;
                                            seatsShowAvailabilityCount?: true | undefined;
                                            schedulingType?: true | undefined;
                                            scheduleId?: true | undefined;
                                            slotInterval?: true | undefined;
                                            successRedirectUrl?: true | undefined;
                                            forwardParamsSuccessRedirect?: true | undefined;
                                            bookingLimits?: true | undefined;
                                            durationLimits?: true | undefined;
                                            isInstantEvent?: true | undefined;
                                            assignAllTeamMembers?: true | undefined;
                                            useEventTypeDestinationCalendarEmail?: true | undefined;
                                            secondaryEmailId?: true | undefined;
                                            hashedLink?: true | undefined;
                                            destinationCalendar?: true | undefined;
                                            customInputs?: true | undefined;
                                            aiPhoneCallConfig?: true | undefined;
                                            secondaryEmail?: true | undefined;
                                            _count?: true | undefined;
                                        } | undefined;
                                    } | undefined;
                                    requiresConfirmationThreshold?: {
                                        time: number;
                                        unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                    } | undefined;
                                    config?: {
                                        useHostSchedulesForTeamEvent?: boolean | undefined;
                                    } | undefined;
                                    bookerLayouts?: {
                                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                    } | null | undefined;
                                } | null;
                                team?: {
                                    name: string;
                                    id: number;
                                } | null | undefined;
                                id?: number | undefined;
                                slug?: string | undefined;
                                eventName?: string | null | undefined;
                                seatsShowAttendees?: boolean | null | undefined;
                                seatsShowAvailabilityCount?: boolean | null | undefined;
                            };
                            startTime: string;
                            endTime: string;
                            paid: boolean;
                            payment: {
                                success: boolean;
                                currency: string;
                                paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
                                amount: number;
                            }[];
                            location: string | null;
                            title: string;
                            description: string | null;
                            attendees: {
                                email: string;
                                name: string;
                                id: number;
                                timeZone: string;
                                bookingId: number | null;
                                locale: string | null;
                            }[];
                            status: import('../../../prisma-client').$Enums.BookingStatus;
                            rescheduled: boolean | null;
                            user: {
                                email: string;
                                name: string | null;
                                id: number;
                            } | null;
                            id: number;
                            uid: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            customInputs: import('../../../prisma-client').Prisma.JsonValue;
                            recurringEventId: string | null;
                            userPrimaryEmail: string | null;
                            isRecorded: boolean;
                            references: {
                                type: string;
                                id: number;
                                uid: string;
                                credentialId: number | null;
                                deleted: boolean | null;
                                bookingId: number | null;
                                thirdPartyRecurringEventId: string | null;
                                meetingId: string | null;
                                meetingPassword: string | null;
                                meetingUrl: string | null;
                                externalCalendarId: string | null;
                            }[];
                            seatsReferences: {
                                attendee: {
                                    email: string;
                                };
                                referenceUid: string;
                            }[];
                        }[];
                        recurringInfo: {
                            recurringEventId: string | null;
                            count: number;
                            firstDate: Date | null;
                            bookings: {
                                [key: string]: Date[];
                            };
                        }[];
                        nextCursor: number | null;
                    };
                }>;
                requestReschedule: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingId: string;
                        rescheduleReason?: string | undefined;
                    };
                    output: void;
                }>;
                editLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingId: number;
                        newLocation: string;
                        details?: {
                            credentialId?: number | undefined;
                        } | undefined;
                    };
                    output: {
                        message: string;
                    };
                }>;
                confirm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingId: number;
                        confirmed: boolean;
                        recurringEventId?: string | undefined;
                        reason?: string | undefined;
                    };
                    output: {
                        message: string;
                        status: "ACCEPTED" | "REJECTED";
                    } | null;
                }>;
                getBookingAttendees: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        seatReferenceUid: string;
                    };
                    output: number;
                }>;
                find: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        bookingUid?: string | undefined;
                    };
                    output: {
                        booking: {
                            paid: boolean;
                            description: string | null;
                            status: import('../../../prisma-client').$Enums.BookingStatus;
                            id: number;
                            startTime: Date;
                            endTime: Date;
                            eventTypeId: number | null;
                            uid: string;
                        } | null;
                    };
                }>;
                getInstantBookingLocation: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        bookingId: number;
                    };
                    output: {
                        booking: {
                            location: string | null;
                            description: string | null;
                            status: import('../../../prisma-client').$Enums.BookingStatus;
                            id: number;
                            startTime: Date;
                            endTime: Date;
                            eventTypeId: number | null;
                            uid: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                        } | null;
                    };
                }>;
            }>;
            eventTypes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        filters?: {
                            teamIds?: number[] | undefined;
                            upIds?: string[] | undefined;
                        } | undefined;
                        forRoutingForms?: boolean | undefined;
                    } | null | undefined;
                    output: {
                        allUsersAcrossAllEventTypes: Map<number, {
                            username: string | null;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        }>;
                        eventTypeGroups: {
                            eventTypes: {
                                userIds: number[];
                                safeDescription: string | undefined;
                                metadata: {
                                    smartContractAddress?: string | undefined;
                                    blockchainId?: number | undefined;
                                    multipleDuration?: number[] | undefined;
                                    giphyThankYouPage?: string | undefined;
                                    apps?: {
                                        alby?: {
                                            price: number;
                                            currency: string;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                        } | undefined;
                                        basecamp3?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        dailyvideo?: {} | undefined;
                                        fathom?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        feishucalendar?: {} | undefined;
                                        ga4?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        giphy?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            thankYouPage?: string | undefined;
                                        } | undefined;
                                        googlecalendar?: {} | undefined;
                                        gtm?: {
                                            trackingId: string;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        hubspot?: {} | undefined;
                                        intercom?: {} | undefined;
                                        jelly?: {} | undefined;
                                        jitsivideo?: {} | undefined;
                                        larkcalendar?: {} | undefined;
                                        make?: {} | undefined;
                                        matomo?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            MATOMO_URL?: string | undefined;
                                            SITE_ID?: string | undefined;
                                        } | undefined;
                                        metapixel?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        "mock-payment-app"?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        office365calendar?: {
                                            client_id: string;
                                            client_secret: string;
                                        } | undefined;
                                        office365video?: {
                                            client_id: string;
                                            client_secret: string;
                                        } | undefined;
                                        paypal?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        "pipedrive-crm"?: {} | undefined;
                                        plausible?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            PLAUSIBLE_URL?: string | undefined;
                                            trackingId?: string | undefined;
                                        } | undefined;
                                        posthog?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            TRACKING_ID?: string | undefined;
                                            API_HOST?: string | undefined;
                                        } | undefined;
                                        qr_code?: {
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        "routing-forms"?: any;
                                        salesforce?: {} | undefined;
                                        shimmervideo?: {} | undefined;
                                        stripe?: {
                                            price: number;
                                            currency: string;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                            paymentOption?: string | undefined;
                                            enabled?: boolean | undefined;
                                        } | undefined;
                                        tandemvideo?: {} | undefined;
                                        "booking-pages-tag"?: {
                                            trackingId: string;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        "event-type-app-card"?: {
                                            isSunrise: boolean;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        vital?: {} | undefined;
                                        webex?: {} | undefined;
                                        wordpress?: {
                                            isSunrise: boolean;
                                            enabled?: boolean | undefined;
                                            credentialId?: number | undefined;
                                            appCategories?: string[] | undefined;
                                        } | undefined;
                                        zapier?: {} | undefined;
                                        "zoho-bigin"?: {} | undefined;
                                        zohocalendar?: {} | undefined;
                                        zohocrm?: {} | undefined;
                                        zoomvideo?: {} | undefined;
                                    } | undefined;
                                    additionalNotesRequired?: boolean | undefined;
                                    disableSuccessPage?: boolean | undefined;
                                    disableStandardEmails?: {
                                        confirmation?: {
                                            host?: boolean | undefined;
                                            attendee?: boolean | undefined;
                                        } | undefined;
                                    } | undefined;
                                    managedEventConfig?: {
                                        unlockedFields?: {
                                            price?: true | undefined;
                                            bookings?: true | undefined;
                                            webhooks?: true | undefined;
                                            profile?: true | undefined;
                                            owner?: true | undefined;
                                            title?: true | undefined;
                                            description?: true | undefined;
                                            hidden?: true | undefined;
                                            team?: true | undefined;
                                            availability?: true | undefined;
                                            length?: true | undefined;
                                            workflows?: true | undefined;
                                            users?: true | undefined;
                                            hosts?: true | undefined;
                                            currency?: true | undefined;
                                            children?: true | undefined;
                                            schedule?: true | undefined;
                                            timeZone?: true | undefined;
                                            userId?: true | undefined;
                                            metadata?: true | undefined;
                                            position?: true | undefined;
                                            parent?: true | undefined;
                                            slug?: true | undefined;
                                            locations?: true | undefined;
                                            offsetStart?: true | undefined;
                                            profileId?: true | undefined;
                                            teamId?: true | undefined;
                                            eventName?: true | undefined;
                                            parentId?: true | undefined;
                                            bookingFields?: true | undefined;
                                            periodType?: true | undefined;
                                            periodStartDate?: true | undefined;
                                            periodEndDate?: true | undefined;
                                            periodDays?: true | undefined;
                                            periodCountCalendarDays?: true | undefined;
                                            lockTimeZoneToggleOnBookingPage?: true | undefined;
                                            requiresConfirmation?: true | undefined;
                                            requiresBookerEmailVerification?: true | undefined;
                                            recurringEvent?: true | undefined;
                                            disableGuests?: true | undefined;
                                            hideCalendarNotes?: true | undefined;
                                            minimumBookingNotice?: true | undefined;
                                            beforeEventBuffer?: true | undefined;
                                            afterEventBuffer?: true | undefined;
                                            seatsPerTimeSlot?: true | undefined;
                                            onlyShowFirstAvailableSlot?: true | undefined;
                                            seatsShowAttendees?: true | undefined;
                                            seatsShowAvailabilityCount?: true | undefined;
                                            schedulingType?: true | undefined;
                                            scheduleId?: true | undefined;
                                            slotInterval?: true | undefined;
                                            successRedirectUrl?: true | undefined;
                                            forwardParamsSuccessRedirect?: true | undefined;
                                            bookingLimits?: true | undefined;
                                            durationLimits?: true | undefined;
                                            isInstantEvent?: true | undefined;
                                            assignAllTeamMembers?: true | undefined;
                                            useEventTypeDestinationCalendarEmail?: true | undefined;
                                            secondaryEmailId?: true | undefined;
                                            hashedLink?: true | undefined;
                                            destinationCalendar?: true | undefined;
                                            customInputs?: true | undefined;
                                            aiPhoneCallConfig?: true | undefined;
                                            secondaryEmail?: true | undefined;
                                            _count?: true | undefined;
                                        } | undefined;
                                    } | undefined;
                                    requiresConfirmationThreshold?: {
                                        time: number;
                                        unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                    } | undefined;
                                    config?: {
                                        useHostSchedulesForTeamEvent?: boolean | undefined;
                                    } | undefined;
                                    bookerLayouts?: {
                                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                    } | null | undefined;
                                } | null;
                                children: {
                                    users: ({
                                        username: string | null;
                                        name: string | null;
                                        id: number;
                                        avatarUrl: string | null;
                                    } & {
                                        nonProfileUsername: string | null;
                                        profile: import("@calcom/types/UserProfile").UserProfile;
                                    })[];
                                    price: number;
                                    title: string;
                                    description: string | null;
                                    hidden: boolean;
                                    length: number;
                                    currency: string;
                                    id: number;
                                    timeZone: string | null;
                                    userId: number | null;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    position: number;
                                    slug: string;
                                    locations: import('../../../prisma-client').Prisma.JsonValue;
                                    offsetStart: number;
                                    profileId: number | null;
                                    teamId: number | null;
                                    eventName: string | null;
                                    parentId: number | null;
                                    bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                    periodType: import('../../../prisma-client').$Enums.PeriodType;
                                    periodStartDate: Date | null;
                                    periodEndDate: Date | null;
                                    periodDays: number | null;
                                    periodCountCalendarDays: boolean | null;
                                    lockTimeZoneToggleOnBookingPage: boolean;
                                    requiresConfirmation: boolean;
                                    requiresBookerEmailVerification: boolean;
                                    recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                    disableGuests: boolean;
                                    hideCalendarNotes: boolean;
                                    minimumBookingNotice: number;
                                    beforeEventBuffer: number;
                                    afterEventBuffer: number;
                                    seatsPerTimeSlot: number | null;
                                    onlyShowFirstAvailableSlot: boolean;
                                    seatsShowAttendees: boolean | null;
                                    seatsShowAvailabilityCount: boolean | null;
                                    schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                    scheduleId: number | null;
                                    slotInterval: number | null;
                                    successRedirectUrl: string | null;
                                    forwardParamsSuccessRedirect: boolean | null;
                                    bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                    durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                    isInstantEvent: boolean;
                                    assignAllTeamMembers: boolean;
                                    useEventTypeDestinationCalendarEmail: boolean;
                                    secondaryEmailId: number | null;
                                }[];
                                price: number;
                                title: string;
                                description: string | null;
                                hidden: boolean;
                                length: number;
                                hosts: ({
                                    user: {
                                        username: string | null;
                                        name: string | null;
                                        id: number;
                                        avatarUrl: string | null;
                                    };
                                } & {
                                    eventTypeId: number;
                                    userId: number;
                                    isFixed: boolean;
                                    priority: number | null;
                                })[];
                                currency: string;
                                id: number;
                                timeZone: string | null;
                                userId: number | null;
                                position: number;
                                slug: string;
                                locations: import('../../../prisma-client').Prisma.JsonValue;
                                offsetStart: number;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                periodType: import('../../../prisma-client').$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                isInstantEvent: boolean;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                secondaryEmailId: number | null;
                                hashedLink: {
                                    link: string;
                                    id: number;
                                    eventTypeId: number;
                                } | null;
                                aiPhoneCallConfig: {
                                    enabled: boolean;
                                    id: number;
                                    eventTypeId: number;
                                    yourPhoneNumber: string;
                                    numberToCall: string;
                                    guestName: string;
                                    guestEmail: string | null;
                                    guestCompany: string | null;
                                    generalPrompt: string;
                                    beginMessage: string | null;
                                    llmId: string | null;
                                } | null;
                            }[];
                            teamId?: number | null | undefined;
                            parentId?: number | null | undefined;
                            bookerUrl: string;
                            membershipRole?: import('../../../prisma/enums').MembershipRole | null | undefined;
                            profile: {
                                slug: string | null;
                                name: string | null;
                                image: string;
                                eventTypesLockedByOrg?: boolean | undefined;
                            };
                            metadata: {
                                membershipCount: number;
                                readOnly: boolean;
                            };
                        }[];
                        profiles: {
                            teamId: number | null | undefined;
                            membershipRole: import('../../../prisma/enums').MembershipRole | null | undefined;
                            membershipCount: number;
                            readOnly: boolean;
                            slug: string | null;
                            name: string | null;
                            image: string;
                            eventTypesLockedByOrg?: boolean | undefined;
                        }[];
                    };
                }>;
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        title: string;
                        description: string | null;
                        hidden: boolean;
                        length: number;
                        id: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string;
                        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                    }[];
                }>;
                listWithTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        title: string;
                        team: {
                            name: string;
                            id: number;
                        } | null;
                        id: number;
                        slug: string;
                    }[];
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        title: string;
                        length: number;
                        slug: string;
                        description?: string | null | undefined;
                        hidden?: boolean | undefined;
                        metadata?: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        } | null | undefined;
                        locations?: {
                            type: string;
                            address?: string | undefined;
                            link?: string | undefined;
                            displayLocationPublicly?: boolean | undefined;
                            hostPhoneNumber?: string | undefined;
                            credentialId?: number | undefined;
                            teamName?: string | undefined;
                        }[] | undefined;
                        teamId?: number | null | undefined;
                        disableGuests?: boolean | undefined;
                        minimumBookingNotice?: number | undefined;
                        beforeEventBuffer?: number | undefined;
                        afterEventBuffer?: number | undefined;
                        schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                        slotInterval?: number | null | undefined;
                    };
                    output: {
                        eventType: {
                            price: number;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            length: number;
                            currency: string;
                            id: number;
                            timeZone: string | null;
                            userId: number | null;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            position: number;
                            slug: string;
                            locations: import('../../../prisma-client').Prisma.JsonValue;
                            offsetStart: number;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                            periodType: import('../../../prisma-client').$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                            durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                            isInstantEvent: boolean;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            secondaryEmailId: number | null;
                        };
                    };
                }>;
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id: number;
                        users?: number[] | undefined;
                    };
                    output: {
                        eventType: {
                            schedule: number | null;
                            scheduleName: string | null;
                            recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                            bookingLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                            durationLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                            locations: import('../../../app-store/locations').LocationObject[];
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {} | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {} | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {} | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {} | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {} | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        price?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        profile?: true | undefined;
                                        owner?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        hidden?: true | undefined;
                                        team?: true | undefined;
                                        availability?: true | undefined;
                                        length?: true | undefined;
                                        workflows?: true | undefined;
                                        users?: true | undefined;
                                        hosts?: true | undefined;
                                        currency?: true | undefined;
                                        children?: true | undefined;
                                        schedule?: true | undefined;
                                        timeZone?: true | undefined;
                                        userId?: true | undefined;
                                        metadata?: true | undefined;
                                        position?: true | undefined;
                                        parent?: true | undefined;
                                        slug?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hashedLink?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        customInputs?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                    defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                } | null | undefined;
                            };
                            customInputs: {
                                required: boolean;
                                label: string;
                                placeholder: string;
                                type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                                id: number;
                                eventTypeId: number;
                                options?: {
                                    label: string;
                                    type: string;
                                }[] | null | undefined;
                                hasToBeCreated?: boolean | undefined;
                            }[];
                            users: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                avatarUrl: string | null;
                                locale: string | null;
                            }[];
                            bookerUrl: string;
                            children: {
                                owner: {
                                    avatar: string;
                                    email: string;
                                    name: string;
                                    username: string;
                                    membership: import('../../../prisma-client').$Enums.MembershipRole;
                                    id: number;
                                    avatarUrl: string | null;
                                    nonProfileUsername: string | null;
                                    profile: import("@calcom/types/UserProfile").UserProfile;
                                };
                                created: boolean;
                                hidden: boolean;
                                slug: string;
                            }[];
                            price: number;
                            webhooks: {
                                active: boolean;
                                secret: string | null;
                                id: string;
                                eventTypeId: number | null;
                                subscriberUrl: string;
                                payloadTemplate: string | null;
                                eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                            }[];
                            owner: {
                                id: number;
                            } | null;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            team: {
                                members: {
                                    role: import('../../../prisma-client').$Enums.MembershipRole;
                                    user: {
                                        username: string | null;
                                        email: string;
                                        name: string | null;
                                        id: number;
                                        defaultScheduleId: number | null;
                                        avatarUrl: string | null;
                                        locale: string | null;
                                        eventTypes: {
                                            slug: string;
                                        }[];
                                    };
                                    accepted: boolean;
                                }[];
                                name: string;
                                id: number;
                                parent: {
                                    slug: string | null;
                                    organizationSettings: {
                                        lockEventTypeCreationForUsers: boolean;
                                    } | null;
                                } | null;
                                slug: string | null;
                                parentId: number | null;
                            } | null;
                            length: number;
                            workflows: ({
                                workflow: {
                                    team: {
                                        members: {
                                            role: import('../../../prisma-client').$Enums.MembershipRole;
                                            id: number;
                                            userId: number;
                                            teamId: number;
                                            disableImpersonation: boolean;
                                            accepted: boolean;
                                        }[];
                                        name: string;
                                        id: number;
                                        slug: string | null;
                                    } | null;
                                    activeOn: {
                                        eventType: {
                                            title: string;
                                            id: number;
                                            parentId: number | null;
                                            _count: {
                                                children: number;
                                            };
                                        };
                                    }[];
                                    steps: {
                                        action: import('../../../prisma-client').$Enums.WorkflowActions;
                                        id: number;
                                        template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                                        stepNumber: number;
                                        workflowId: number;
                                        sendTo: string | null;
                                        reminderBody: string | null;
                                        emailSubject: string | null;
                                        numberRequired: boolean | null;
                                        sender: string | null;
                                        numberVerificationPending: boolean;
                                        includeCalendarEvent: boolean;
                                    }[];
                                } & {
                                    name: string;
                                    trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                                    id: number;
                                    userId: number | null;
                                    time: number | null;
                                    position: number;
                                    teamId: number | null;
                                    timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                                };
                            } & {
                                id: number;
                                eventTypeId: number;
                                workflowId: number;
                            })[];
                            hosts: {
                                userId: number;
                                isFixed: boolean;
                                priority: number | null;
                            }[];
                            currency: string;
                            id: number;
                            timeZone: string | null;
                            userId: number | null;
                            parent: {
                                teamId: number | null;
                            } | null;
                            slug: string;
                            offsetStart: number;
                            teamId: number | null;
                            eventName: string | null;
                            bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                            periodType: import('../../../prisma-client').$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            isInstantEvent: boolean;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            secondaryEmailId: number | null;
                            hashedLink: {
                                link: string;
                                id: number;
                                eventTypeId: number;
                            } | null;
                            destinationCalendar: {
                                id: number;
                                eventTypeId: number | null;
                                credentialId: number | null;
                                externalId: string;
                                userId: number | null;
                                integration: string;
                                primaryEmail: string | null;
                            } | null;
                            aiPhoneCallConfig: {
                                enabled: boolean;
                                id: number;
                                eventTypeId: number;
                                yourPhoneNumber: string;
                                numberToCall: string;
                                guestName: string;
                                guestEmail: string | null;
                                guestCompany: string | null;
                                generalPrompt: string;
                                beginMessage: string | null;
                                llmId: string | null;
                            } | null;
                        } & {
                            users: ({
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                avatarUrl: string | null;
                                locale: string | null;
                            } & {
                                avatar: string;
                            })[];
                            periodStartDate: string | null;
                            periodEndDate: string | null;
                            bookingFields: {
                                name: string;
                                type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                options?: {
                                    label: string;
                                    value: string;
                                }[] | undefined;
                                required?: boolean | undefined;
                                label?: string | undefined;
                                placeholder?: string | undefined;
                                defaultLabel?: string | undefined;
                                defaultPlaceholder?: string | undefined;
                                labelAsSafeHtml?: string | undefined;
                                getOptionsAt?: string | undefined;
                                optionsInputs?: Record<string, {
                                    type: "text" | "address" | "phone";
                                    required?: boolean | undefined;
                                    placeholder?: string | undefined;
                                }> | undefined;
                                variant?: string | undefined;
                                variantsConfig?: {
                                    variants: Record<string, {
                                        fields: {
                                            name: string;
                                            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                            required?: boolean | undefined;
                                            label?: string | undefined;
                                            placeholder?: string | undefined;
                                            labelAsSafeHtml?: string | undefined;
                                        }[];
                                    }>;
                                } | undefined;
                                views?: {
                                    label: string;
                                    id: string;
                                    description?: string | undefined;
                                }[] | undefined;
                                hideWhenJustOneOption?: boolean | undefined;
                                hidden?: boolean | undefined;
                                editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                                sources?: {
                                    label: string;
                                    type: string;
                                    id: string;
                                    editUrl?: string | undefined;
                                    fieldRequired?: boolean | undefined;
                                }[] | undefined;
                            }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                        };
                        locationOptions: {
                            label: string;
                            options: {
                                label: string;
                                value: string;
                                disabled?: boolean | undefined;
                                icon?: string | undefined;
                                slug?: string | undefined;
                            }[];
                        }[];
                        destinationCalendar: {
                            id: number;
                            eventTypeId: number | null;
                            credentialId: number | null;
                            externalId: string;
                            userId: number | null;
                            integration: string;
                            primaryEmail: string | null;
                        } | null;
                        team: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                user: {
                                    username: string | null;
                                    email: string;
                                    name: string | null;
                                    id: number;
                                    defaultScheduleId: number | null;
                                    avatarUrl: string | null;
                                    locale: string | null;
                                    eventTypes: {
                                        slug: string;
                                    }[];
                                };
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            parent: {
                                slug: string | null;
                                organizationSettings: {
                                    lockEventTypeCreationForUsers: boolean;
                                } | null;
                            } | null;
                            slug: string | null;
                            parentId: number | null;
                        } | null;
                        teamMembers: {
                            profileId: number | null;
                            eventTypes: string[];
                            membership: import('../../../prisma-client').$Enums.MembershipRole;
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            avatarUrl: string | null;
                            locale: string | null;
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                            avatar: string;
                        }[];
                        currentUserMembership: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            user: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                avatarUrl: string | null;
                                locale: string | null;
                                eventTypes: {
                                    slug: string;
                                }[];
                            };
                            accepted: boolean;
                        } | null;
                        isUserOrganizationAdmin: boolean;
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        users?: (number[] & (string | number)[]) | undefined;
                        price?: number | undefined;
                        title?: string | undefined;
                        description?: string | null | undefined;
                        hidden?: boolean | undefined;
                        length?: number | undefined;
                        hosts?: {
                            userId: number;
                            profileId?: number | null | undefined;
                            isFixed?: boolean | undefined;
                            priority?: number | null | undefined;
                        }[] | undefined;
                        currency?: string | undefined;
                        children?: {
                            owner: {
                                email: string;
                                name: string;
                                id: number;
                                eventTypeSlugs: string[];
                            };
                            hidden: boolean;
                        }[] | undefined;
                        schedule?: number | null | undefined;
                        timeZone?: string | null | undefined;
                        userId?: number | null | undefined;
                        metadata?: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        } | null | undefined;
                        position?: number | undefined;
                        slug?: string | undefined;
                        locations?: {
                            type: string;
                            address?: string | undefined;
                            link?: string | undefined;
                            displayLocationPublicly?: boolean | undefined;
                            hostPhoneNumber?: string | undefined;
                            credentialId?: number | undefined;
                            teamName?: string | undefined;
                        }[] | undefined;
                        offsetStart?: number | undefined;
                        profileId?: number | null | undefined;
                        teamId?: number | null | undefined;
                        eventName?: string | null | undefined;
                        parentId?: number | null | undefined;
                        bookingFields?: {
                            name: string;
                            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                            options?: {
                                label: string;
                                value: string;
                            }[] | undefined;
                            required?: boolean | undefined;
                            label?: string | undefined;
                            placeholder?: string | undefined;
                            defaultLabel?: string | undefined;
                            defaultPlaceholder?: string | undefined;
                            labelAsSafeHtml?: string | undefined;
                            getOptionsAt?: string | undefined;
                            optionsInputs?: Record<string, {
                                type: "text" | "address" | "phone";
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                            }> | undefined;
                            variant?: string | undefined;
                            variantsConfig?: {
                                variants: Record<string, {
                                    fields: {
                                        name: string;
                                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                        required?: boolean | undefined;
                                        label?: string | undefined;
                                        placeholder?: string | undefined;
                                        labelAsSafeHtml?: string | undefined;
                                    }[];
                                }>;
                            } | undefined;
                            views?: {
                                label: string;
                                id: string;
                                description?: string | undefined;
                            }[] | undefined;
                            hideWhenJustOneOption?: boolean | undefined;
                            hidden?: boolean | undefined;
                            editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                            sources?: {
                                label: string;
                                type: string;
                                id: string;
                                editUrl?: string | undefined;
                                fieldRequired?: boolean | undefined;
                            }[] | undefined;
                        }[] | undefined;
                        periodType?: "UNLIMITED" | "ROLLING" | "ROLLING_WINDOW" | "RANGE" | undefined;
                        periodStartDate?: Date | null | undefined;
                        periodEndDate?: Date | null | undefined;
                        periodDays?: number | null | undefined;
                        periodCountCalendarDays?: boolean | null | undefined;
                        lockTimeZoneToggleOnBookingPage?: boolean | undefined;
                        requiresConfirmation?: boolean | undefined;
                        requiresBookerEmailVerification?: boolean | undefined;
                        recurringEvent?: {
                            interval: number;
                            count: number;
                            freq: import('../../../prisma/zod-utils').Frequency;
                            dtstart?: Date | undefined;
                            until?: Date | undefined;
                            tzid?: string | undefined;
                        } | null | undefined;
                        disableGuests?: boolean | undefined;
                        hideCalendarNotes?: boolean | undefined;
                        minimumBookingNotice?: number | undefined;
                        beforeEventBuffer?: number | undefined;
                        afterEventBuffer?: number | undefined;
                        seatsPerTimeSlot?: number | null | undefined;
                        onlyShowFirstAvailableSlot?: boolean | undefined;
                        seatsShowAttendees?: boolean | null | undefined;
                        seatsShowAvailabilityCount?: boolean | null | undefined;
                        schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                        scheduleId?: number | null | undefined;
                        slotInterval?: number | null | undefined;
                        successRedirectUrl?: string | null | undefined;
                        forwardParamsSuccessRedirect?: boolean | null | undefined;
                        bookingLimits?: {
                            PER_DAY?: number | undefined;
                            PER_WEEK?: number | undefined;
                            PER_MONTH?: number | undefined;
                            PER_YEAR?: number | undefined;
                        } | null | undefined;
                        durationLimits?: {
                            PER_DAY?: number | undefined;
                            PER_WEEK?: number | undefined;
                            PER_MONTH?: number | undefined;
                            PER_YEAR?: number | undefined;
                        } | null | undefined;
                        isInstantEvent?: boolean | undefined;
                        assignAllTeamMembers?: boolean | undefined;
                        useEventTypeDestinationCalendarEmail?: boolean | undefined;
                        secondaryEmailId?: number | null | undefined;
                        hashedLink?: string | undefined;
                        destinationCalendar?: {
                            externalId: string;
                            integration: string;
                        } | null | undefined;
                        customInputs?: {
                            required: boolean;
                            label: string;
                            placeholder: string;
                            type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                            id: number;
                            eventTypeId: number;
                            options?: {
                                label: string;
                                type: string;
                            }[] | null | undefined;
                            hasToBeCreated?: boolean | undefined;
                        }[] | undefined;
                        aiPhoneCallConfig?: {
                            enabled: boolean;
                            generalPrompt: string;
                            beginMessage: string | null;
                            yourPhoneNumber?: string | undefined;
                            numberToCall?: string | undefined;
                            guestName?: string | undefined;
                            guestEmail?: string | null | undefined;
                            guestCompany?: string | null | undefined;
                        } | undefined;
                        calAiPhoneScript?: string | undefined;
                    };
                    output: {
                        eventType: {
                            title: string;
                            team: {
                                members: {
                                    role: import('../../../prisma-client').$Enums.MembershipRole;
                                    user: {
                                        email: string;
                                        name: string | null;
                                        id: number;
                                        eventTypes: {
                                            slug: string;
                                        }[];
                                    };
                                    accepted: boolean;
                                }[];
                                name: string;
                                id: number;
                                parent: {
                                    slug: string | null;
                                } | null;
                                slug: string | null;
                                parentId: number | null;
                            } | null;
                            workflows: {
                                workflowId: number;
                            }[];
                            children: {
                                userId: number | null;
                            }[];
                            aiPhoneCallConfig: {
                                enabled: boolean;
                                generalPrompt: string;
                                beginMessage: string | null;
                                llmId: string | null;
                            } | null;
                        };
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        users?: number[] | undefined;
                    };
                    output: {
                        id: number;
                    };
                }>;
                duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        users?: number[] | undefined;
                        title: string;
                        description: string;
                        length: number;
                        slug: string;
                    };
                    output: {
                        eventType: {
                            price: number;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            length: number;
                            currency: string;
                            id: number;
                            timeZone: string | null;
                            userId: number | null;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            position: number;
                            slug: string;
                            locations: import('../../../prisma-client').Prisma.JsonValue;
                            offsetStart: number;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                            periodType: import('../../../prisma-client').$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                            durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                            isInstantEvent: boolean;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            secondaryEmailId: number | null;
                        };
                    };
                }>;
                bulkEventFetch: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        eventTypes: {
                            logo: string | undefined;
                            title: string;
                            id: number;
                            locations: import('../../../prisma-client').Prisma.JsonValue;
                        }[];
                    };
                }>;
                bulkUpdateToDefaultLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeIds: number[];
                    };
                    output: import('../../../prisma-client/runtime/library').GetBatchResult;
                }>;
            }>;
            availability: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        schedules: {
                            isDefault: boolean;
                            name: string;
                            availability: {
                                days: number[];
                                date: Date | null;
                                id: number;
                                startTime: Date;
                                endTime: Date;
                                eventTypeId: number | null;
                                userId: number | null;
                                scheduleId: number | null;
                            }[];
                            id: number;
                            timeZone: string | null;
                        }[];
                    };
                }>;
                user: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        username: string;
                        dateFrom: string;
                        dateTo: string;
                        eventTypeId?: string | number | undefined;
                        withSource?: boolean | undefined;
                    };
                    output: {
                        busy: import("@calcom/types/Calendar").EventBusyDetails[];
                        timeZone: string;
                        dateRanges: import('../../../lib/date-ranges').DateRange[];
                        oooExcludedDateRanges: import('../../../lib/date-ranges').DateRange[];
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        dateOverrides: import("@calcom/types/schedule").TimeRange[];
                        currentSeats: {
                            uid: string;
                            startTime: Date;
                            _count: {
                                attendees: number;
                            };
                        }[] | null;
                        datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                    };
                }>;
                listTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        limit: number;
                        loggedInUsersTz: string;
                        startDate: string;
                        endDate: string;
                        cursor?: number | null | undefined;
                        teamId?: number | undefined;
                    };
                    output: {
                        rows: ({
                            id: number;
                            organizationId: number | null;
                            name: string | null;
                            username: string | null;
                            email: string;
                            timeZone: string;
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            defaultScheduleId: number;
                            dateRanges: import('../../../lib/date-ranges').DateRange[];
                            avatarUrl?: undefined;
                            profile?: undefined;
                        } | {
                            id: number;
                            username: string | null;
                            email: string;
                            avatarUrl: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                            organizationId: number | null;
                            name: string | null;
                            timeZone: string;
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            defaultScheduleId: number;
                            dateRanges: import('../../../lib/date-ranges').DateRange[];
                        })[];
                        nextCursor: number | undefined;
                        meta: {
                            totalRowCount: number;
                        };
                    };
                }>;
                schedule: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                    ctx: import("../createContext").InnerContext;
                    meta: object;
                    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T = unknown>(string: string) => T;
                        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>, {
                    get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: {
                            scheduleId?: number | undefined;
                            isManagedEventType?: boolean | undefined;
                        };
                        output: import('../../../lib').ScheduleWithAvailabilitiesForWeb;
                    }>;
                    create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            name: string;
                            schedule?: {
                                start: Date;
                                end: Date;
                            }[][] | undefined;
                            eventTypeId?: number | undefined;
                        };
                        output: {
                            schedule: {
                                name: string;
                                id: number;
                                timeZone: string | null;
                                userId: number;
                            };
                        };
                    }>;
                    delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            scheduleId: number;
                        };
                        output: void;
                    }>;
                    update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            scheduleId: number;
                            timeZone?: string | undefined;
                            name?: string | undefined;
                            isDefault?: boolean | undefined;
                            schedule?: {
                                start: Date;
                                end: Date;
                            }[][] | undefined;
                            dateOverrides?: {
                                start: Date;
                                end: Date;
                            }[] | undefined;
                        };
                        output: {
                            schedule: {
                                name: string;
                                id: number;
                                userId: number;
                            };
                            isDefault: boolean;
                            availability?: undefined;
                            timeZone?: undefined;
                            prevDefaultId?: undefined;
                            currentDefaultId?: undefined;
                        } | {
                            schedule: {
                                name: string;
                                availability: {
                                    days: number[];
                                    date: Date | null;
                                    id: number;
                                    startTime: Date;
                                    endTime: Date;
                                    eventTypeId: number | null;
                                    userId: number | null;
                                    scheduleId: number | null;
                                }[];
                                eventType: {
                                    id: number;
                                    eventName: string | null;
                                }[];
                                id: number;
                                timeZone: string | null;
                                userId: number;
                            };
                            availability: import("@calcom/types/schedule").Schedule;
                            timeZone: string;
                            isDefault: boolean;
                            prevDefaultId: number | null;
                            currentDefaultId: number | null;
                        };
                    }>;
                    duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            scheduleId: number;
                        };
                        output: {
                            schedule: {
                                name: string;
                                id: number;
                                timeZone: string | null;
                                userId: number;
                            };
                        };
                    }>;
                    getScheduleByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: {
                            userId?: number | undefined;
                        };
                        output: {
                            hasDefaultSchedule: boolean;
                            name: string;
                            id: number;
                            isManaged: boolean;
                            workingHours: import("@calcom/types/schedule").WorkingHours[];
                            schedule: {
                                id: number;
                                userId: number | null;
                                eventTypeId: number | null;
                                days: number[];
                                startTime: Date;
                                endTime: Date;
                                date: Date | null;
                                scheduleId: number | null;
                            }[];
                            availability: {
                                end: Date;
                                userId?: number | null | undefined;
                                start: Date;
                            }[][];
                            timeZone: string;
                            dateOverrides: {
                                ranges: import("@calcom/types/schedule").TimeRange[];
                            }[];
                            isDefault: boolean;
                            isLastSchedule: boolean;
                            readOnly: boolean;
                        } | {
                            id: number;
                            name: string;
                            availability: never[][];
                            dateOverrides: never[];
                            timeZone: string;
                            workingHours: never[];
                            isDefault: boolean;
                            hasDefaultSchedule: boolean;
                        };
                    }>;
                    getScheduleByEventSlug: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: {
                            eventSlug: string;
                        };
                        output: import('../../../lib').ScheduleWithAvailabilitiesForWeb | {
                            id: number;
                            name: string;
                            availability: never[][];
                            dateOverrides: never[];
                            timeZone: string;
                            workingHours: never[];
                            isDefault: boolean;
                        };
                    }>;
                    bulkUpdateToDefaultAvailability: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            eventTypeIds: number[];
                        };
                        output: import('../../../prisma-client/runtime/library').GetBatchResult;
                    }>;
                }>;
                calendarOverlay: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        loggedInUsersTz: string;
                        dateFrom: string | null;
                        dateTo: string | null;
                        calendarsToLoad: {
                            credentialId: number;
                            externalId: string;
                        }[];
                    };
                    output: import("@calcom/types/Calendar").EventBusyDate[];
                }>;
            }>;
            teams: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number;
                        isOrg?: boolean | undefined;
                    };
                    output: {
                        members: {
                            username: string | null;
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                            organizationId: number | null;
                            organization: any;
                            accepted: boolean;
                            disableImpersonation: boolean;
                            subteams: (string | null)[] | null;
                            bookerUrl: string;
                            connectedApps: {
                                name: any;
                                logo: any;
                                app: {
                                    categories: import('../../../prisma-client').$Enums.AppCategories[];
                                    slug: string;
                                } | null;
                                externalId: string | null;
                            }[] | null;
                            email: string;
                            name: string | null;
                            teams: {
                                team: {
                                    id: number;
                                    slug: string | null;
                                };
                            }[];
                            bio: string | null;
                            id: number;
                            avatarUrl: string | null;
                            nonProfileUsername: string | null;
                        }[];
                        safeBio: string;
                        membership: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            accepted: boolean;
                        };
                        inviteToken: {
                            expires: Date;
                            identifier: string;
                            token: string;
                            expiresInDays: number | null;
                        } | undefined;
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        };
                        eventTypes: {
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {} | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {} | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {} | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {} | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {} | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        price?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        profile?: true | undefined;
                                        owner?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        hidden?: true | undefined;
                                        team?: true | undefined;
                                        availability?: true | undefined;
                                        length?: true | undefined;
                                        workflows?: true | undefined;
                                        users?: true | undefined;
                                        hosts?: true | undefined;
                                        currency?: true | undefined;
                                        children?: true | undefined;
                                        schedule?: true | undefined;
                                        timeZone?: true | undefined;
                                        userId?: true | undefined;
                                        metadata?: true | undefined;
                                        position?: true | undefined;
                                        parent?: true | undefined;
                                        slug?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hashedLink?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        customInputs?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                    defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                } | null | undefined;
                            } | null;
                            users: ({
                                username: string | null;
                                email: string;
                                name: string | null;
                                teams: {
                                    team: {
                                        id: number;
                                        slug: string | null;
                                    };
                                }[];
                                bio: string | null;
                                id: number;
                                avatarUrl: string | null;
                                credentials: {
                                    app: {
                                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                                        slug: string;
                                    } | null;
                                    destinationCalendars: {
                                        externalId: string;
                                    }[];
                                }[];
                            } & {
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            })[];
                            price: number;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            length: number;
                            hosts: {
                                user: {
                                    username: string | null;
                                    email: string;
                                    name: string | null;
                                    teams: {
                                        team: {
                                            id: number;
                                            slug: string | null;
                                        };
                                    }[];
                                    bio: string | null;
                                    id: number;
                                    avatarUrl: string | null;
                                    credentials: {
                                        app: {
                                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                                            slug: string;
                                        } | null;
                                        destinationCalendars: {
                                            externalId: string;
                                        }[];
                                    }[];
                                };
                            }[];
                            currency: string;
                            id: number;
                            slug: string;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                        }[] | null;
                        logo?: string | undefined;
                        name: string;
                        bio: string | null;
                        theme: string | null;
                        children: {
                            name: string;
                            slug: string | null;
                        }[];
                        id: number;
                        parent: {
                            name: string;
                            id: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            logoUrl: string | null;
                            isPrivate: boolean;
                            isOrganization: boolean;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        isOrganization: boolean;
                    };
                }>;
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        includeOrgs?: boolean | undefined;
                    } | undefined;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        inviteToken: {
                            expires: Date;
                            identifier: string;
                            id: number;
                            teamId: number | null;
                            secondaryEmailId: number | null;
                            token: string;
                            createdAt: Date;
                            updatedAt: Date;
                            expiresInDays: number | null;
                        } | undefined;
                        name: string;
                        id: number;
                        parent: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        isOrganization: boolean;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        accepted: boolean;
                    }[];
                }>;
                listOwnedTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        inviteToken: {
                            expires: Date;
                            identifier: string;
                            id: number;
                            teamId: number | null;
                            secondaryEmailId: number | null;
                            token: string;
                            createdAt: Date;
                            updatedAt: Date;
                            expiresInDays: number | null;
                        } | undefined;
                        name: string;
                        id: number;
                        parent: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        isOrganization: boolean;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        accepted: boolean;
                    }[];
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        slug: string;
                        logo?: string | null | undefined;
                    };
                    output: {
                        url: string;
                        message: string;
                        team: null;
                    } | {
                        url: string;
                        message: string;
                        team: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        bio?: string | undefined;
                        name?: string | undefined;
                        logo?: string | null | undefined;
                        slug?: string | undefined;
                        hideBranding?: boolean | undefined;
                        hideBookATeamMember?: boolean | undefined;
                        isPrivate?: boolean | undefined;
                        brandColor?: string | undefined;
                        darkBrandColor?: string | undefined;
                        theme?: string | null | undefined;
                    };
                    output: {
                        logoUrl: string | null;
                        name: string;
                        bio: string | null;
                        slug: string | null;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                    } | undefined;
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                    };
                    output: void;
                }>;
                removeMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                        memberId: number;
                        isOrg?: boolean | undefined;
                    };
                    output: void;
                }>;
                inviteMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        role: "ADMIN" | "MEMBER" | "OWNER";
                        language: string;
                        teamId: number;
                        usernameOrEmail: (string | string[]) & (string | string[] | undefined);
                        isOrg?: boolean | undefined;
                    };
                    output: {
                        role: "ADMIN" | "MEMBER" | "OWNER";
                        language: string;
                        teamId: number;
                        isOrg: boolean;
                        usernameOrEmail: (string | string[]) & (string | string[] | undefined);
                    };
                }>;
                acceptOrLeave: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        accept: boolean;
                        teamId: number;
                    };
                    output: void;
                }>;
                changeMemberRole: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        role: "ADMIN" | "MEMBER" | "OWNER";
                        teamId: number;
                        memberId: number;
                    };
                    output: void;
                }>;
                getMemberAvailability: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        timezone: string;
                        dateFrom: string;
                        dateTo: string;
                        teamId: number;
                        memberId: number;
                    };
                    output: {
                        busy: import("@calcom/types/Calendar").EventBusyDetails[];
                        timeZone: string;
                        dateRanges: import('../../../lib/date-ranges').DateRange[];
                        oooExcludedDateRanges: import('../../../lib/date-ranges').DateRange[];
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        dateOverrides: import("@calcom/types/schedule").TimeRange[];
                        currentSeats: {
                            uid: string;
                            startTime: Date;
                            _count: {
                                attendees: number;
                            };
                        }[] | null;
                        datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                    };
                }>;
                getMembershipbyUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number;
                        memberId: number;
                    };
                    output: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    } | null;
                }>;
                updateMembership: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                        disableImpersonation: boolean;
                        memberId: number;
                    };
                    output: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    };
                }>;
                publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                    };
                    output: {
                        url: string;
                        message: string;
                    };
                }>;
                getUpgradeable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: ({
                        team: {
                            children: {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            }[];
                        } & {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                }>;
                listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamIds?: number[] | undefined;
                    };
                    output: ({
                        username: string | null;
                        name: string | null;
                        id: number;
                    } & {
                        accepted: boolean;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    })[];
                }>;
                hasTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        hasTeamPlan: boolean;
                    };
                }>;
                listInvites: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                }>;
                createInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                        token?: string | undefined;
                    };
                    output: {
                        token: string;
                        inviteLink: string;
                    };
                }>;
                setInviteExpiration: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        token: string;
                        expiresInDays?: number | undefined;
                    };
                    output: void;
                }>;
                deleteInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        token: string;
                    };
                    output: void;
                }>;
                inviteMemberByToken: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        token: string;
                    };
                    output: string;
                }>;
                hasEditPermissionForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        memberId: number;
                    };
                    output: boolean;
                }>;
                resendInvitation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        language: string;
                        teamId: number;
                        isOrg?: boolean | undefined;
                    };
                    output: {
                        email: string;
                        language: string;
                        teamId: number;
                        isOrg: boolean;
                    };
                }>;
            }>;
            timezones: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                cityTimezones: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        city: string;
                        timezone: string;
                        pop: number;
                    }[];
                }>;
            }>;
            organizations: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        slug: string;
                        orgOwnerEmail: string;
                        language?: string | undefined;
                        seats?: number | undefined;
                        pricePerSeat?: number | undefined;
                        isPlatform?: boolean | undefined;
                    };
                    output: {
                        userId: number;
                        email: string;
                        organizationId: number;
                        upId: string;
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name?: string | undefined;
                        orgId?: string | number | undefined;
                        bio?: string | undefined;
                        logoUrl?: string | null | undefined;
                        calVideoLogo?: string | null | undefined;
                        banner?: string | null | undefined;
                        slug?: string | undefined;
                        hideBranding?: boolean | undefined;
                        hideBookATeamMember?: boolean | undefined;
                        brandColor?: string | undefined;
                        darkBrandColor?: string | undefined;
                        theme?: string | null | undefined;
                        timeZone?: string | undefined;
                        weekStart?: string | undefined;
                        timeFormat?: number | undefined;
                        metadata?: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | undefined;
                        lockEventTypeCreation?: boolean | undefined;
                        lockEventTypeCreationOptions?: "DELETE" | "HIDE" | undefined;
                        adminGetsNoSlotsNotification?: boolean | undefined;
                    };
                    output: {
                        update: boolean;
                        userId: number;
                        data: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    };
                }>;
                verifyCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        code: string;
                    };
                    output: true;
                }>;
                createTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        orgId: number;
                        teamNames: string[];
                        moveTeams: {
                            id: number;
                            newSlug: string | null;
                            shouldMove: boolean;
                        }[];
                    };
                    output: {
                        duplicatedSlugs: string[];
                    };
                }>;
                listCurrent: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        canAdminImpersonate: boolean;
                        organizationSettings: {
                            lockEventTypeCreationForUsers: boolean | undefined;
                            adminGetsNoSlotsNotification: boolean | undefined;
                        };
                        user: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            accepted: boolean;
                        };
                    };
                }>;
                checkIfOrgNeedsUpgrade: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: ({
                        team: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                }>;
                publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: {
                        url: string;
                        message: string;
                    };
                }>;
                setPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        newPassword: string;
                    };
                    output: {
                        update: boolean;
                    };
                }>;
                getMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamIdToExclude?: number | undefined;
                        accepted?: boolean | undefined;
                        distinctUser?: boolean | undefined;
                    };
                    output: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        user: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            completedOnboarding: boolean;
                        };
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                }>;
                listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        limit: number;
                        cursor?: number | null | undefined;
                        searchTerm?: string | undefined;
                    };
                    output: {
                        canUserGetMembers: boolean;
                        rows: never[];
                        meta: {
                            totalRowCount: number;
                        };
                        nextCursor?: undefined;
                    } | {
                        rows: {
                            id: number;
                            username: string | null;
                            email: string;
                            timeZone: string;
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            accepted: boolean;
                            disableImpersonation: boolean;
                            completedOnboarding: boolean;
                            avatarUrl: string | null;
                            teams: ({
                                id: number;
                                name: string;
                                slug: string | null;
                            } | undefined)[];
                        }[];
                        nextCursor: number | undefined;
                        meta: {
                            totalRowCount: number;
                        };
                        canUserGetMembers?: undefined;
                    };
                }>;
                getBrand: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        slug: string;
                        fullDomain: string;
                        domainSuffix: string;
                        name: string;
                        logoUrl: string | null;
                    } | null;
                }>;
                getUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        userId?: number | undefined;
                    };
                    output: {
                        teams: {
                            accepted: boolean;
                            name: string;
                            id: number;
                        }[];
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        username: string | null;
                        email: string;
                        name: string | null;
                        bio: string | null;
                        schedules: {
                            name: string;
                            id: number;
                        }[];
                        id: number;
                        timeZone: string;
                    };
                }>;
                updateUser: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        role: "ADMIN" | "MEMBER" | "OWNER";
                        timeZone: string;
                        userId: number;
                        username?: string | undefined;
                        bio?: string | undefined;
                        name?: string | undefined;
                        email?: string | undefined;
                        avatar?: string | undefined;
                    };
                    output: {
                        success: boolean;
                    };
                }>;
                getTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        name: string;
                        id: number;
                    }[];
                }>;
                bulkAddToTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userIds: number[];
                        teamIds: number[];
                    };
                    output: {
                        success: boolean;
                        invitedTotalUsers: number;
                    };
                }>;
                bulkDeleteUsers: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userIds: number[];
                    };
                    output: {
                        success: boolean;
                        usersDeleted: number;
                    };
                }>;
                listOtherTeamMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        limit: number;
                        teamId: number;
                        query?: string | undefined;
                        offset?: number | undefined;
                        cursor?: number | null | undefined;
                    };
                    output: {
                        rows: {
                            bookerUrl: string;
                            user: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                avatarUrl: string | null;
                            } & {
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            };
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                        nextCursor: number | null | undefined;
                    };
                }>;
                getOtherTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number;
                    };
                    output: {
                        safeBio: string;
                        name: string;
                        bio: string | null;
                        id: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        parent: {
                            id: number;
                            slug: string | null;
                        } | null;
                        slug: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                    };
                }>;
                listOtherTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    }[];
                }>;
                deleteTeam: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                    };
                    output: void;
                }>;
                adminGetAll: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        members: {
                            user: {
                                email: string;
                                name: string | null;
                                id: number;
                            };
                        }[];
                        name: string;
                        id: number;
                        slug: string | null;
                        organizationSettings: {
                            id: number;
                            isOrganizationVerified: boolean;
                            isOrganizationConfigured: boolean;
                            isAdminReviewed: boolean;
                            orgAutoAcceptEmail: string;
                            organizationId: number;
                            lockEventTypeCreationForUsers: boolean;
                            adminGetsNoSlotsNotification: boolean;
                        } | null;
                    }[];
                }>;
                adminGet: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id: number;
                    };
                    output: {
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        members: {
                            user: {
                                email: string;
                                name: string | null;
                                id: number;
                            };
                        }[];
                        name: string;
                        id: number;
                        slug: string | null;
                        isOrganization: boolean;
                        organizationSettings: {
                            isOrganizationVerified: boolean;
                            isOrganizationConfigured: boolean;
                            orgAutoAcceptEmail: string;
                        } | null;
                    };
                }>;
                adminUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                        name?: string | undefined;
                        slug?: string | null | undefined;
                        organizationSettings?: {
                            isOrganizationVerified?: boolean | undefined;
                            isOrganizationConfigured?: boolean | undefined;
                            isAdminReviewed?: boolean | undefined;
                            orgAutoAcceptEmail?: string | undefined;
                        } | undefined;
                    };
                    output: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    };
                }>;
                adminVerify: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        orgId: number;
                    };
                    output: {
                        ok: boolean;
                        message: string;
                    };
                }>;
                adminDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        orgId: number;
                    };
                    output: {
                        ok: boolean;
                        message: string;
                    };
                }>;
                createPhoneCall: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeId: number;
                        yourPhoneNumber: string;
                        numberToCall: string;
                        guestName: string;
                        generalPrompt: string;
                        beginMessage: string | null;
                        calApiKey: string;
                        guestEmail?: string | null | undefined;
                        guestCompany?: string | null | undefined;
                    };
                    output: import("zod").objectOutputType<{
                        call_id: import("zod").ZodString;
                        agent_id: import("zod").ZodString;
                    }, import("zod").ZodTypeAny, "passthrough">;
                }>;
            }>;
            webhook: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        appId?: string | undefined;
                        eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING")[] | undefined;
                    } | undefined;
                    output: {
                        active: boolean;
                        secret: string | null;
                        id: string;
                        eventTypeId: number | null;
                        userId: number | null;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                        platform: boolean;
                    }[];
                }>;
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        webhookId?: string | undefined;
                    };
                    output: {
                        active: boolean;
                        secret: string | null;
                        id: string;
                        userId: number | null;
                        teamId: number | null;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                        platform: boolean;
                    };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        active: boolean;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        eventTriggers: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING")[];
                        appId?: string | null | undefined;
                        secret?: string | null | undefined;
                        platform?: boolean | undefined;
                    };
                    output: {
                        id: string;
                        userId: number | null;
                        teamId: number | null;
                        eventTypeId: number | null;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        createdAt: Date;
                        active: boolean;
                        eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                        appId: string | null;
                        secret: string | null;
                        platform: boolean;
                    };
                }>;
                edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        payloadTemplate: string | null;
                        subscriberUrl?: string | undefined;
                        eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING")[] | undefined;
                        active?: boolean | undefined;
                        appId?: string | null | undefined;
                        secret?: string | null | undefined;
                    };
                    output: {
                        active: boolean;
                        secret: string | null;
                        id: string;
                        eventTypeId: number | null;
                        userId: number | null;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                        platform: boolean;
                    } | null;
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                    };
                    output: {
                        id: string;
                    };
                }>;
                testTrigger: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                        url: string;
                        type: string;
                        secret?: string | undefined;
                        payloadTemplate?: string | null | undefined;
                    };
                    output: {
                        message?: string | undefined;
                        ok: boolean;
                        status: number;
                    };
                }>;
                getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id?: string | undefined;
                        eventTypeId?: number | undefined;
                        teamId?: number | undefined;
                    } | undefined;
                    output: {
                        webhookGroups: {
                            teamId?: number | null | undefined;
                            profile: {
                                slug: string | null;
                                name: string | null;
                                image?: string | undefined;
                            };
                            metadata?: {
                                readOnly: boolean;
                            } | undefined;
                            webhooks: {
                                id: string;
                                userId: number | null;
                                teamId: number | null;
                                eventTypeId: number | null;
                                subscriberUrl: string;
                                payloadTemplate: string | null;
                                createdAt: Date;
                                active: boolean;
                                eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                                appId: string | null;
                                secret: string | null;
                                platform: boolean;
                            }[];
                        }[];
                        profiles: {
                            readOnly?: boolean | undefined;
                            slug: string | null;
                            name: string | null;
                            image?: string | undefined;
                            teamId: number | null | undefined;
                        }[];
                    };
                }>;
            }>;
            apiKeys: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        id: string;
                        userId: number;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        note: string | null;
                        expiresAt: Date | null;
                        lastUsedAt: Date | null;
                        hashedKey: string;
                    }[];
                }>;
                findKeyOfType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        appId?: string | undefined;
                        teamId?: number | undefined;
                    };
                    output: {
                        id: string;
                        userId: number;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        note: string | null;
                        expiresAt: Date | null;
                        lastUsedAt: Date | null;
                        hashedKey: string;
                    }[];
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        note?: string | null | undefined;
                        expiresAt?: Date | null | undefined;
                        neverExpires?: boolean | undefined;
                        appId?: string | null | undefined;
                        teamId?: number | undefined;
                    };
                    output: string;
                }>;
                edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                        note?: string | null | undefined;
                        expiresAt?: Date | undefined;
                    };
                    output: {
                        id: string;
                        userId: number;
                        teamId: number | null;
                        appId: string | null;
                        createdAt: Date;
                        note: string | null;
                        expiresAt: Date | null;
                        lastUsedAt: Date | null;
                        hashedKey: string;
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                        eventTypeId?: number | undefined;
                    };
                    output: {
                        id: string;
                    };
                }>;
            }>;
            slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startTime: string;
                        endTime: string;
                        eventTypeId?: number | undefined;
                        eventTypeSlug?: string | undefined;
                        timeZone?: string | undefined;
                        usernameList?: string[] | undefined;
                        debug?: boolean | undefined;
                        duration?: string | undefined;
                        rescheduleUid?: string | null | undefined;
                        isTeamEvent?: boolean | undefined;
                        orgSlug?: string | undefined;
                    };
                    output: import("./viewer/slots/util").IGetAvailableSlots;
                }>;
                reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeId: number;
                        slotUtcStartDate: string;
                        slotUtcEndDate: string;
                        bookingUid?: string | undefined;
                    };
                    output: {
                        uid: string;
                    };
                }>;
                removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        uid: string | null;
                    };
                    output: void;
                }>;
            }>;
            workflows: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | undefined;
                        userId?: number | undefined;
                    } | undefined;
                    output: {
                        workflows: import('../../../features/ee/workflows/components/WorkflowListPage').WorkflowType[];
                    };
                }>;
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id: number;
                    };
                    output: {
                        name: string;
                        team: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                id: number;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            slug: string | null;
                        } | null;
                        trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                        id: number;
                        userId: number | null;
                        time: number | null;
                        teamId: number | null;
                        timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                        activeOn: {
                            eventType: {
                                price: number;
                                title: string;
                                description: string | null;
                                hidden: boolean;
                                length: number;
                                currency: string;
                                id: number;
                                timeZone: string | null;
                                userId: number | null;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                position: number;
                                slug: string;
                                locations: import('../../../prisma-client').Prisma.JsonValue;
                                offsetStart: number;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                periodType: import('../../../prisma-client').$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                forwardParamsSuccessRedirect: boolean | null;
                                bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                isInstantEvent: boolean;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                secondaryEmailId: number | null;
                            };
                        }[];
                        steps: {
                            action: import('../../../prisma-client').$Enums.WorkflowActions;
                            id: number;
                            template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                            stepNumber: number;
                            workflowId: number;
                            sendTo: string | null;
                            reminderBody: string | null;
                            emailSubject: string | null;
                            numberRequired: boolean | null;
                            sender: string | null;
                            numberVerificationPending: boolean;
                            includeCalendarEvent: boolean;
                        }[];
                    } | null;
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId?: number | undefined;
                    };
                    output: {
                        workflow: {
                            id: number;
                            position: number;
                            name: string;
                            userId: number | null;
                            teamId: number | null;
                            trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                            time: number | null;
                            timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                        };
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: number;
                    };
                    output: {
                        id: number;
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        trigger: "BEFORE_EVENT" | "EVENT_CANCELLED" | "NEW_EVENT" | "AFTER_EVENT" | "RESCHEDULE_EVENT";
                        id: number;
                        time: number | null;
                        timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
                        activeOn: number[];
                        steps: {
                            action: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                            id: number;
                            template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                            stepNumber: number;
                            workflowId: number;
                            numberRequired: boolean | null;
                            includeCalendarEvent: boolean;
                            sendTo?: string | null | undefined;
                            reminderBody?: string | null | undefined;
                            emailSubject?: string | null | undefined;
                            sender?: string | null | undefined;
                            senderName?: string | null | undefined;
                        }[];
                    };
                    output: {
                        workflow: ({
                            team: {
                                members: {
                                    role: import('../../../prisma-client').$Enums.MembershipRole;
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                                name: string;
                                id: number;
                                slug: string | null;
                            } | null;
                            activeOn: {
                                eventType: {
                                    price: number;
                                    title: string;
                                    description: string | null;
                                    hidden: boolean;
                                    length: number;
                                    currency: string;
                                    id: number;
                                    timeZone: string | null;
                                    userId: number | null;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    position: number;
                                    slug: string;
                                    locations: import('../../../prisma-client').Prisma.JsonValue;
                                    offsetStart: number;
                                    profileId: number | null;
                                    teamId: number | null;
                                    eventName: string | null;
                                    parentId: number | null;
                                    bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                    periodType: import('../../../prisma-client').$Enums.PeriodType;
                                    periodStartDate: Date | null;
                                    periodEndDate: Date | null;
                                    periodDays: number | null;
                                    periodCountCalendarDays: boolean | null;
                                    lockTimeZoneToggleOnBookingPage: boolean;
                                    requiresConfirmation: boolean;
                                    requiresBookerEmailVerification: boolean;
                                    recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                    disableGuests: boolean;
                                    hideCalendarNotes: boolean;
                                    minimumBookingNotice: number;
                                    beforeEventBuffer: number;
                                    afterEventBuffer: number;
                                    seatsPerTimeSlot: number | null;
                                    onlyShowFirstAvailableSlot: boolean;
                                    seatsShowAttendees: boolean | null;
                                    seatsShowAvailabilityCount: boolean | null;
                                    schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                    scheduleId: number | null;
                                    slotInterval: number | null;
                                    successRedirectUrl: string | null;
                                    forwardParamsSuccessRedirect: boolean | null;
                                    bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                    durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                    isInstantEvent: boolean;
                                    assignAllTeamMembers: boolean;
                                    useEventTypeDestinationCalendarEmail: boolean;
                                    secondaryEmailId: number | null;
                                };
                            }[];
                            steps: {
                                action: import('../../../prisma-client').$Enums.WorkflowActions;
                                id: number;
                                template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                                stepNumber: number;
                                workflowId: number;
                                sendTo: string | null;
                                reminderBody: string | null;
                                emailSubject: string | null;
                                numberRequired: boolean | null;
                                sender: string | null;
                                numberVerificationPending: boolean;
                                includeCalendarEvent: boolean;
                            }[];
                        } & {
                            name: string;
                            trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                            id: number;
                            userId: number | null;
                            time: number | null;
                            position: number;
                            teamId: number | null;
                            timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                        }) | null;
                    };
                }>;
                activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeId: number;
                        workflowId: number;
                    };
                    output: void;
                }>;
                sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        phoneNumber: string;
                    };
                    output: void;
                }>;
                verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        code: string;
                        phoneNumber: string;
                        teamId?: number | undefined;
                    };
                    output: boolean;
                }>;
                getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | undefined;
                    };
                    output: {
                        id: number;
                        userId: number | null;
                        teamId: number | null;
                        phoneNumber: string;
                    }[];
                }>;
                getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | undefined;
                    };
                    output: {
                        id: number;
                        userId: number | null;
                        teamId: number | null;
                        email: string;
                    }[];
                }>;
                verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        code: string;
                        teamId?: number | undefined;
                    };
                    output: true;
                }>;
                getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        label: string;
                        value: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                        needsTeamsUpgrade: boolean;
                    }[];
                }>;
                filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        filters?: {
                            teamIds?: number[] | undefined;
                            userIds?: number[] | undefined;
                            upIds?: string[] | undefined;
                        } | undefined;
                    } | null | undefined;
                    output: {
                        filtered: import('../../../features/ee/workflows/components/WorkflowListPage').WorkflowType[];
                        totalCount: number;
                    } | undefined;
                }>;
            }>;
            saml: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number | null;
                    };
                    output: import('../../../features/ee/sso/lib/saml').SSOConnection | null;
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number | null;
                        encodedRawMetadata: string;
                    };
                    output: import("@boxyhq/saml-jackson").SAMLSSORecord;
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number | null;
                    };
                    output: void;
                }>;
                updateOIDC: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        clientId: string;
                        teamId: number | null;
                        clientSecret: string;
                        wellKnownUrl: string;
                    };
                    output: import("@boxyhq/saml-jackson").OIDCSSORecord;
                }>;
            }>;
            dsync: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        organizationId: number | null;
                        provider: string;
                    };
                    output: import("@boxyhq/saml-jackson").Directory;
                }>;
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        organizationId: number | null;
                    };
                    output: import("@boxyhq/saml-jackson").Directory | null;
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        organizationId: number | null;
                        directoryId: string;
                    };
                    output: null;
                }>;
                teamGroupMapping: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                    ctx: import("../createContext").InnerContext;
                    meta: object;
                    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T = unknown>(string: string) => T;
                        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>, {
                    get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                        input: void;
                        output: {
                            teamGroupMapping: {
                                id: number;
                                name: string;
                                slug: string | null;
                                directoryId: string;
                                groupNames: string[];
                            }[];
                        };
                    }>;
                    create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            name: string;
                            teamId: number;
                            directoryId: string;
                        };
                        output: {
                            newGroupName: string;
                        };
                    }>;
                    delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            teamId: number;
                            groupName: string;
                        };
                        output: {
                            deletedGroupName: string;
                        };
                    }>;
                }>;
            }>;
            insights: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                eventsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        memberUserId?: number | undefined;
                        userId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        empty: boolean;
                        created: {
                            count: number;
                            deltaPrevious: number;
                        };
                        completed: {
                            count: number;
                            deltaPrevious: number;
                        };
                        rescheduled: {
                            count: number;
                            deltaPrevious: number;
                        };
                        cancelled: {
                            count: number;
                            deltaPrevious: number;
                        };
                        rating: {
                            count: number;
                            deltaPrevious: number;
                        };
                        no_show: {
                            count: number;
                            deltaPrevious: number;
                        };
                        csat: {
                            count: number;
                            deltaPrevious: number;
                        };
                        previousRange: {
                            startDate: string;
                            endDate: string;
                        };
                    };
                }>;
                eventsTimeline: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        timeView: "week" | "month" | "year" | "day";
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        memberUserId?: number | undefined;
                        userId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        Month: string;
                        Created: number;
                        Completed: number;
                        Rescheduled: number;
                        Cancelled: number;
                        "No-Show (Host)": number;
                    }[];
                }>;
                popularEventTypes: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        memberUserId?: number | undefined;
                        teamId?: number | null | undefined;
                        userId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: ({
                        eventTypeId?: undefined;
                        eventTypeName?: undefined;
                        count?: undefined;
                    } | {
                        eventTypeId: number | null;
                        eventTypeName: string;
                        count: number;
                    })[];
                }>;
                averageEventDuration: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        memberUserId?: number | undefined;
                        teamId?: number | null | undefined;
                        userId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        Date: string;
                        Average: number;
                    }[];
                }>;
                membersWithMostBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        count: number;
                    }[];
                }>;
                membersWithLeastBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        count: number;
                    }[];
                }>;
                teamListForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: import('../../../features/insights/server/trpc-router').IResultTeamList[];
                }>;
                userList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId: number | null;
                        isAll: boolean | null;
                    };
                    output: {
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    }[];
                }>;
                eventTypeList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        teamId?: number | null | undefined;
                        userId?: number | null | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        title: string;
                        team: {
                            name: string;
                        } | null;
                        id: number;
                        slug: string;
                        teamId: number | null;
                    }[];
                }>;
                recentRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        rating: number | null;
                        feedback: string | null;
                    }[];
                }>;
                membersWithMostNoShow: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        count: number;
                    }[];
                }>;
                membersWithHighestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        averageRating: number | null;
                    }[];
                }>;
                membersWithLowestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        eventTypeId?: number | undefined;
                        isAll?: boolean | undefined;
                    };
                    output: {
                        userId: number | null;
                        user: Omit<{
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        }, "avatarUrl"> & {
                            avatarUrl: string;
                        };
                        emailMd5: string;
                        averageRating: number | null;
                    }[];
                }>;
                rawData: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startDate: string;
                        endDate: string;
                        teamId?: number | null | undefined;
                        userId?: number | null | undefined;
                        memberUserId?: number | null | undefined;
                        isAll?: boolean | undefined;
                        eventTypeId?: number | null | undefined;
                    };
                    output: {
                        data: string;
                        filename: string;
                    };
                }>;
            }>;
            payments: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                chargeCard: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        bookingId: number;
                    };
                    output: {
                        id: number;
                        uid: string;
                        appId: string | null;
                        bookingId: number;
                        amount: number;
                        fee: number;
                        currency: string;
                        success: boolean;
                        refunded: boolean;
                        data: import('../../../prisma-client').Prisma.JsonValue;
                        externalId: string;
                        paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
                    };
                }>;
            }>;
            appRoutingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                    ctx: import("../createContext").InnerContext;
                    meta: object;
                    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T = unknown>(string: string) => T;
                        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>, {
                    response: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                        input: {
                            response: Record<string, {
                                label: string;
                                value: (string | number | string[]) & (string | number | string[] | undefined);
                            }>;
                            formFillerId: string;
                            formId: string;
                        };
                        output: {
                            id: number;
                            response: import('../../../prisma-client').Prisma.JsonValue;
                            createdAt: Date;
                            formFillerId: string;
                            formId: string;
                        };
                    }>;
                }>;
                forms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        filters?: {
                            teamIds?: number[] | undefined;
                            userIds?: number[] | undefined;
                            upIds?: string[] | undefined;
                        } | undefined;
                    } | null | undefined;
                    output: {
                        filtered: {
                            form: import('../../../app-store/routing-forms/types/types').SerializableForm<{
                                team: ({
                                    members: {
                                        role: import('../../../prisma-client').$Enums.MembershipRole;
                                        id: number;
                                        userId: number;
                                        teamId: number;
                                        disableImpersonation: boolean;
                                        accepted: boolean;
                                    }[];
                                } & {
                                    name: string;
                                    logo: string | null;
                                    bio: string | null;
                                    theme: string | null;
                                    id: number;
                                    timeFormat: number | null;
                                    weekStart: string;
                                    timeZone: string;
                                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                                    slug: string | null;
                                    parentId: number | null;
                                    hideBranding: boolean;
                                    brandColor: string | null;
                                    darkBrandColor: string | null;
                                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                    createdAt: Date;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    appLogo: string | null;
                                    appIconLogo: string | null;
                                    isPrivate: boolean;
                                    hideBookATeamMember: boolean;
                                    bannerUrl: string | null;
                                    isOrganization: boolean;
                                    pendingPayment: boolean;
                                    isPlatform: boolean;
                                }) | null;
                                _count: {
                                    responses: number;
                                };
                            } & {
                                description: string | null;
                                name: string;
                                disabled: boolean;
                                settings: import('../../../prisma-client').Prisma.JsonValue;
                                id: string;
                                userId: number;
                                position: number;
                                routes: import('../../../prisma-client').Prisma.JsonValue;
                                fields: import('../../../prisma-client').Prisma.JsonValue;
                                teamId: number | null;
                                createdAt: Date;
                                updatedAt: Date;
                            }>;
                            readOnly: boolean;
                        }[];
                        totalCount: number;
                    };
                }>;
                formQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        id: string;
                    };
                    output: import('../../../app-store/routing-forms/types/types').SerializableForm<{
                        team: {
                            name: string;
                            slug: string | null;
                        } | null;
                        _count: {
                            responses: number;
                        };
                    } & {
                        description: string | null;
                        name: string;
                        disabled: boolean;
                        settings: import('../../../prisma-client').Prisma.JsonValue;
                        id: string;
                        userId: number;
                        position: number;
                        routes: import('../../../prisma-client').Prisma.JsonValue;
                        fields: import('../../../prisma-client').Prisma.JsonValue;
                        teamId: number | null;
                        createdAt: Date;
                        updatedAt: Date;
                    }> | null;
                }>;
                formMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        id: string;
                        description?: string | null | undefined;
                        disabled?: boolean | undefined;
                        fields?: ({
                            label: string;
                            type: string;
                            id: string;
                            identifier?: string | undefined;
                            placeholder?: string | undefined;
                            selectText?: string | undefined;
                            required?: boolean | undefined;
                            deleted?: boolean | undefined;
                        } | {
                            label: string;
                            type: string;
                            id: string;
                            routerId: string;
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                            identifier?: string | undefined;
                            selectText?: string | undefined;
                            deleted?: boolean | undefined;
                        })[] | undefined;
                        routes?: ({
                            action: {
                                type: "customPageMessage" | "externalRedirectUrl" | "eventTypeRedirectUrl";
                                value: string;
                            };
                            id: string;
                            queryValue: {
                                type: "group" | "switch_group";
                                id?: string | undefined;
                                children1?: any;
                                properties?: any;
                            };
                            isFallback?: boolean | undefined;
                        } | {
                            id: string;
                            isRouter: true;
                        })[] | null | undefined;
                        addFallback?: boolean | undefined;
                        duplicateFrom?: string | null | undefined;
                        teamId?: number | null | undefined;
                        shouldConnect?: boolean | undefined;
                        settings?: {
                            emailOwnerOnSubmission: boolean;
                            sendUpdatesTo?: number[] | undefined;
                            sendToAll?: boolean | undefined;
                        } | null | undefined;
                    };
                    output: {
                        description: string | null;
                        name: string;
                        disabled: boolean;
                        settings: import('../../../prisma-client').Prisma.JsonValue;
                        id: string;
                        userId: number;
                        position: number;
                        routes: import('../../../prisma-client').Prisma.JsonValue;
                        fields: import('../../../prisma-client').Prisma.JsonValue;
                        teamId: number | null;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                }>;
                deleteForm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        id: string;
                    };
                    output: import('../../../prisma-client/runtime/library').GetBatchResult;
                }>;
                report: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        formId: string;
                        jsonLogicQuery: {
                            logic: Record<string, any> | null;
                        };
                        cursor?: number | null | undefined;
                    };
                    output: {
                        headers: string[];
                        responses: (string | number)[][];
                        nextCursor: number | null;
                    };
                }>;
            }>;
            appBasecamp3: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                projects: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: any;
                }>;
                projectMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        projectId: string;
                    };
                    output: any;
                }>;
            }>;
            features: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        description: string | null;
                        enabled: boolean;
                        type: import('../../../prisma-client').$Enums.FeatureType | null;
                        slug: string;
                        createdAt: Date | null;
                        updatedAt: Date | null;
                        lastUsedAt: Date | null;
                        stale: boolean | null;
                        updatedBy: number | null;
                    }[];
                }>;
                map: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: Partial<import('../../../features/flags/config').AppFlags>;
                }>;
            }>;
            appsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                listLocal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        category: string;
                    };
                    output: ({
                        name: string;
                        slug: string;
                        logo: string;
                        title: string | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        description: string;
                        keys: import('../../../prisma-client').Prisma.JsonObject | null;
                        dirName: string;
                        enabled: boolean;
                        isTemplate: boolean | undefined;
                    } | {
                        name: string;
                        slug: string;
                        logo: string;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title: string | undefined;
                        description: string;
                        enabled: boolean;
                        dirName: string;
                        keys: Record<string, string> | null;
                        isTemplate?: undefined;
                    })[];
                }>;
                toggle: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        enabled: boolean;
                        slug: string;
                    };
                    output: boolean;
                }>;
                saveKeys: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        type: string;
                        slug: string;
                        dirName: string;
                        keys?: unknown;
                        fromEnabled?: boolean | undefined;
                    };
                    output: void;
                }>;
                checkForGCal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: boolean;
                }>;
                updateAppCredentials: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        credentialId: number;
                        key: {} & {
                            [k: string]: unknown;
                        };
                    };
                    output: boolean;
                }>;
                queryForDependencies: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: string[] | undefined;
                    output: {
                        name: string;
                        slug: string;
                        installed: boolean;
                    }[] | undefined;
                }>;
                checkGlobalKeys: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        slug: string;
                    };
                    output: boolean;
                }>;
            }>;
            users: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        userId: number;
                    };
                    output: {
                        user: {
                            username: string | null;
                            email: string;
                            role: import('../../../prisma-client').$Enums.UserPermissionRole;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            defaultScheduleId: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            emailVerified: Date | null;
                            avatar: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            appTheme: string | null;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            away: boolean;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            organizationId: number | null;
                            movedToProfileId: number | null;
                            isPlatformManaged: boolean;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        };
                    };
                }>;
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        username: string | null;
                        email: string;
                        role: import('../../../prisma-client').$Enums.UserPermissionRole;
                        name: string | null;
                        bio: string | null;
                        theme: string | null;
                        verified: boolean | null;
                        locked: boolean;
                        id: number;
                        timeFormat: number | null;
                        defaultScheduleId: number | null;
                        weekStart: string;
                        timeZone: string;
                        startTime: number;
                        endTime: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        emailVerified: Date | null;
                        avatar: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        hideBranding: boolean;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        locale: string | null;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        away: boolean;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        disableImpersonation: boolean;
                        organizationId: number | null;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                    }[];
                }>;
                add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        email: string;
                        role: "USER" | "ADMIN";
                        weekStart: string;
                        timeZone: string;
                        identityProvider: "SAML" | "CAL" | "GOOGLE";
                        username?: string | null | undefined;
                        name?: string | null | undefined;
                        bio?: string | null | undefined;
                        theme?: string | null | undefined;
                        timeFormat?: number | null | undefined;
                        defaultScheduleId?: number | null | undefined;
                        avatarUrl?: string | null | undefined;
                        locale?: string | null | undefined;
                        allowDynamicBooking?: boolean | null | undefined;
                    };
                    output: {
                        user: {
                            username: string | null;
                            email: string;
                            role: import('../../../prisma-client').$Enums.UserPermissionRole;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            defaultScheduleId: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            emailVerified: Date | null;
                            avatar: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            appTheme: string | null;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            away: boolean;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            organizationId: number | null;
                            movedToProfileId: number | null;
                            isPlatformManaged: boolean;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        };
                        message: string;
                    };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        username?: string | null | undefined;
                        email?: string | undefined;
                        role?: "USER" | "ADMIN" | undefined;
                        name?: string | null | undefined;
                        bio?: string | null | undefined;
                        theme?: string | null | undefined;
                        timeFormat?: number | null | undefined;
                        defaultScheduleId?: number | null | undefined;
                        weekStart?: string | undefined;
                        timeZone?: string | undefined;
                        avatarUrl?: string | null | undefined;
                        locale?: string | null | undefined;
                        identityProvider?: "SAML" | "CAL" | "GOOGLE" | undefined;
                        allowDynamicBooking?: boolean | null | undefined;
                    };
                    output: {
                        user: {
                            username: string | null;
                            email: string;
                            role: import('../../../prisma-client').$Enums.UserPermissionRole;
                            name: string | null;
                            bio: string | null;
                            theme: string | null;
                            verified: boolean | null;
                            locked: boolean;
                            id: number;
                            timeFormat: number | null;
                            defaultScheduleId: number | null;
                            weekStart: string;
                            timeZone: string;
                            startTime: number;
                            endTime: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            emailVerified: Date | null;
                            avatar: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            hideBranding: boolean;
                            appTheme: string | null;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            completedOnboarding: boolean;
                            locale: string | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            away: boolean;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            disableImpersonation: boolean;
                            organizationId: number | null;
                            movedToProfileId: number | null;
                            isPlatformManaged: boolean;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        };
                        message: string;
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userId: number;
                    };
                    output: {
                        message: string;
                    };
                }>;
            }>;
            oAuth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                getClient: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        clientId: string;
                    };
                    output: {
                        name: string;
                        logo: string | null;
                        clientId: string;
                        redirectUri: string;
                    } | null;
                }>;
                addClient: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        logo: string;
                        redirectUri: string;
                    };
                    output: {
                        clientSecret: string;
                        name: string;
                        logo: string | null;
                        clientId: string;
                        redirectUri: string;
                    };
                }>;
                generateAuthCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        clientId: string;
                        scopes: string[];
                        teamSlug?: string | undefined;
                    };
                    output: {
                        client: {
                            name: string;
                            clientId: string;
                            redirectUri: string;
                        };
                        authorizationCode: string;
                    };
                }>;
            }>;
            googleWorkspace: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                checkForGWorkspace: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        id: number | undefined;
                    };
                }>;
                getUsersFromGWorkspace: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: string[];
                }>;
                removeCurrentGoogleWorkspaceConnection: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: void;
                    output: {
                        deleted: number;
                    };
                }>;
            }>;
            admin: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                listPaginated: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        limit: number;
                        cursor?: number | null | undefined;
                        searchTerm?: string | null | undefined;
                    };
                    output: {
                        rows: {
                            username: string | null;
                            email: string;
                            role: import('../../../prisma-client').$Enums.UserPermissionRole;
                            name: string | null;
                            locked: boolean;
                            id: number;
                            timeZone: string;
                        }[];
                        nextCursor: number | undefined;
                        meta: {
                            totalRowCount: number;
                        };
                    };
                }>;
                sendPasswordReset: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userId: number;
                    };
                    output: {
                        success: boolean;
                    };
                }>;
                lockUserAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        locked: boolean;
                        userId: number;
                    };
                    output: {
                        success: boolean;
                        userId: number;
                        locked: boolean;
                    };
                }>;
                toggleFeatureFlag: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        enabled: boolean;
                        slug: string;
                    };
                    output: {
                        description: string | null;
                        enabled: boolean;
                        type: import('../../../prisma-client').$Enums.FeatureType | null;
                        slug: string;
                        createdAt: Date | null;
                        updatedAt: Date | null;
                        lastUsedAt: Date | null;
                        stale: boolean | null;
                        updatedBy: number | null;
                    };
                }>;
                removeTwoFactor: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userId: number;
                    };
                    output: {
                        success: boolean;
                        userId: number;
                    };
                }>;
                getSMSLockStateTeamsUsers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        users: {
                            locked: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                avatarUrl: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            }[];
                            reviewNeeded: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                avatarUrl: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            }[];
                        };
                        teams: {
                            locked: {
                                name: string;
                                id: number;
                                slug: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                logoUrl: string | null;
                            }[];
                            reviewNeeded: {
                                name: string;
                                id: number;
                                slug: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                logoUrl: string | null;
                            }[];
                        };
                    };
                }>;
                setSMSLockState: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        userId?: number | undefined;
                        username?: string | undefined;
                        teamId?: number | undefined;
                        teamSlug?: string | undefined;
                        lock?: boolean | undefined;
                    };
                    output: {
                        name: string | null;
                        locked: boolean | undefined;
                    };
                }>;
            }>;
        } & {
            me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includePasswordAdded?: boolean | undefined;
                } | undefined;
                output: {
                    passwordAdded?: boolean | undefined;
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                    defaultBookerLayouts: {
                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    organizationId: number | null;
                    organization: {
                        id: number | null;
                        isOrgAdmin: boolean;
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        requestedSlug: string | null;
                        members?: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[] | undefined;
                        name?: string | undefined;
                        slug?: string | null | undefined;
                        logoUrl?: string | null | undefined;
                        calVideoLogo?: string | null | undefined;
                        isPrivate?: boolean | undefined;
                        bannerUrl?: string | null | undefined;
                        isPlatform?: boolean | undefined;
                        organizationSettings?: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null | undefined;
                    };
                    username: string | null;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                    } | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        organization: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                id: number;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            isPrivate: boolean;
                            bannerUrl: string | null;
                            isPlatform: boolean;
                            organizationSettings: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null;
                        } & Omit<Pick<{
                            id: number;
                            name: string;
                            slug: string | null;
                            logo: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            createdAt: Date;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            parentId: number | null;
                            timeFormat: number | null;
                            timeZone: string;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                            requestedSlug: string | null;
                            metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?: {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                } | undefined;
                            };
                        };
                        user: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            startTime: number;
                            endTime: number;
                            avatarUrl: string | null;
                            bufferTime: number;
                            locale: string | null;
                        };
                        movedFromUser: {
                            id: number;
                        } | null;
                        username: string;
                        id: number;
                        uid: string;
                        userId: number;
                        organizationId: number;
                        createdAt: Date & string;
                        updatedAt: Date & string;
                        upId: string;
                    } | ({
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                    } & import("@calcom/types/UserProfile").UserAsPersonalProfile) | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                    });
                    profiles: import("@calcom/types/UserProfile").UserProfile[];
                    secondaryEmails: {
                        email: string;
                        id: number;
                        emailVerified: Date | null;
                    }[];
                    sumOfBookings: number | undefined;
                    sumOfCalendars: number | undefined;
                    sumOfTeams: number | undefined;
                    sumOfEventTypes: number | undefined;
                    isPremium: boolean | undefined;
                    sumOfTeamEventTypes: number;
                };
            }>;
            deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    password: string;
                    totpCode?: string | undefined;
                };
                output: void;
            }>;
            deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: void;
            }>;
            connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    onboarding?: boolean | undefined;
                } | undefined;
                output: {
                    connectedCalendars: ({
                        integration: import("@calcom/types/App").App & {
                            credential: import('../../../app-store/utils').CredentialDataWithTeamName;
                            credentials: import('../../../app-store/utils').CredentialDataWithTeamName[];
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary?: undefined;
                        calendars?: undefined;
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                            extendsFeature?: "User" | "EventType" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        };
                        calendars: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        }[];
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                            extendsFeature?: "User" | "EventType" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        error: {
                            message: string;
                        };
                        primary?: undefined;
                        calendars?: undefined;
                    })[];
                    destinationCalendar: {
                        primary?: boolean | undefined;
                        name?: string | undefined;
                        readOnly?: boolean | undefined;
                        email?: string | undefined;
                        primaryEmail: string | null;
                        credentialId: number | null;
                        integrationTitle?: string | undefined;
                        userId: number | null;
                        integration: string;
                        externalId: string;
                        id: number;
                        eventTypeId: number | null;
                    };
                };
            }>;
            setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    externalId: string;
                    integration: string;
                    eventTypeId?: number | null | undefined;
                    bookingId?: number | null | undefined;
                };
                output: void;
            }>;
            integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    variant?: string | undefined;
                    exclude?: string[] | undefined;
                    onlyInstalled?: boolean | undefined;
                    includeTeamInstalledApps?: boolean | undefined;
                    extendsFeature?: "EventType" | undefined;
                    teamId?: number | null | undefined;
                    sortByMostPopular?: boolean | undefined;
                    categories?: ("payment" | "other" | "automation" | "conferencing" | "calendar" | "analytics" | "crm" | "messaging" | "video" | "web3")[] | undefined;
                    appId?: string | undefined;
                };
                output: {
                    items: {
                        userCredentialIds: number[];
                        invalidCredentialIds: number[];
                        teams: ({
                            teamId: number;
                            name: string;
                            logoUrl: string | null;
                            credentialId: number;
                            isAdmin: boolean;
                        } | null)[];
                        isInstalled: boolean | undefined;
                        isSetupAlready: boolean | undefined;
                        credentialOwner?: import('../../../app-store/types').CredentialOwner | undefined;
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                        extendsFeature?: "User" | "EventType" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                        enabled: boolean;
                    }[];
                };
            }>;
            appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appId: string;
                };
                output: {
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import('../../../prisma-client').$Enums.AppCategories[];
                    extendsFeature?: "User" | "EventType" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                    isInstalled: number;
                };
            }>;
            appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appType: string;
                };
                output: {
                    credentials: {
                        type: string;
                        id: number;
                        userId: number | null;
                        invalid: boolean | null;
                        key: import('../../../prisma-client').Prisma.JsonValue;
                        teamId: number | null;
                        subscriptionId: string | null;
                        appId: string | null;
                        paymentStatus: string | null;
                        billingCycleStart: number | null;
                    }[];
                    userAdminTeams: import('../../../features/ee/teams/lib/getUserAdminTeams').UserAdminTeams;
                };
            }>;
            stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    isPremium: boolean;
                    username: string | null;
                };
            }>;
            updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    username?: string | undefined;
                    name?: string | undefined;
                    email?: string | undefined;
                    bio?: string | undefined;
                    avatarUrl?: string | null | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        email: string;
                        id: number;
                        isDeleted?: boolean | undefined;
                    }[] | undefined;
                };
                output: {
                    email: string | undefined;
                    avatarUrl: string | null;
                    hasEmailBeenChanged: boolean | "" | undefined;
                    sendEmailVerification: boolean;
                    username?: string | undefined;
                    name?: string | undefined;
                    bio?: string | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        email: string;
                        id: number;
                        isDeleted: boolean;
                    }[] | undefined;
                };
            }>;
            unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    message: string;
                };
            }>;
            eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: string[];
                };
                output: void;
            }>;
            workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    rating: string;
                    comment: string;
                };
                output: void;
            }>;
            locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    label: string;
                    options: {
                        label: string;
                        value: string;
                        disabled?: boolean | undefined;
                        icon?: string | undefined;
                        slug?: string | undefined;
                    }[];
                }[];
            }>;
            deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    externalId?: string | undefined;
                    teamId?: number | undefined;
                };
                output: void;
            }>;
            bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: number;
            }>;
            getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    roomName: string;
                };
                output: {
                    data: {
                        duration: number;
                        status: string;
                        id: string;
                        room_name: string;
                        start_ts: number;
                        max_participants: number;
                        share_token: string;
                    }[];
                    total_count: number;
                } | {} | undefined;
            }>;
            getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    teamUpgradeBanner: ({
                        team: {
                            children: {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            }[];
                        } & {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    orgUpgradeBanner: ({
                        team: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    verifyEmailBanner: boolean;
                    calendarCredentialBanner: boolean;
                    invalidAppCredentialBanners: import('../../../features/users/components/InvalidAppCredentialsBanner').InvalidAppCredentialBannerProps[];
                };
            }>;
            getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    recordingId: string;
                };
                output: {
                    download_link: string;
                } | undefined;
            }>;
            getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                } | undefined;
            }>;
            updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
            }>;
            shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    email: string;
                    isVerified: boolean;
                };
            }>;
            teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    teamId: number;
                    name: string;
                    slug: string | null;
                    image: string;
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    readOnly: boolean;
                } | {
                    teamId: null;
                    name: string | null;
                    slug: string | null;
                    image: string;
                    readOnly: boolean;
                })[];
            }>;
            connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: {
                    isBookingAlreadyAcceptedBySomeoneElse: boolean;
                    meetingUrl: string;
                };
            }>;
            outOfOfficeCreate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    offset: number;
                    reasonId: number;
                    dateRange: {
                        startDate: Date;
                        endDate: Date;
                    };
                    toTeamUserId: number | null;
                    notes?: string | null | undefined;
                };
                output: {};
            }>;
            outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    notes: string | null;
                    reason: {
                        reason: string;
                        id: number;
                        userId: number | null;
                        emoji: string;
                    } | null;
                    id: number;
                    start: Date;
                    end: Date;
                    uuid: string;
                    toUserId: number | null;
                    toUser: {
                        username: string | null;
                    } | null;
                }[];
            }>;
            outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    outOfOfficeUid: string;
                };
                output: {};
            }>;
            addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                };
                output: {
                    data: {
                        email: string;
                        id: number;
                        userId: number;
                        emailVerified: Date | null;
                    };
                    message: string;
                };
            }>;
            getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    timeZone: string;
                    startDate: Date;
                    endDate: Date | null;
                }[];
            }>;
            outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    enabled: boolean;
                    reason: string;
                    id: number;
                    userId: number | null;
                    emoji: string;
                }[];
            }>;
        };
    }> & {
        loggedInViewerRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includePasswordAdded?: boolean | undefined;
                } | undefined;
                output: {
                    passwordAdded?: boolean | undefined;
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                    defaultBookerLayouts: {
                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    organizationId: number | null;
                    organization: {
                        id: number | null;
                        isOrgAdmin: boolean;
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        } | null;
                        requestedSlug: string | null;
                        members?: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[] | undefined;
                        name?: string | undefined;
                        slug?: string | null | undefined;
                        logoUrl?: string | null | undefined;
                        calVideoLogo?: string | null | undefined;
                        isPrivate?: boolean | undefined;
                        bannerUrl?: string | null | undefined;
                        isPlatform?: boolean | undefined;
                        organizationSettings?: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null | undefined;
                    };
                    username: string | null;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                    } | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        organization: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                id: number;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            isPrivate: boolean;
                            bannerUrl: string | null;
                            isPlatform: boolean;
                            organizationSettings: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null;
                        } & Omit<Pick<{
                            id: number;
                            name: string;
                            slug: string | null;
                            logo: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            createdAt: Date;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            parentId: number | null;
                            timeFormat: number | null;
                            timeZone: string;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                            requestedSlug: string | null;
                            metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?: {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                } | undefined;
                            };
                        };
                        user: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            startTime: number;
                            endTime: number;
                            avatarUrl: string | null;
                            bufferTime: number;
                            locale: string | null;
                        };
                        movedFromUser: {
                            id: number;
                        } | null;
                        username: string;
                        id: number;
                        uid: string;
                        userId: number;
                        organizationId: number;
                        createdAt: Date & string;
                        updatedAt: Date & string;
                        upId: string;
                    } | ({
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                    } & import("@calcom/types/UserProfile").UserAsPersonalProfile) | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                    });
                    profiles: import("@calcom/types/UserProfile").UserProfile[];
                    secondaryEmails: {
                        email: string;
                        id: number;
                        emailVerified: Date | null;
                    }[];
                    sumOfBookings: number | undefined;
                    sumOfCalendars: number | undefined;
                    sumOfTeams: number | undefined;
                    sumOfEventTypes: number | undefined;
                    isPremium: boolean | undefined;
                    sumOfTeamEventTypes: number;
                };
            }>;
            deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    password: string;
                    totpCode?: string | undefined;
                };
                output: void;
            }>;
            deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: void;
            }>;
            connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    onboarding?: boolean | undefined;
                } | undefined;
                output: {
                    connectedCalendars: ({
                        integration: import("@calcom/types/App").App & {
                            credential: import('../../../app-store/utils').CredentialDataWithTeamName;
                            credentials: import('../../../app-store/utils').CredentialDataWithTeamName[];
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary?: undefined;
                        calendars?: undefined;
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                            extendsFeature?: "User" | "EventType" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        };
                        calendars: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        }[];
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import('../../../prisma-client').$Enums.AppCategories[];
                            extendsFeature?: "User" | "EventType" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        error: {
                            message: string;
                        };
                        primary?: undefined;
                        calendars?: undefined;
                    })[];
                    destinationCalendar: {
                        primary?: boolean | undefined;
                        name?: string | undefined;
                        readOnly?: boolean | undefined;
                        email?: string | undefined;
                        primaryEmail: string | null;
                        credentialId: number | null;
                        integrationTitle?: string | undefined;
                        userId: number | null;
                        integration: string;
                        externalId: string;
                        id: number;
                        eventTypeId: number | null;
                    };
                };
            }>;
            setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    externalId: string;
                    integration: string;
                    eventTypeId?: number | null | undefined;
                    bookingId?: number | null | undefined;
                };
                output: void;
            }>;
            integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    variant?: string | undefined;
                    exclude?: string[] | undefined;
                    onlyInstalled?: boolean | undefined;
                    includeTeamInstalledApps?: boolean | undefined;
                    extendsFeature?: "EventType" | undefined;
                    teamId?: number | null | undefined;
                    sortByMostPopular?: boolean | undefined;
                    categories?: ("payment" | "other" | "automation" | "conferencing" | "calendar" | "analytics" | "crm" | "messaging" | "video" | "web3")[] | undefined;
                    appId?: string | undefined;
                };
                output: {
                    items: {
                        userCredentialIds: number[];
                        invalidCredentialIds: number[];
                        teams: ({
                            teamId: number;
                            name: string;
                            logoUrl: string | null;
                            credentialId: number;
                            isAdmin: boolean;
                        } | null)[];
                        isInstalled: boolean | undefined;
                        isSetupAlready: boolean | undefined;
                        credentialOwner?: import('../../../app-store/types').CredentialOwner | undefined;
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                        extendsFeature?: "User" | "EventType" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                        enabled: boolean;
                    }[];
                };
            }>;
            appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appId: string;
                };
                output: {
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import('../../../prisma-client').$Enums.AppCategories[];
                    extendsFeature?: "User" | "EventType" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                    isInstalled: number;
                };
            }>;
            appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appType: string;
                };
                output: {
                    credentials: {
                        type: string;
                        id: number;
                        userId: number | null;
                        invalid: boolean | null;
                        key: import('../../../prisma-client').Prisma.JsonValue;
                        teamId: number | null;
                        subscriptionId: string | null;
                        appId: string | null;
                        paymentStatus: string | null;
                        billingCycleStart: number | null;
                    }[];
                    userAdminTeams: import('../../../features/ee/teams/lib/getUserAdminTeams').UserAdminTeams;
                };
            }>;
            stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    isPremium: boolean;
                    username: string | null;
                };
            }>;
            updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    username?: string | undefined;
                    name?: string | undefined;
                    email?: string | undefined;
                    bio?: string | undefined;
                    avatarUrl?: string | null | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        email: string;
                        id: number;
                        isDeleted?: boolean | undefined;
                    }[] | undefined;
                };
                output: {
                    email: string | undefined;
                    avatarUrl: string | null;
                    hasEmailBeenChanged: boolean | "" | undefined;
                    sendEmailVerification: boolean;
                    username?: string | undefined;
                    name?: string | undefined;
                    bio?: string | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        email: string;
                        id: number;
                        isDeleted: boolean;
                    }[] | undefined;
                };
            }>;
            unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    message: string;
                };
            }>;
            eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: string[];
                };
                output: void;
            }>;
            workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    rating: string;
                    comment: string;
                };
                output: void;
            }>;
            locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    label: string;
                    options: {
                        label: string;
                        value: string;
                        disabled?: boolean | undefined;
                        icon?: string | undefined;
                        slug?: string | undefined;
                    }[];
                }[];
            }>;
            deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    externalId?: string | undefined;
                    teamId?: number | undefined;
                };
                output: void;
            }>;
            bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: number;
            }>;
            getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    roomName: string;
                };
                output: {
                    data: {
                        duration: number;
                        status: string;
                        id: string;
                        room_name: string;
                        start_ts: number;
                        max_participants: number;
                        share_token: string;
                    }[];
                    total_count: number;
                } | {} | undefined;
            }>;
            getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    teamUpgradeBanner: ({
                        team: {
                            children: {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            }[];
                        } & {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    orgUpgradeBanner: ({
                        team: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        };
                    } & {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    verifyEmailBanner: boolean;
                    calendarCredentialBanner: boolean;
                    invalidAppCredentialBanners: import('../../../features/users/components/InvalidAppCredentialsBanner').InvalidAppCredentialBannerProps[];
                };
            }>;
            getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    recordingId: string;
                };
                output: {
                    download_link: string;
                } | undefined;
            }>;
            getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                } | undefined;
            }>;
            updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
            }>;
            shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    email: string;
                    isVerified: boolean;
                };
            }>;
            teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    teamId: number;
                    name: string;
                    slug: string | null;
                    image: string;
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    readOnly: boolean;
                } | {
                    teamId: null;
                    name: string | null;
                    slug: string | null;
                    image: string;
                    readOnly: boolean;
                })[];
            }>;
            connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: {
                    isBookingAlreadyAcceptedBySomeoneElse: boolean;
                    meetingUrl: string;
                };
            }>;
            outOfOfficeCreate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    offset: number;
                    reasonId: number;
                    dateRange: {
                        startDate: Date;
                        endDate: Date;
                    };
                    toTeamUserId: number | null;
                    notes?: string | null | undefined;
                };
                output: {};
            }>;
            outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    notes: string | null;
                    reason: {
                        reason: string;
                        id: number;
                        userId: number | null;
                        emoji: string;
                    } | null;
                    id: number;
                    start: Date;
                    end: Date;
                    uuid: string;
                    toUserId: number | null;
                    toUser: {
                        username: string | null;
                    } | null;
                }[];
            }>;
            outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    outOfOfficeUid: string;
                };
                output: {};
            }>;
            addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                };
                output: {
                    data: {
                        email: string;
                        id: number;
                        userId: number;
                        emailVerified: Date | null;
                    };
                    message: string;
                };
            }>;
            getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    timeZone: string;
                    startDate: Date;
                    endDate: Date | null;
                }[];
            }>;
            outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    enabled: boolean;
                    reason: string;
                    id: number;
                    userId: number | null;
                    emoji: string;
                }[];
            }>;
        }>;
        public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            session: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: import("next-auth").Session | null;
            }>;
            i18n: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    locale: string;
                    CalComVersion: string;
                };
                output: {
                    i18n: import("next-i18next").SSRConfig;
                    locale: string;
                };
            }>;
            countryCode: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    countryCode: string;
                };
            }>;
            submitRating: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    rating: number;
                    bookingUid: string;
                    comment?: string | undefined;
                };
                output: void;
            }>;
            noShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingUid: string;
                };
                output: void;
            }>;
            samlTenantProduct: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                };
                output: {
                    tenant: string;
                    product: string;
                };
            }>;
            stripeCheckoutSession: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    stripeCustomerId?: string | undefined;
                    checkoutSessionId?: string | undefined;
                };
                output: {
                    valid: boolean;
                    hasPaymentFailed?: undefined;
                    isPremiumUsername?: undefined;
                    customer?: undefined;
                } | {
                    valid: boolean;
                    hasPaymentFailed: boolean;
                    isPremiumUsername: boolean;
                    customer: {
                        username: string;
                        email: string;
                        stripeCustomerId: string;
                    };
                };
            }>;
            slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startTime: string;
                        endTime: string;
                        eventTypeId?: number | undefined;
                        eventTypeSlug?: string | undefined;
                        timeZone?: string | undefined;
                        usernameList?: string[] | undefined;
                        debug?: boolean | undefined;
                        duration?: string | undefined;
                        rescheduleUid?: string | null | undefined;
                        isTeamEvent?: boolean | undefined;
                        orgSlug?: string | undefined;
                    };
                    output: import("./viewer/slots/util").IGetAvailableSlots;
                }>;
                reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeId: number;
                        slotUtcStartDate: string;
                        slotUtcEndDate: string;
                        bookingUid?: string | undefined;
                    };
                    output: {
                        uid: string;
                    };
                }>;
                removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        uid: string | null;
                    };
                    output: void;
                }>;
            }>;
            event: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    username: string;
                    org: string | null;
                    eventSlug: string;
                    isTeamEvent?: boolean | undefined;
                    fromRedirectOfNonOrgLink?: boolean | undefined;
                };
                output: {
                    bookingFields: {
                        name: string;
                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        required?: boolean | undefined;
                        label?: string | undefined;
                        placeholder?: string | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "address" | "phone";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    name: string;
                                    type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                    required?: boolean | undefined;
                                    label?: string | undefined;
                                    placeholder?: string | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                    }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    users: ({
                        metadata: undefined;
                        bookerUrl: string;
                        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                        username: string | null;
                        email: string;
                        name: string | null;
                        bio: string | null;
                        theme: string | null;
                        verified: boolean | null;
                        locked: boolean;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        startTime: number;
                        endTime: number;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        hideBranding: boolean;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        locale: string | null;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        disableImpersonation: boolean;
                        movedToProfileId: number | null;
                    } | {
                        metadata: undefined;
                        bookerUrl: string;
                        profile: {
                            organization: Omit<{
                                name: string;
                                id: number;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                bannerUrl: string | null;
                            } & Omit<Pick<{
                                id: number;
                                name: string;
                                slug: string | null;
                                logo: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                createdAt: Date;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                parentId: number | null;
                                timeFormat: number | null;
                                timeZone: string;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                                requestedSlug: string | null;
                                metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?: {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                    } | undefined;
                                };
                            }, "metadata"> & {
                                requestedSlug: string | null;
                                metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?: {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                    } | undefined;
                                };
                            };
                            username: string;
                            id: number;
                            uid: string;
                            userId: number;
                            organizationId: number;
                            createdAt: Date & string;
                            updatedAt: Date & string;
                            upId: string;
                        };
                        username: string | null;
                        email: string;
                        name: string | null;
                        bio: string | null;
                        theme: string | null;
                        verified: boolean | null;
                        locked: boolean;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        startTime: number;
                        endTime: number;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        hideBranding: boolean;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        locale: string | null;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        disableImpersonation: boolean;
                        movedToProfileId: number | null;
                    })[];
                    locations: (Pick<Partial<import('../../../app-store/locations').LocationObject>, "link" | "address"> & Omit<import('../../../app-store/locations').LocationObject, "link" | "address">)[];
                    profile: {
                        image?: string | undefined;
                        name?: string | undefined;
                        username?: string | null | undefined;
                        weekStart: string;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        theme: null;
                        bookerLayouts: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null;
                    };
                    entity: {
                        considerUnpublished: boolean;
                        fromRedirectOfNonOrgLink: boolean;
                        orgSlug: string | null;
                        name: string | null;
                        teamSlug: null;
                        logoUrl: null;
                    };
                    isInstantEvent: boolean;
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {} | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {} | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {} | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {} | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {} | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                price?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                profile?: true | undefined;
                                owner?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                hidden?: true | undefined;
                                team?: true | undefined;
                                availability?: true | undefined;
                                length?: true | undefined;
                                workflows?: true | undefined;
                                users?: true | undefined;
                                hosts?: true | undefined;
                                currency?: true | undefined;
                                children?: true | undefined;
                                schedule?: true | undefined;
                                timeZone?: true | undefined;
                                userId?: true | undefined;
                                metadata?: true | undefined;
                                position?: true | undefined;
                                parent?: true | undefined;
                                slug?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hashedLink?: true | undefined;
                                destinationCalendar?: true | undefined;
                                customInputs?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                secondaryEmail?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                    } | null;
                    isDynamic: boolean;
                    periodCountCalendarDays: boolean;
                    periodStartDate: null;
                    periodEndDate: null;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    periodType: "UNLIMITED";
                    periodDays: null;
                    slotInterval: null;
                    offsetStart: number;
                    customInputs: {
                        required: boolean;
                        label: string;
                        placeholder: string;
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        eventTypeId: number;
                        options?: {
                            label: string;
                            type: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[];
                    disableGuests: boolean;
                    minimumBookingNotice: number;
                    schedule: null;
                    timeZone: null;
                    successRedirectUrl: string;
                    forwardParamsSuccessRedirect: boolean;
                    teamId: null;
                    scheduleId: null;
                    availability: never[];
                    price: number;
                    currency: string;
                    schedulingType: "COLLECTIVE";
                    seatsPerTimeSlot: null;
                    seatsShowAttendees: null;
                    seatsShowAvailabilityCount: null;
                    onlyShowFirstAvailableSlot: boolean;
                    id: number;
                    hideCalendarNotes: boolean;
                    recurringEvent: null;
                    destinationCalendar: null;
                    team: null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    bookingLimits: null;
                    durationLimits: null;
                    hidden: boolean;
                    userId: number;
                    parentId: null;
                    owner: null;
                    workflows: never[];
                    hosts: never[];
                    assignAllTeamMembers: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    secondaryEmailId: null;
                    secondaryEmail: null;
                    length: number;
                    slug: string;
                    title: string;
                    eventName: string;
                    description: string;
                    descriptionAsSafeHTML: string;
                    position: number;
                } | {
                    bookerLayouts: {
                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                    } | null;
                    description: string;
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {} | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {} | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {} | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {} | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {} | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                price?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                profile?: true | undefined;
                                owner?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                hidden?: true | undefined;
                                team?: true | undefined;
                                availability?: true | undefined;
                                length?: true | undefined;
                                workflows?: true | undefined;
                                users?: true | undefined;
                                hosts?: true | undefined;
                                currency?: true | undefined;
                                children?: true | undefined;
                                schedule?: true | undefined;
                                timeZone?: true | undefined;
                                userId?: true | undefined;
                                metadata?: true | undefined;
                                position?: true | undefined;
                                parent?: true | undefined;
                                slug?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hashedLink?: true | undefined;
                                destinationCalendar?: true | undefined;
                                customInputs?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                secondaryEmail?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                    } | null;
                    customInputs: {
                        required: boolean;
                        label: string;
                        placeholder: string;
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        eventTypeId: number;
                        options?: {
                            label: string;
                            type: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[];
                    locations: (Pick<Partial<import('../../../app-store/locations').LocationObject>, "link" | "address"> & Omit<import('../../../app-store/locations').LocationObject, "link" | "address">)[];
                    bookingFields: {
                        name: string;
                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        required?: boolean | undefined;
                        label?: string | undefined;
                        placeholder?: string | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "address" | "phone";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    name: string;
                                    type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                    required?: boolean | undefined;
                                    label?: string | undefined;
                                    placeholder?: string | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                    }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                    profile: {
                        username: string | null | undefined;
                        name: string | null;
                        weekStart: string;
                        image: string;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        theme: string | null;
                        bookerLayouts: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null;
                    };
                    users: {
                        username: string | null;
                        name: string | null;
                        weekStart: string;
                        organizationId: any;
                        avatarUrl: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        bookerUrl: string;
                    }[];
                    entity: {
                        logoUrl?: string | undefined;
                        name: any;
                        fromRedirectOfNonOrgLink: boolean;
                        considerUnpublished: boolean;
                        orgSlug: string | null;
                        teamSlug: string | null;
                    };
                    isDynamic: boolean;
                    isInstantEvent: boolean;
                    aiPhoneCallConfig: {
                        enabled: boolean;
                        id: number;
                        eventTypeId: number;
                        yourPhoneNumber: string;
                        numberToCall: string;
                        guestName: string;
                        guestEmail: string | null;
                        guestCompany: string | null;
                        generalPrompt: string;
                        beginMessage: string | null;
                        llmId: string | null;
                    } | null;
                    assignAllTeamMembers: boolean;
                    owner: ({
                        username: string | null;
                        name: string | null;
                        organization: {
                            name: string;
                            id: number;
                            slug: string | null;
                            calVideoLogo: string | null;
                            bannerUrl: string | null;
                        } | null;
                        theme: string | null;
                        id: number;
                        defaultScheduleId: number | null;
                        weekStart: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        avatarUrl: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    }) | null;
                    hosts: {
                        user: {
                            username: string | null;
                            name: string | null;
                            organization: {
                                name: string;
                                id: number;
                                slug: string | null;
                                calVideoLogo: string | null;
                                bannerUrl: string | null;
                            } | null;
                            theme: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            weekStart: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            avatarUrl: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        };
                    }[];
                    price: number;
                    title: string;
                    hidden: boolean;
                    team: {
                        name: string;
                        theme: string | null;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        parent: {
                            name: string;
                            slug: string | null;
                            logoUrl: string | null;
                            bannerUrl: string | null;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        logoUrl: string | null;
                    } | null;
                    length: number;
                    workflows: ({
                        workflow: {
                            steps: {
                                action: import('../../../prisma-client').$Enums.WorkflowActions;
                                id: number;
                                template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                                stepNumber: number;
                                workflowId: number;
                                sendTo: string | null;
                                reminderBody: string | null;
                                emailSubject: string | null;
                                numberRequired: boolean | null;
                                sender: string | null;
                                numberVerificationPending: boolean;
                                includeCalendarEvent: boolean;
                            }[];
                        } & {
                            name: string;
                            trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                            id: number;
                            userId: number | null;
                            time: number | null;
                            position: number;
                            teamId: number | null;
                            timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                        };
                    } & {
                        id: number;
                        eventTypeId: number;
                        workflowId: number;
                    })[];
                    currency: string;
                    schedule: {
                        id: number;
                        timeZone: string | null;
                    } | null;
                    id: number;
                    slug: string;
                    eventName: string | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    disableGuests: boolean;
                    seatsPerTimeSlot: number | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                } | null;
            }>;
            ssoConnections: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    connectionExists: null;
                } | {
                    connectionExists: boolean;
                };
            }>;
        }>;
        auth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            changePassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    oldPassword: string;
                    newPassword: string;
                };
                output: void;
            }>;
            verifyPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    passwordInput: string;
                };
                output: void;
            }>;
            verifyCodeUnAuthenticated: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    code: string;
                };
                output: true;
            }>;
            sendVerifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    username?: string | undefined;
                    language?: string | undefined;
                    isVerifyingEmail?: boolean | undefined;
                };
                output: {
                    ok: boolean;
                    skipped: boolean;
                };
            }>;
            resendVerifyEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                } | undefined;
                output: {
                    ok: boolean;
                    skipped: boolean;
                };
            }>;
            createAccountPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: void;
            }>;
        }>;
        deploymentSetup: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    licenseKey?: string | undefined;
                };
                output: void;
            }>;
        }>;
        bookings: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters: {
                        status: "upcoming" | "recurring" | "past" | "unconfirmed" | "cancelled";
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        eventTypeIds?: number[] | undefined;
                    };
                    limit?: number | null | undefined;
                    cursor?: number | null | undefined;
                };
                output: {
                    bookings: {
                        eventType: {
                            recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                            price: number;
                            currency: string;
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {} | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {} | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {} | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {} | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {} | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        price?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        profile?: true | undefined;
                                        owner?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        hidden?: true | undefined;
                                        team?: true | undefined;
                                        availability?: true | undefined;
                                        length?: true | undefined;
                                        workflows?: true | undefined;
                                        users?: true | undefined;
                                        hosts?: true | undefined;
                                        currency?: true | undefined;
                                        children?: true | undefined;
                                        schedule?: true | undefined;
                                        timeZone?: true | undefined;
                                        userId?: true | undefined;
                                        metadata?: true | undefined;
                                        position?: true | undefined;
                                        parent?: true | undefined;
                                        slug?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hashedLink?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        customInputs?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                    defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                } | null | undefined;
                            } | null;
                            team?: {
                                name: string;
                                id: number;
                            } | null | undefined;
                            id?: number | undefined;
                            slug?: string | undefined;
                            eventName?: string | null | undefined;
                            seatsShowAttendees?: boolean | null | undefined;
                            seatsShowAvailabilityCount?: boolean | null | undefined;
                        };
                        startTime: string;
                        endTime: string;
                        paid: boolean;
                        payment: {
                            success: boolean;
                            currency: string;
                            paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
                            amount: number;
                        }[];
                        location: string | null;
                        title: string;
                        description: string | null;
                        attendees: {
                            email: string;
                            name: string;
                            id: number;
                            timeZone: string;
                            bookingId: number | null;
                            locale: string | null;
                        }[];
                        status: import('../../../prisma-client').$Enums.BookingStatus;
                        rescheduled: boolean | null;
                        user: {
                            email: string;
                            name: string | null;
                            id: number;
                        } | null;
                        id: number;
                        uid: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        customInputs: import('../../../prisma-client').Prisma.JsonValue;
                        recurringEventId: string | null;
                        userPrimaryEmail: string | null;
                        isRecorded: boolean;
                        references: {
                            type: string;
                            id: number;
                            uid: string;
                            credentialId: number | null;
                            deleted: boolean | null;
                            bookingId: number | null;
                            thirdPartyRecurringEventId: string | null;
                            meetingId: string | null;
                            meetingPassword: string | null;
                            meetingUrl: string | null;
                            externalCalendarId: string | null;
                        }[];
                        seatsReferences: {
                            attendee: {
                                email: string;
                            };
                            referenceUid: string;
                        }[];
                    }[];
                    recurringInfo: {
                        recurringEventId: string | null;
                        count: number;
                        firstDate: Date | null;
                        bookings: {
                            [key: string]: Date[];
                        };
                    }[];
                    nextCursor: number | null;
                };
            }>;
            requestReschedule: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: string;
                    rescheduleReason?: string | undefined;
                };
                output: void;
            }>;
            editLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    newLocation: string;
                    details?: {
                        credentialId?: number | undefined;
                    } | undefined;
                };
                output: {
                    message: string;
                };
            }>;
            confirm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    confirmed: boolean;
                    recurringEventId?: string | undefined;
                    reason?: string | undefined;
                };
                output: {
                    message: string;
                    status: "ACCEPTED" | "REJECTED";
                } | null;
            }>;
            getBookingAttendees: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    seatReferenceUid: string;
                };
                output: number;
            }>;
            find: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    bookingUid?: string | undefined;
                };
                output: {
                    booking: {
                        paid: boolean;
                        description: string | null;
                        status: import('../../../prisma-client').$Enums.BookingStatus;
                        id: number;
                        startTime: Date;
                        endTime: Date;
                        eventTypeId: number | null;
                        uid: string;
                    } | null;
                };
            }>;
            getInstantBookingLocation: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    bookingId: number;
                };
                output: {
                    booking: {
                        location: string | null;
                        description: string | null;
                        status: import('../../../prisma-client').$Enums.BookingStatus;
                        id: number;
                        startTime: Date;
                        endTime: Date;
                        eventTypeId: number | null;
                        uid: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                    } | null;
                };
            }>;
        }>;
        eventTypes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                    } | undefined;
                    forRoutingForms?: boolean | undefined;
                } | null | undefined;
                output: {
                    allUsersAcrossAllEventTypes: Map<number, {
                        username: string | null;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    }>;
                    eventTypeGroups: {
                        eventTypes: {
                            userIds: number[];
                            safeDescription: string | undefined;
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {} | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {} | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {} | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {} | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {} | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        price?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        profile?: true | undefined;
                                        owner?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        hidden?: true | undefined;
                                        team?: true | undefined;
                                        availability?: true | undefined;
                                        length?: true | undefined;
                                        workflows?: true | undefined;
                                        users?: true | undefined;
                                        hosts?: true | undefined;
                                        currency?: true | undefined;
                                        children?: true | undefined;
                                        schedule?: true | undefined;
                                        timeZone?: true | undefined;
                                        userId?: true | undefined;
                                        metadata?: true | undefined;
                                        position?: true | undefined;
                                        parent?: true | undefined;
                                        slug?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hashedLink?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        customInputs?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                    defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                                } | null | undefined;
                            } | null;
                            children: {
                                users: ({
                                    username: string | null;
                                    name: string | null;
                                    id: number;
                                    avatarUrl: string | null;
                                } & {
                                    nonProfileUsername: string | null;
                                    profile: import("@calcom/types/UserProfile").UserProfile;
                                })[];
                                price: number;
                                title: string;
                                description: string | null;
                                hidden: boolean;
                                length: number;
                                currency: string;
                                id: number;
                                timeZone: string | null;
                                userId: number | null;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                position: number;
                                slug: string;
                                locations: import('../../../prisma-client').Prisma.JsonValue;
                                offsetStart: number;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                periodType: import('../../../prisma-client').$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                forwardParamsSuccessRedirect: boolean | null;
                                bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                isInstantEvent: boolean;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                secondaryEmailId: number | null;
                            }[];
                            price: number;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            length: number;
                            hosts: ({
                                user: {
                                    username: string | null;
                                    name: string | null;
                                    id: number;
                                    avatarUrl: string | null;
                                };
                            } & {
                                eventTypeId: number;
                                userId: number;
                                isFixed: boolean;
                                priority: number | null;
                            })[];
                            currency: string;
                            id: number;
                            timeZone: string | null;
                            userId: number | null;
                            position: number;
                            slug: string;
                            locations: import('../../../prisma-client').Prisma.JsonValue;
                            offsetStart: number;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                            periodType: import('../../../prisma-client').$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                            durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                            isInstantEvent: boolean;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            secondaryEmailId: number | null;
                            hashedLink: {
                                link: string;
                                id: number;
                                eventTypeId: number;
                            } | null;
                            aiPhoneCallConfig: {
                                enabled: boolean;
                                id: number;
                                eventTypeId: number;
                                yourPhoneNumber: string;
                                numberToCall: string;
                                guestName: string;
                                guestEmail: string | null;
                                guestCompany: string | null;
                                generalPrompt: string;
                                beginMessage: string | null;
                                llmId: string | null;
                            } | null;
                        }[];
                        teamId?: number | null | undefined;
                        parentId?: number | null | undefined;
                        bookerUrl: string;
                        membershipRole?: import('../../../prisma/enums').MembershipRole | null | undefined;
                        profile: {
                            slug: string | null;
                            name: string | null;
                            image: string;
                            eventTypesLockedByOrg?: boolean | undefined;
                        };
                        metadata: {
                            membershipCount: number;
                            readOnly: boolean;
                        };
                    }[];
                    profiles: {
                        teamId: number | null | undefined;
                        membershipRole: import('../../../prisma/enums').MembershipRole | null | undefined;
                        membershipCount: number;
                        readOnly: boolean;
                        slug: string | null;
                        name: string | null;
                        image: string;
                        eventTypesLockedByOrg?: boolean | undefined;
                    }[];
                };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    title: string;
                    description: string | null;
                    hidden: boolean;
                    length: number;
                    id: number;
                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                    slug: string;
                    schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                }[];
            }>;
            listWithTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    title: string;
                    team: {
                        name: string;
                        id: number;
                    } | null;
                    id: number;
                    slug: string;
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    title: string;
                    length: number;
                    slug: string;
                    description?: string | null | undefined;
                    hidden?: boolean | undefined;
                    metadata?: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {} | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {} | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {} | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {} | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {} | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                price?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                profile?: true | undefined;
                                owner?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                hidden?: true | undefined;
                                team?: true | undefined;
                                availability?: true | undefined;
                                length?: true | undefined;
                                workflows?: true | undefined;
                                users?: true | undefined;
                                hosts?: true | undefined;
                                currency?: true | undefined;
                                children?: true | undefined;
                                schedule?: true | undefined;
                                timeZone?: true | undefined;
                                userId?: true | undefined;
                                metadata?: true | undefined;
                                position?: true | undefined;
                                parent?: true | undefined;
                                slug?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hashedLink?: true | undefined;
                                destinationCalendar?: true | undefined;
                                customInputs?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                secondaryEmail?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                    } | null | undefined;
                    locations?: {
                        type: string;
                        address?: string | undefined;
                        link?: string | undefined;
                        displayLocationPublicly?: boolean | undefined;
                        hostPhoneNumber?: string | undefined;
                        credentialId?: number | undefined;
                        teamName?: string | undefined;
                    }[] | undefined;
                    teamId?: number | null | undefined;
                    disableGuests?: boolean | undefined;
                    minimumBookingNotice?: number | undefined;
                    beforeEventBuffer?: number | undefined;
                    afterEventBuffer?: number | undefined;
                    schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                    slotInterval?: number | null | undefined;
                };
                output: {
                    eventType: {
                        price: number;
                        title: string;
                        description: string | null;
                        hidden: boolean;
                        length: number;
                        currency: string;
                        id: number;
                        timeZone: string | null;
                        userId: number | null;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        position: number;
                        slug: string;
                        locations: import('../../../prisma-client').Prisma.JsonValue;
                        offsetStart: number;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                        periodType: import('../../../prisma-client').$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                        durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                        isInstantEvent: boolean;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        secondaryEmailId: number | null;
                    };
                };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: number;
                    users?: number[] | undefined;
                };
                output: {
                    eventType: {
                        schedule: number | null;
                        scheduleName: string | null;
                        recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                        bookingLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                        durationLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                        locations: import('../../../app-store/locations').LocationObject[];
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        };
                        customInputs: {
                            required: boolean;
                            label: string;
                            placeholder: string;
                            type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                            id: number;
                            eventTypeId: number;
                            options?: {
                                label: string;
                                type: string;
                            }[] | null | undefined;
                            hasToBeCreated?: boolean | undefined;
                        }[];
                        users: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            avatarUrl: string | null;
                            locale: string | null;
                        }[];
                        bookerUrl: string;
                        children: {
                            owner: {
                                avatar: string;
                                email: string;
                                name: string;
                                username: string;
                                membership: import('../../../prisma-client').$Enums.MembershipRole;
                                id: number;
                                avatarUrl: string | null;
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            };
                            created: boolean;
                            hidden: boolean;
                            slug: string;
                        }[];
                        price: number;
                        webhooks: {
                            active: boolean;
                            secret: string | null;
                            id: string;
                            eventTypeId: number | null;
                            subscriberUrl: string;
                            payloadTemplate: string | null;
                            eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                        }[];
                        owner: {
                            id: number;
                        } | null;
                        title: string;
                        description: string | null;
                        hidden: boolean;
                        team: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                user: {
                                    username: string | null;
                                    email: string;
                                    name: string | null;
                                    id: number;
                                    defaultScheduleId: number | null;
                                    avatarUrl: string | null;
                                    locale: string | null;
                                    eventTypes: {
                                        slug: string;
                                    }[];
                                };
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            parent: {
                                slug: string | null;
                                organizationSettings: {
                                    lockEventTypeCreationForUsers: boolean;
                                } | null;
                            } | null;
                            slug: string | null;
                            parentId: number | null;
                        } | null;
                        length: number;
                        workflows: ({
                            workflow: {
                                team: {
                                    members: {
                                        role: import('../../../prisma-client').$Enums.MembershipRole;
                                        id: number;
                                        userId: number;
                                        teamId: number;
                                        disableImpersonation: boolean;
                                        accepted: boolean;
                                    }[];
                                    name: string;
                                    id: number;
                                    slug: string | null;
                                } | null;
                                activeOn: {
                                    eventType: {
                                        title: string;
                                        id: number;
                                        parentId: number | null;
                                        _count: {
                                            children: number;
                                        };
                                    };
                                }[];
                                steps: {
                                    action: import('../../../prisma-client').$Enums.WorkflowActions;
                                    id: number;
                                    template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                                    stepNumber: number;
                                    workflowId: number;
                                    sendTo: string | null;
                                    reminderBody: string | null;
                                    emailSubject: string | null;
                                    numberRequired: boolean | null;
                                    sender: string | null;
                                    numberVerificationPending: boolean;
                                    includeCalendarEvent: boolean;
                                }[];
                            } & {
                                name: string;
                                trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                                id: number;
                                userId: number | null;
                                time: number | null;
                                position: number;
                                teamId: number | null;
                                timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                            };
                        } & {
                            id: number;
                            eventTypeId: number;
                            workflowId: number;
                        })[];
                        hosts: {
                            userId: number;
                            isFixed: boolean;
                            priority: number | null;
                        }[];
                        currency: string;
                        id: number;
                        timeZone: string | null;
                        userId: number | null;
                        parent: {
                            teamId: number | null;
                        } | null;
                        slug: string;
                        offsetStart: number;
                        teamId: number | null;
                        eventName: string | null;
                        bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                        periodType: import('../../../prisma-client').$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        isInstantEvent: boolean;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        secondaryEmailId: number | null;
                        hashedLink: {
                            link: string;
                            id: number;
                            eventTypeId: number;
                        } | null;
                        destinationCalendar: {
                            id: number;
                            eventTypeId: number | null;
                            credentialId: number | null;
                            externalId: string;
                            userId: number | null;
                            integration: string;
                            primaryEmail: string | null;
                        } | null;
                        aiPhoneCallConfig: {
                            enabled: boolean;
                            id: number;
                            eventTypeId: number;
                            yourPhoneNumber: string;
                            numberToCall: string;
                            guestName: string;
                            guestEmail: string | null;
                            guestCompany: string | null;
                            generalPrompt: string;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                    } & {
                        users: ({
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            avatarUrl: string | null;
                            locale: string | null;
                        } & {
                            avatar: string;
                        })[];
                        periodStartDate: string | null;
                        periodEndDate: string | null;
                        bookingFields: {
                            name: string;
                            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                            options?: {
                                label: string;
                                value: string;
                            }[] | undefined;
                            required?: boolean | undefined;
                            label?: string | undefined;
                            placeholder?: string | undefined;
                            defaultLabel?: string | undefined;
                            defaultPlaceholder?: string | undefined;
                            labelAsSafeHtml?: string | undefined;
                            getOptionsAt?: string | undefined;
                            optionsInputs?: Record<string, {
                                type: "text" | "address" | "phone";
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                            }> | undefined;
                            variant?: string | undefined;
                            variantsConfig?: {
                                variants: Record<string, {
                                    fields: {
                                        name: string;
                                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                        required?: boolean | undefined;
                                        label?: string | undefined;
                                        placeholder?: string | undefined;
                                        labelAsSafeHtml?: string | undefined;
                                    }[];
                                }>;
                            } | undefined;
                            views?: {
                                label: string;
                                id: string;
                                description?: string | undefined;
                            }[] | undefined;
                            hideWhenJustOneOption?: boolean | undefined;
                            hidden?: boolean | undefined;
                            editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                            sources?: {
                                label: string;
                                type: string;
                                id: string;
                                editUrl?: string | undefined;
                                fieldRequired?: boolean | undefined;
                            }[] | undefined;
                        }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    };
                    locationOptions: {
                        label: string;
                        options: {
                            label: string;
                            value: string;
                            disabled?: boolean | undefined;
                            icon?: string | undefined;
                            slug?: string | undefined;
                        }[];
                    }[];
                    destinationCalendar: {
                        id: number;
                        eventTypeId: number | null;
                        credentialId: number | null;
                        externalId: string;
                        userId: number | null;
                        integration: string;
                        primaryEmail: string | null;
                    } | null;
                    team: {
                        members: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            user: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                id: number;
                                defaultScheduleId: number | null;
                                avatarUrl: string | null;
                                locale: string | null;
                                eventTypes: {
                                    slug: string;
                                }[];
                            };
                            accepted: boolean;
                        }[];
                        name: string;
                        id: number;
                        parent: {
                            slug: string | null;
                            organizationSettings: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                    } | null;
                    teamMembers: {
                        profileId: number | null;
                        eventTypes: string[];
                        membership: import('../../../prisma-client').$Enums.MembershipRole;
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        defaultScheduleId: number | null;
                        avatarUrl: string | null;
                        locale: string | null;
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        avatar: string;
                    }[];
                    currentUserMembership: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        user: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            defaultScheduleId: number | null;
                            avatarUrl: string | null;
                            locale: string | null;
                            eventTypes: {
                                slug: string;
                            }[];
                        };
                        accepted: boolean;
                    } | null;
                    isUserOrganizationAdmin: boolean;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    users?: (number[] & (string | number)[]) | undefined;
                    price?: number | undefined;
                    title?: string | undefined;
                    description?: string | null | undefined;
                    hidden?: boolean | undefined;
                    length?: number | undefined;
                    hosts?: {
                        userId: number;
                        profileId?: number | null | undefined;
                        isFixed?: boolean | undefined;
                        priority?: number | null | undefined;
                    }[] | undefined;
                    currency?: string | undefined;
                    children?: {
                        owner: {
                            email: string;
                            name: string;
                            id: number;
                            eventTypeSlugs: string[];
                        };
                        hidden: boolean;
                    }[] | undefined;
                    schedule?: number | null | undefined;
                    timeZone?: string | null | undefined;
                    userId?: number | null | undefined;
                    metadata?: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {} | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {} | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {} | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {} | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {} | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                price?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                profile?: true | undefined;
                                owner?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                hidden?: true | undefined;
                                team?: true | undefined;
                                availability?: true | undefined;
                                length?: true | undefined;
                                workflows?: true | undefined;
                                users?: true | undefined;
                                hosts?: true | undefined;
                                currency?: true | undefined;
                                children?: true | undefined;
                                schedule?: true | undefined;
                                timeZone?: true | undefined;
                                userId?: true | undefined;
                                metadata?: true | undefined;
                                position?: true | undefined;
                                parent?: true | undefined;
                                slug?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hashedLink?: true | undefined;
                                destinationCalendar?: true | undefined;
                                customInputs?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                secondaryEmail?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                        } | null | undefined;
                    } | null | undefined;
                    position?: number | undefined;
                    slug?: string | undefined;
                    locations?: {
                        type: string;
                        address?: string | undefined;
                        link?: string | undefined;
                        displayLocationPublicly?: boolean | undefined;
                        hostPhoneNumber?: string | undefined;
                        credentialId?: number | undefined;
                        teamName?: string | undefined;
                    }[] | undefined;
                    offsetStart?: number | undefined;
                    profileId?: number | null | undefined;
                    teamId?: number | null | undefined;
                    eventName?: string | null | undefined;
                    parentId?: number | null | undefined;
                    bookingFields?: {
                        name: string;
                        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        required?: boolean | undefined;
                        label?: string | undefined;
                        placeholder?: string | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "address" | "phone";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    name: string;
                                    type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                                    required?: boolean | undefined;
                                    label?: string | undefined;
                                    placeholder?: string | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    periodType?: "UNLIMITED" | "ROLLING" | "ROLLING_WINDOW" | "RANGE" | undefined;
                    periodStartDate?: Date | null | undefined;
                    periodEndDate?: Date | null | undefined;
                    periodDays?: number | null | undefined;
                    periodCountCalendarDays?: boolean | null | undefined;
                    lockTimeZoneToggleOnBookingPage?: boolean | undefined;
                    requiresConfirmation?: boolean | undefined;
                    requiresBookerEmailVerification?: boolean | undefined;
                    recurringEvent?: {
                        interval: number;
                        count: number;
                        freq: import('../../../prisma/zod-utils').Frequency;
                        dtstart?: Date | undefined;
                        until?: Date | undefined;
                        tzid?: string | undefined;
                    } | null | undefined;
                    disableGuests?: boolean | undefined;
                    hideCalendarNotes?: boolean | undefined;
                    minimumBookingNotice?: number | undefined;
                    beforeEventBuffer?: number | undefined;
                    afterEventBuffer?: number | undefined;
                    seatsPerTimeSlot?: number | null | undefined;
                    onlyShowFirstAvailableSlot?: boolean | undefined;
                    seatsShowAttendees?: boolean | null | undefined;
                    seatsShowAvailabilityCount?: boolean | null | undefined;
                    schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                    scheduleId?: number | null | undefined;
                    slotInterval?: number | null | undefined;
                    successRedirectUrl?: string | null | undefined;
                    forwardParamsSuccessRedirect?: boolean | null | undefined;
                    bookingLimits?: {
                        PER_DAY?: number | undefined;
                        PER_WEEK?: number | undefined;
                        PER_MONTH?: number | undefined;
                        PER_YEAR?: number | undefined;
                    } | null | undefined;
                    durationLimits?: {
                        PER_DAY?: number | undefined;
                        PER_WEEK?: number | undefined;
                        PER_MONTH?: number | undefined;
                        PER_YEAR?: number | undefined;
                    } | null | undefined;
                    isInstantEvent?: boolean | undefined;
                    assignAllTeamMembers?: boolean | undefined;
                    useEventTypeDestinationCalendarEmail?: boolean | undefined;
                    secondaryEmailId?: number | null | undefined;
                    hashedLink?: string | undefined;
                    destinationCalendar?: {
                        externalId: string;
                        integration: string;
                    } | null | undefined;
                    customInputs?: {
                        required: boolean;
                        label: string;
                        placeholder: string;
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        eventTypeId: number;
                        options?: {
                            label: string;
                            type: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[] | undefined;
                    aiPhoneCallConfig?: {
                        enabled: boolean;
                        generalPrompt: string;
                        beginMessage: string | null;
                        yourPhoneNumber?: string | undefined;
                        numberToCall?: string | undefined;
                        guestName?: string | undefined;
                        guestEmail?: string | null | undefined;
                        guestCompany?: string | null | undefined;
                    } | undefined;
                    calAiPhoneScript?: string | undefined;
                };
                output: {
                    eventType: {
                        title: string;
                        team: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                user: {
                                    email: string;
                                    name: string | null;
                                    id: number;
                                    eventTypes: {
                                        slug: string;
                                    }[];
                                };
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            parent: {
                                slug: string | null;
                            } | null;
                            slug: string | null;
                            parentId: number | null;
                        } | null;
                        workflows: {
                            workflowId: number;
                        }[];
                        children: {
                            userId: number | null;
                        }[];
                        aiPhoneCallConfig: {
                            enabled: boolean;
                            generalPrompt: string;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                    };
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    users?: number[] | undefined;
                };
                output: {
                    id: number;
                };
            }>;
            duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    users?: number[] | undefined;
                    title: string;
                    description: string;
                    length: number;
                    slug: string;
                };
                output: {
                    eventType: {
                        price: number;
                        title: string;
                        description: string | null;
                        hidden: boolean;
                        length: number;
                        currency: string;
                        id: number;
                        timeZone: string | null;
                        userId: number | null;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        position: number;
                        slug: string;
                        locations: import('../../../prisma-client').Prisma.JsonValue;
                        offsetStart: number;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                        periodType: import('../../../prisma-client').$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                        durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                        isInstantEvent: boolean;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        secondaryEmailId: number | null;
                    };
                };
            }>;
            bulkEventFetch: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    eventTypes: {
                        logo: string | undefined;
                        title: string;
                        id: number;
                        locations: import('../../../prisma-client').Prisma.JsonValue;
                    }[];
                };
            }>;
            bulkUpdateToDefaultLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeIds: number[];
                };
                output: import('../../../prisma-client/runtime/library').GetBatchResult;
            }>;
        }>;
        availability: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    schedules: {
                        isDefault: boolean;
                        name: string;
                        availability: {
                            days: number[];
                            date: Date | null;
                            id: number;
                            startTime: Date;
                            endTime: Date;
                            eventTypeId: number | null;
                            userId: number | null;
                            scheduleId: number | null;
                        }[];
                        id: number;
                        timeZone: string | null;
                    }[];
                };
            }>;
            user: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    username: string;
                    dateFrom: string;
                    dateTo: string;
                    eventTypeId?: string | number | undefined;
                    withSource?: boolean | undefined;
                };
                output: {
                    busy: import("@calcom/types/Calendar").EventBusyDetails[];
                    timeZone: string;
                    dateRanges: import('../../../lib/date-ranges').DateRange[];
                    oooExcludedDateRanges: import('../../../lib/date-ranges').DateRange[];
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    dateOverrides: import("@calcom/types/schedule").TimeRange[];
                    currentSeats: {
                        uid: string;
                        startTime: Date;
                        _count: {
                            attendees: number;
                        };
                    }[] | null;
                    datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                };
            }>;
            listTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    limit: number;
                    loggedInUsersTz: string;
                    startDate: string;
                    endDate: string;
                    cursor?: number | null | undefined;
                    teamId?: number | undefined;
                };
                output: {
                    rows: ({
                        id: number;
                        organizationId: number | null;
                        name: string | null;
                        username: string | null;
                        email: string;
                        timeZone: string;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        defaultScheduleId: number;
                        dateRanges: import('../../../lib/date-ranges').DateRange[];
                        avatarUrl?: undefined;
                        profile?: undefined;
                    } | {
                        id: number;
                        username: string | null;
                        email: string;
                        avatarUrl: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        organizationId: number | null;
                        name: string | null;
                        timeZone: string;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        defaultScheduleId: number;
                        dateRanges: import('../../../lib/date-ranges').DateRange[];
                    })[];
                    nextCursor: number | undefined;
                    meta: {
                        totalRowCount: number;
                    };
                };
            }>;
            schedule: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        scheduleId?: number | undefined;
                        isManagedEventType?: boolean | undefined;
                    };
                    output: import('../../../lib').ScheduleWithAvailabilitiesForWeb;
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        schedule?: {
                            start: Date;
                            end: Date;
                        }[][] | undefined;
                        eventTypeId?: number | undefined;
                    };
                    output: {
                        schedule: {
                            name: string;
                            id: number;
                            timeZone: string | null;
                            userId: number;
                        };
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        scheduleId: number;
                    };
                    output: void;
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        scheduleId: number;
                        timeZone?: string | undefined;
                        name?: string | undefined;
                        isDefault?: boolean | undefined;
                        schedule?: {
                            start: Date;
                            end: Date;
                        }[][] | undefined;
                        dateOverrides?: {
                            start: Date;
                            end: Date;
                        }[] | undefined;
                    };
                    output: {
                        schedule: {
                            name: string;
                            id: number;
                            userId: number;
                        };
                        isDefault: boolean;
                        availability?: undefined;
                        timeZone?: undefined;
                        prevDefaultId?: undefined;
                        currentDefaultId?: undefined;
                    } | {
                        schedule: {
                            name: string;
                            availability: {
                                days: number[];
                                date: Date | null;
                                id: number;
                                startTime: Date;
                                endTime: Date;
                                eventTypeId: number | null;
                                userId: number | null;
                                scheduleId: number | null;
                            }[];
                            eventType: {
                                id: number;
                                eventName: string | null;
                            }[];
                            id: number;
                            timeZone: string | null;
                            userId: number;
                        };
                        availability: import("@calcom/types/schedule").Schedule;
                        timeZone: string;
                        isDefault: boolean;
                        prevDefaultId: number | null;
                        currentDefaultId: number | null;
                    };
                }>;
                duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        scheduleId: number;
                    };
                    output: {
                        schedule: {
                            name: string;
                            id: number;
                            timeZone: string | null;
                            userId: number;
                        };
                    };
                }>;
                getScheduleByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        userId?: number | undefined;
                    };
                    output: {
                        hasDefaultSchedule: boolean;
                        name: string;
                        id: number;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            days: number[];
                            startTime: Date;
                            endTime: Date;
                            date: Date | null;
                            scheduleId: number | null;
                        }[];
                        availability: {
                            end: Date;
                            userId?: number | null | undefined;
                            start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                            ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                    } | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                        hasDefaultSchedule: boolean;
                    };
                }>;
                getScheduleByEventSlug: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        eventSlug: string;
                    };
                    output: import('../../../lib').ScheduleWithAvailabilitiesForWeb | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                    };
                }>;
                bulkUpdateToDefaultAvailability: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeIds: number[];
                    };
                    output: import('../../../prisma-client/runtime/library').GetBatchResult;
                }>;
            }>;
            calendarOverlay: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    loggedInUsersTz: string;
                    dateFrom: string | null;
                    dateTo: string | null;
                    calendarsToLoad: {
                        credentialId: number;
                        externalId: string;
                    }[];
                };
                output: import("@calcom/types/Calendar").EventBusyDate[];
            }>;
        }>;
        teams: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    isOrg?: boolean | undefined;
                };
                output: {
                    members: {
                        username: string | null;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        organizationId: number | null;
                        organization: any;
                        accepted: boolean;
                        disableImpersonation: boolean;
                        subteams: (string | null)[] | null;
                        bookerUrl: string;
                        connectedApps: {
                            name: any;
                            logo: any;
                            app: {
                                categories: import('../../../prisma-client').$Enums.AppCategories[];
                                slug: string;
                            } | null;
                            externalId: string | null;
                        }[] | null;
                        email: string;
                        name: string | null;
                        teams: {
                            team: {
                                id: number;
                                slug: string | null;
                            };
                        }[];
                        bio: string | null;
                        id: number;
                        avatarUrl: string | null;
                        nonProfileUsername: string | null;
                    }[];
                    safeBio: string;
                    membership: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        accepted: boolean;
                    };
                    inviteToken: {
                        expires: Date;
                        identifier: string;
                        token: string;
                        expiresInDays: number | null;
                    } | undefined;
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                    };
                    eventTypes: {
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {} | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {} | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {} | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {} | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {} | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    price?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    profile?: true | undefined;
                                    owner?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    hidden?: true | undefined;
                                    team?: true | undefined;
                                    availability?: true | undefined;
                                    length?: true | undefined;
                                    workflows?: true | undefined;
                                    users?: true | undefined;
                                    hosts?: true | undefined;
                                    currency?: true | undefined;
                                    children?: true | undefined;
                                    schedule?: true | undefined;
                                    timeZone?: true | undefined;
                                    userId?: true | undefined;
                                    metadata?: true | undefined;
                                    position?: true | undefined;
                                    parent?: true | undefined;
                                    slug?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hashedLink?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    customInputs?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                                defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                            } | null | undefined;
                        } | null;
                        users: ({
                            username: string | null;
                            email: string;
                            name: string | null;
                            teams: {
                                team: {
                                    id: number;
                                    slug: string | null;
                                };
                            }[];
                            bio: string | null;
                            id: number;
                            avatarUrl: string | null;
                            credentials: {
                                app: {
                                    categories: import('../../../prisma-client').$Enums.AppCategories[];
                                    slug: string;
                                } | null;
                                destinationCalendars: {
                                    externalId: string;
                                }[];
                            }[];
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        })[];
                        price: number;
                        title: string;
                        description: string | null;
                        hidden: boolean;
                        length: number;
                        hosts: {
                            user: {
                                username: string | null;
                                email: string;
                                name: string | null;
                                teams: {
                                    team: {
                                        id: number;
                                        slug: string | null;
                                    };
                                }[];
                                bio: string | null;
                                id: number;
                                avatarUrl: string | null;
                                credentials: {
                                    app: {
                                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                                        slug: string;
                                    } | null;
                                    destinationCalendars: {
                                        externalId: string;
                                    }[];
                                }[];
                            };
                        }[];
                        currency: string;
                        id: number;
                        slug: string;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                        schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                    }[] | null;
                    logo?: string | undefined;
                    name: string;
                    bio: string | null;
                    theme: string | null;
                    children: {
                        name: string;
                        slug: string | null;
                    }[];
                    id: number;
                    parent: {
                        name: string;
                        id: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                        isOrganization: boolean;
                    } | null;
                    slug: string | null;
                    parentId: number | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    logoUrl: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    isOrganization: boolean;
                };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includeOrgs?: boolean | undefined;
                } | undefined;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                    } | null;
                    inviteToken: {
                        expires: Date;
                        identifier: string;
                        id: number;
                        teamId: number | null;
                        secondaryEmailId: number | null;
                        token: string;
                        createdAt: Date;
                        updatedAt: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    name: string;
                    id: number;
                    parent: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    } | null;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    isOrganization: boolean;
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    accepted: boolean;
                }[];
            }>;
            listOwnedTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                    } | null;
                    inviteToken: {
                        expires: Date;
                        identifier: string;
                        id: number;
                        teamId: number | null;
                        secondaryEmailId: number | null;
                        token: string;
                        createdAt: Date;
                        updatedAt: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    name: string;
                    id: number;
                    parent: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    } | null;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    isOrganization: boolean;
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    accepted: boolean;
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    slug: string;
                    logo?: string | null | undefined;
                };
                output: {
                    url: string;
                    message: string;
                    team: null;
                } | {
                    url: string;
                    message: string;
                    team: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    };
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    bio?: string | undefined;
                    name?: string | undefined;
                    logo?: string | null | undefined;
                    slug?: string | undefined;
                    hideBranding?: boolean | undefined;
                    hideBookATeamMember?: boolean | undefined;
                    isPrivate?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                };
                output: {
                    logoUrl: string | null;
                    name: string;
                    bio: string | null;
                    slug: string | null;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                } | undefined;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                };
                output: void;
            }>;
            removeMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    memberId: number;
                    isOrg?: boolean | undefined;
                };
                output: void;
            }>;
            inviteMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    role: "ADMIN" | "MEMBER" | "OWNER";
                    language: string;
                    teamId: number;
                    usernameOrEmail: (string | string[]) & (string | string[] | undefined);
                    isOrg?: boolean | undefined;
                };
                output: {
                    role: "ADMIN" | "MEMBER" | "OWNER";
                    language: string;
                    teamId: number;
                    isOrg: boolean;
                    usernameOrEmail: (string | string[]) & (string | string[] | undefined);
                };
            }>;
            acceptOrLeave: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    accept: boolean;
                    teamId: number;
                };
                output: void;
            }>;
            changeMemberRole: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    role: "ADMIN" | "MEMBER" | "OWNER";
                    teamId: number;
                    memberId: number;
                };
                output: void;
            }>;
            getMemberAvailability: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    timezone: string;
                    dateFrom: string;
                    dateTo: string;
                    teamId: number;
                    memberId: number;
                };
                output: {
                    busy: import("@calcom/types/Calendar").EventBusyDetails[];
                    timeZone: string;
                    dateRanges: import('../../../lib/date-ranges').DateRange[];
                    oooExcludedDateRanges: import('../../../lib/date-ranges').DateRange[];
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    dateOverrides: import("@calcom/types/schedule").TimeRange[];
                    currentSeats: {
                        uid: string;
                        startTime: Date;
                        _count: {
                            attendees: number;
                        };
                    }[] | null;
                    datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                };
            }>;
            getMembershipbyUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    memberId: number;
                };
                output: {
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                } | null;
            }>;
            updateMembership: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    disableImpersonation: boolean;
                    memberId: number;
                };
                output: {
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                };
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                };
                output: {
                    url: string;
                    message: string;
                };
            }>;
            getUpgradeable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    team: {
                        children: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        }[];
                    } & {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    };
                } & {
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamIds?: number[] | undefined;
                };
                output: ({
                    username: string | null;
                    name: string | null;
                    id: number;
                } & {
                    accepted: boolean;
                } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                })[];
            }>;
            hasTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    hasTeamPlan: boolean;
                };
            }>;
            listInvites: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
            }>;
            createInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    token?: string | undefined;
                };
                output: {
                    token: string;
                    inviteLink: string;
                };
            }>;
            setInviteExpiration: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                    expiresInDays?: number | undefined;
                };
                output: void;
            }>;
            deleteInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: void;
            }>;
            inviteMemberByToken: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: string;
            }>;
            hasEditPermissionForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    memberId: number;
                };
                output: boolean;
            }>;
            resendInvitation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    language: string;
                    teamId: number;
                    isOrg?: boolean | undefined;
                };
                output: {
                    email: string;
                    language: string;
                    teamId: number;
                    isOrg: boolean;
                };
            }>;
        }>;
        timezones: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            cityTimezones: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    city: string;
                    timezone: string;
                    pop: number;
                }[];
            }>;
        }>;
        organizations: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    slug: string;
                    orgOwnerEmail: string;
                    language?: string | undefined;
                    seats?: number | undefined;
                    pricePerSeat?: number | undefined;
                    isPlatform?: boolean | undefined;
                };
                output: {
                    userId: number;
                    email: string;
                    organizationId: number;
                    upId: string;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name?: string | undefined;
                    orgId?: string | number | undefined;
                    bio?: string | undefined;
                    logoUrl?: string | null | undefined;
                    calVideoLogo?: string | null | undefined;
                    banner?: string | null | undefined;
                    slug?: string | undefined;
                    hideBranding?: boolean | undefined;
                    hideBookATeamMember?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    timeFormat?: number | undefined;
                    metadata?: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                    } | undefined;
                    lockEventTypeCreation?: boolean | undefined;
                    lockEventTypeCreationOptions?: "DELETE" | "HIDE" | undefined;
                    adminGetsNoSlotsNotification?: boolean | undefined;
                };
                output: {
                    update: boolean;
                    userId: number;
                    data: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    };
                };
            }>;
            verifyCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    code: string;
                };
                output: true;
            }>;
            createTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    orgId: number;
                    teamNames: string[];
                    moveTeams: {
                        id: number;
                        newSlug: string | null;
                        shouldMove: boolean;
                    }[];
                };
                output: {
                    duplicatedSlugs: string[];
                };
            }>;
            listCurrent: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                    } | null;
                    name: string;
                    logo: string | null;
                    bio: string | null;
                    theme: string | null;
                    id: number;
                    timeFormat: number | null;
                    weekStart: string;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                    createdAt: Date;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    canAdminImpersonate: boolean;
                    organizationSettings: {
                        lockEventTypeCreationForUsers: boolean | undefined;
                        adminGetsNoSlotsNotification: boolean | undefined;
                    };
                    user: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        accepted: boolean;
                    };
                };
            }>;
            checkIfOrgNeedsUpgrade: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    team: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    };
                } & {
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    url: string;
                    message: string;
                };
            }>;
            setPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    newPassword: string;
                };
                output: {
                    update: boolean;
                };
            }>;
            getMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamIdToExclude?: number | undefined;
                    accepted?: boolean | undefined;
                    distinctUser?: boolean | undefined;
                };
                output: {
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    user: {
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        completedOnboarding: boolean;
                    };
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    limit: number;
                    cursor?: number | null | undefined;
                    searchTerm?: string | undefined;
                };
                output: {
                    canUserGetMembers: boolean;
                    rows: never[];
                    meta: {
                        totalRowCount: number;
                    };
                    nextCursor?: undefined;
                } | {
                    rows: {
                        id: number;
                        username: string | null;
                        email: string;
                        timeZone: string;
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        accepted: boolean;
                        disableImpersonation: boolean;
                        completedOnboarding: boolean;
                        avatarUrl: string | null;
                        teams: ({
                            id: number;
                            name: string;
                            slug: string | null;
                        } | undefined)[];
                    }[];
                    nextCursor: number | undefined;
                    meta: {
                        totalRowCount: number;
                    };
                    canUserGetMembers?: undefined;
                };
            }>;
            getBrand: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                    } | null;
                    slug: string;
                    fullDomain: string;
                    domainSuffix: string;
                    name: string;
                    logoUrl: string | null;
                } | null;
            }>;
            getUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    userId?: number | undefined;
                };
                output: {
                    teams: {
                        accepted: boolean;
                        name: string;
                        id: number;
                    }[];
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    username: string | null;
                    email: string;
                    name: string | null;
                    bio: string | null;
                    schedules: {
                        name: string;
                        id: number;
                    }[];
                    id: number;
                    timeZone: string;
                };
            }>;
            updateUser: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    role: "ADMIN" | "MEMBER" | "OWNER";
                    timeZone: string;
                    userId: number;
                    username?: string | undefined;
                    bio?: string | undefined;
                    name?: string | undefined;
                    email?: string | undefined;
                    avatar?: string | undefined;
                };
                output: {
                    success: boolean;
                };
            }>;
            getTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    name: string;
                    id: number;
                }[];
            }>;
            bulkAddToTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                    teamIds: number[];
                };
                output: {
                    success: boolean;
                    invitedTotalUsers: number;
                };
            }>;
            bulkDeleteUsers: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                };
                output: {
                    success: boolean;
                    usersDeleted: number;
                };
            }>;
            listOtherTeamMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    limit: number;
                    teamId: number;
                    query?: string | undefined;
                    offset?: number | undefined;
                    cursor?: number | null | undefined;
                };
                output: {
                    rows: {
                        bookerUrl: string;
                        user: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        };
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                    nextCursor: number | null | undefined;
                };
            }>;
            getOtherTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                };
                output: {
                    safeBio: string;
                    name: string;
                    bio: string | null;
                    id: number;
                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                    parent: {
                        id: number;
                        slug: string | null;
                    } | null;
                    slug: string | null;
                    logoUrl: string | null;
                    isPrivate: boolean;
                };
            }>;
            listOtherTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    name: string;
                    logo: string | null;
                    bio: string | null;
                    theme: string | null;
                    id: number;
                    timeFormat: number | null;
                    weekStart: string;
                    timeZone: string;
                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                    slug: string | null;
                    parentId: number | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                    createdAt: Date;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                }[];
            }>;
            deleteTeam: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                };
                output: void;
            }>;
            adminGetAll: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                    } | null;
                    members: {
                        user: {
                            email: string;
                            name: string | null;
                            id: number;
                        };
                    }[];
                    name: string;
                    id: number;
                    slug: string | null;
                    organizationSettings: {
                        id: number;
                        isOrganizationVerified: boolean;
                        isOrganizationConfigured: boolean;
                        isAdminReviewed: boolean;
                        orgAutoAcceptEmail: string;
                        organizationId: number;
                        lockEventTypeCreationForUsers: boolean;
                        adminGetsNoSlotsNotification: boolean;
                    } | null;
                }[];
            }>;
            adminGet: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: number;
                };
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                    } | null;
                    members: {
                        user: {
                            email: string;
                            name: string | null;
                            id: number;
                        };
                    }[];
                    name: string;
                    id: number;
                    slug: string | null;
                    isOrganization: boolean;
                    organizationSettings: {
                        isOrganizationVerified: boolean;
                        isOrganizationConfigured: boolean;
                        orgAutoAcceptEmail: string;
                    } | null;
                };
            }>;
            adminUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    name?: string | undefined;
                    slug?: string | null | undefined;
                    organizationSettings?: {
                        isOrganizationVerified?: boolean | undefined;
                        isOrganizationConfigured?: boolean | undefined;
                        isAdminReviewed?: boolean | undefined;
                        orgAutoAcceptEmail?: string | undefined;
                    } | undefined;
                };
                output: {
                    name: string;
                    logo: string | null;
                    bio: string | null;
                    theme: string | null;
                    id: number;
                    timeFormat: number | null;
                    weekStart: string;
                    timeZone: string;
                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                    slug: string | null;
                    parentId: number | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                    createdAt: Date;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                };
            }>;
            adminVerify: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    orgId: number;
                };
                output: {
                    ok: boolean;
                    message: string;
                };
            }>;
            adminDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    orgId: number;
                };
                output: {
                    ok: boolean;
                    message: string;
                };
            }>;
            createPhoneCall: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    guestName: string;
                    generalPrompt: string;
                    beginMessage: string | null;
                    calApiKey: string;
                    guestEmail?: string | null | undefined;
                    guestCompany?: string | null | undefined;
                };
                output: import("zod").objectOutputType<{
                    call_id: import("zod").ZodString;
                    agent_id: import("zod").ZodString;
                }, import("zod").ZodTypeAny, "passthrough">;
            }>;
        }>;
        webhook: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    appId?: string | undefined;
                    eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING")[] | undefined;
                } | undefined;
                output: {
                    active: boolean;
                    secret: string | null;
                    id: string;
                    eventTypeId: number | null;
                    userId: number | null;
                    teamId: number | null;
                    appId: string | null;
                    createdAt: Date;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                    platform: boolean;
                }[];
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    webhookId?: string | undefined;
                };
                output: {
                    active: boolean;
                    secret: string | null;
                    id: string;
                    userId: number | null;
                    teamId: number | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                    platform: boolean;
                };
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    active: boolean;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    eventTriggers: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING")[];
                    appId?: string | null | undefined;
                    secret?: string | null | undefined;
                    platform?: boolean | undefined;
                };
                output: {
                    id: string;
                    userId: number | null;
                    teamId: number | null;
                    eventTypeId: number | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    createdAt: Date;
                    active: boolean;
                    eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                    appId: string | null;
                    secret: string | null;
                    platform: boolean;
                };
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    payloadTemplate: string | null;
                    subscriberUrl?: string | undefined;
                    eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING")[] | undefined;
                    active?: boolean | undefined;
                    appId?: string | null | undefined;
                    secret?: string | null | undefined;
                };
                output: {
                    active: boolean;
                    secret: string | null;
                    id: string;
                    eventTypeId: number | null;
                    userId: number | null;
                    teamId: number | null;
                    appId: string | null;
                    createdAt: Date;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                    platform: boolean;
                } | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                };
                output: {
                    id: string;
                };
            }>;
            testTrigger: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    url: string;
                    type: string;
                    secret?: string | undefined;
                    payloadTemplate?: string | null | undefined;
                };
                output: {
                    message?: string | undefined;
                    ok: boolean;
                    status: number;
                };
            }>;
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                } | undefined;
                output: {
                    webhookGroups: {
                        teamId?: number | null | undefined;
                        profile: {
                            slug: string | null;
                            name: string | null;
                            image?: string | undefined;
                        };
                        metadata?: {
                            readOnly: boolean;
                        } | undefined;
                        webhooks: {
                            id: string;
                            userId: number | null;
                            teamId: number | null;
                            eventTypeId: number | null;
                            subscriberUrl: string;
                            payloadTemplate: string | null;
                            createdAt: Date;
                            active: boolean;
                            eventTriggers: import('../../../prisma-client').$Enums.WebhookTriggerEvents[];
                            appId: string | null;
                            secret: string | null;
                            platform: boolean;
                        }[];
                    }[];
                    profiles: {
                        readOnly?: boolean | undefined;
                        slug: string | null;
                        name: string | null;
                        image?: string | undefined;
                        teamId: number | null | undefined;
                    }[];
                };
            }>;
        }>;
        apiKeys: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: string;
                    userId: number;
                    teamId: number | null;
                    appId: string | null;
                    createdAt: Date;
                    note: string | null;
                    expiresAt: Date | null;
                    lastUsedAt: Date | null;
                    hashedKey: string;
                }[];
            }>;
            findKeyOfType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appId?: string | undefined;
                    teamId?: number | undefined;
                };
                output: {
                    id: string;
                    userId: number;
                    teamId: number | null;
                    appId: string | null;
                    createdAt: Date;
                    note: string | null;
                    expiresAt: Date | null;
                    lastUsedAt: Date | null;
                    hashedKey: string;
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    note?: string | null | undefined;
                    expiresAt?: Date | null | undefined;
                    neverExpires?: boolean | undefined;
                    appId?: string | null | undefined;
                    teamId?: number | undefined;
                };
                output: string;
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    note?: string | null | undefined;
                    expiresAt?: Date | undefined;
                };
                output: {
                    id: string;
                    userId: number;
                    teamId: number | null;
                    appId: string | null;
                    createdAt: Date;
                    note: string | null;
                    expiresAt: Date | null;
                    lastUsedAt: Date | null;
                    hashedKey: string;
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    eventTypeId?: number | undefined;
                };
                output: {
                    id: string;
                };
            }>;
        }>;
        slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startTime: string;
                    endTime: string;
                    eventTypeId?: number | undefined;
                    eventTypeSlug?: string | undefined;
                    timeZone?: string | undefined;
                    usernameList?: string[] | undefined;
                    debug?: boolean | undefined;
                    duration?: string | undefined;
                    rescheduleUid?: string | null | undefined;
                    isTeamEvent?: boolean | undefined;
                    orgSlug?: string | undefined;
                };
                output: import("./viewer/slots/util").IGetAvailableSlots;
            }>;
            reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    slotUtcStartDate: string;
                    slotUtcEndDate: string;
                    bookingUid?: string | undefined;
                };
                output: {
                    uid: string;
                };
            }>;
            removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    uid: string | null;
                };
                output: void;
            }>;
        }>;
        workflows: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                    userId?: number | undefined;
                } | undefined;
                output: {
                    workflows: import('../../../features/ee/workflows/components/WorkflowListPage').WorkflowType[];
                };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: number;
                };
                output: {
                    name: string;
                    team: {
                        members: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                        name: string;
                        id: number;
                        slug: string | null;
                    } | null;
                    trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                    id: number;
                    userId: number | null;
                    time: number | null;
                    teamId: number | null;
                    timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                    activeOn: {
                        eventType: {
                            price: number;
                            title: string;
                            description: string | null;
                            hidden: boolean;
                            length: number;
                            currency: string;
                            id: number;
                            timeZone: string | null;
                            userId: number | null;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            position: number;
                            slug: string;
                            locations: import('../../../prisma-client').Prisma.JsonValue;
                            offsetStart: number;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                            periodType: import('../../../prisma-client').$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                            durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                            isInstantEvent: boolean;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            secondaryEmailId: number | null;
                        };
                    }[];
                    steps: {
                        action: import('../../../prisma-client').$Enums.WorkflowActions;
                        id: number;
                        template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                        stepNumber: number;
                        workflowId: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        numberVerificationPending: boolean;
                        includeCalendarEvent: boolean;
                    }[];
                } | null;
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    workflow: {
                        id: number;
                        position: number;
                        name: string;
                        userId: number | null;
                        teamId: number | null;
                        trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                        time: number | null;
                        timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                    };
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                };
                output: {
                    id: number;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    trigger: "BEFORE_EVENT" | "EVENT_CANCELLED" | "NEW_EVENT" | "AFTER_EVENT" | "RESCHEDULE_EVENT";
                    id: number;
                    time: number | null;
                    timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
                    activeOn: number[];
                    steps: {
                        action: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                        id: number;
                        template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                        stepNumber: number;
                        workflowId: number;
                        numberRequired: boolean | null;
                        includeCalendarEvent: boolean;
                        sendTo?: string | null | undefined;
                        reminderBody?: string | null | undefined;
                        emailSubject?: string | null | undefined;
                        sender?: string | null | undefined;
                        senderName?: string | null | undefined;
                    }[];
                };
                output: {
                    workflow: ({
                        team: {
                            members: {
                                role: import('../../../prisma-client').$Enums.MembershipRole;
                                id: number;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                            name: string;
                            id: number;
                            slug: string | null;
                        } | null;
                        activeOn: {
                            eventType: {
                                price: number;
                                title: string;
                                description: string | null;
                                hidden: boolean;
                                length: number;
                                currency: string;
                                id: number;
                                timeZone: string | null;
                                userId: number | null;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                position: number;
                                slug: string;
                                locations: import('../../../prisma-client').Prisma.JsonValue;
                                offsetStart: number;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import('../../../prisma-client').Prisma.JsonValue;
                                periodType: import('../../../prisma-client').$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import('../../../prisma-client').Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                forwardParamsSuccessRedirect: boolean | null;
                                bookingLimits: import('../../../prisma-client').Prisma.JsonValue;
                                durationLimits: import('../../../prisma-client').Prisma.JsonValue;
                                isInstantEvent: boolean;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                secondaryEmailId: number | null;
                            };
                        }[];
                        steps: {
                            action: import('../../../prisma-client').$Enums.WorkflowActions;
                            id: number;
                            template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                            stepNumber: number;
                            workflowId: number;
                            sendTo: string | null;
                            reminderBody: string | null;
                            emailSubject: string | null;
                            numberRequired: boolean | null;
                            sender: string | null;
                            numberVerificationPending: boolean;
                            includeCalendarEvent: boolean;
                        }[];
                    } & {
                        name: string;
                        trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
                        id: number;
                        userId: number | null;
                        time: number | null;
                        position: number;
                        teamId: number | null;
                        timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
                    }) | null;
                };
            }>;
            activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    workflowId: number;
                };
                output: void;
            }>;
            sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    phoneNumber: string;
                };
                output: void;
            }>;
            verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    code: string;
                    phoneNumber: string;
                    teamId?: number | undefined;
                };
                output: boolean;
            }>;
            getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    id: number;
                    userId: number | null;
                    teamId: number | null;
                    phoneNumber: string;
                }[];
            }>;
            getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    id: number;
                    userId: number | null;
                    teamId: number | null;
                    email: string;
                }[];
            }>;
            verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    code: string;
                    teamId?: number | undefined;
                };
                output: true;
            }>;
            getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    label: string;
                    value: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                    needsTeamsUpgrade: boolean;
                }[];
            }>;
            filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                    } | undefined;
                } | null | undefined;
                output: {
                    filtered: import('../../../features/ee/workflows/components/WorkflowListPage').WorkflowType[];
                    totalCount: number;
                } | undefined;
            }>;
        }>;
        saml: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number | null;
                };
                output: import('../../../features/ee/sso/lib/saml').SSOConnection | null;
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number | null;
                    encodedRawMetadata: string;
                };
                output: import("@boxyhq/saml-jackson").SAMLSSORecord;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number | null;
                };
                output: void;
            }>;
            updateOIDC: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    clientId: string;
                    teamId: number | null;
                    clientSecret: string;
                    wellKnownUrl: string;
                };
                output: import("@boxyhq/saml-jackson").OIDCSSORecord;
            }>;
        }>;
        dsync: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    organizationId: number | null;
                    provider: string;
                };
                output: import("@boxyhq/saml-jackson").Directory;
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    organizationId: number | null;
                };
                output: import("@boxyhq/saml-jackson").Directory | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    organizationId: number | null;
                    directoryId: string;
                };
                output: null;
            }>;
            teamGroupMapping: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        teamGroupMapping: {
                            id: number;
                            name: string;
                            slug: string | null;
                            directoryId: string;
                            groupNames: string[];
                        }[];
                    };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        teamId: number;
                        directoryId: string;
                    };
                    output: {
                        newGroupName: string;
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                        groupName: string;
                    };
                    output: {
                        deletedGroupName: string;
                    };
                }>;
            }>;
        }>;
        insights: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            eventsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    memberUserId?: number | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    empty: boolean;
                    created: {
                        count: number;
                        deltaPrevious: number;
                    };
                    completed: {
                        count: number;
                        deltaPrevious: number;
                    };
                    rescheduled: {
                        count: number;
                        deltaPrevious: number;
                    };
                    cancelled: {
                        count: number;
                        deltaPrevious: number;
                    };
                    rating: {
                        count: number;
                        deltaPrevious: number;
                    };
                    no_show: {
                        count: number;
                        deltaPrevious: number;
                    };
                    csat: {
                        count: number;
                        deltaPrevious: number;
                    };
                    previousRange: {
                        startDate: string;
                        endDate: string;
                    };
                };
            }>;
            eventsTimeline: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    timeView: "week" | "month" | "year" | "day";
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    memberUserId?: number | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    Month: string;
                    Created: number;
                    Completed: number;
                    Rescheduled: number;
                    Cancelled: number;
                    "No-Show (Host)": number;
                }[];
            }>;
            popularEventTypes: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    memberUserId?: number | undefined;
                    teamId?: number | null | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: ({
                    eventTypeId?: undefined;
                    eventTypeName?: undefined;
                    count?: undefined;
                } | {
                    eventTypeId: number | null;
                    eventTypeName: string;
                    count: number;
                })[];
            }>;
            averageEventDuration: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    memberUserId?: number | undefined;
                    teamId?: number | null | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    Date: string;
                    Average: number;
                }[];
            }>;
            membersWithMostBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    count: number;
                }[];
            }>;
            membersWithLeastBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    count: number;
                }[];
            }>;
            teamListForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: import('../../../features/insights/server/trpc-router').IResultTeamList[];
            }>;
            userList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number | null;
                    isAll: boolean | null;
                };
                output: {
                    username: string | null;
                    email: string;
                    name: string | null;
                    id: number;
                    avatarUrl: string | null;
                }[];
            }>;
            eventTypeList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | null | undefined;
                    userId?: number | null | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    title: string;
                    team: {
                        name: string;
                    } | null;
                    id: number;
                    slug: string;
                    teamId: number | null;
                }[];
            }>;
            recentRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    rating: number | null;
                    feedback: string | null;
                }[];
            }>;
            membersWithMostNoShow: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    count: number;
                }[];
            }>;
            membersWithHighestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    averageRating: number | null;
                }[];
            }>;
            membersWithLowestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    averageRating: number | null;
                }[];
            }>;
            rawData: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    userId?: number | null | undefined;
                    memberUserId?: number | null | undefined;
                    isAll?: boolean | undefined;
                    eventTypeId?: number | null | undefined;
                };
                output: {
                    data: string;
                    filename: string;
                };
            }>;
        }>;
        payments: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            chargeCard: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                };
                output: {
                    id: number;
                    uid: string;
                    appId: string | null;
                    bookingId: number;
                    amount: number;
                    fee: number;
                    currency: string;
                    success: boolean;
                    refunded: boolean;
                    data: import('../../../prisma-client').Prisma.JsonValue;
                    externalId: string;
                    paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
                };
            }>;
        }>;
        appRoutingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                response: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        response: Record<string, {
                            label: string;
                            value: (string | number | string[]) & (string | number | string[] | undefined);
                        }>;
                        formFillerId: string;
                        formId: string;
                    };
                    output: {
                        id: number;
                        response: import('../../../prisma-client').Prisma.JsonValue;
                        createdAt: Date;
                        formFillerId: string;
                        formId: string;
                    };
                }>;
            }>;
            forms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                    } | undefined;
                } | null | undefined;
                output: {
                    filtered: {
                        form: import('../../../app-store/routing-forms/types/types').SerializableForm<{
                            team: ({
                                members: {
                                    role: import('../../../prisma-client').$Enums.MembershipRole;
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                            } & {
                                name: string;
                                logo: string | null;
                                bio: string | null;
                                theme: string | null;
                                id: number;
                                timeFormat: number | null;
                                weekStart: string;
                                timeZone: string;
                                metadata: import('../../../prisma-client').Prisma.JsonValue;
                                slug: string | null;
                                parentId: number | null;
                                hideBranding: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                                createdAt: Date;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                bannerUrl: string | null;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                            }) | null;
                            _count: {
                                responses: number;
                            };
                        } & {
                            description: string | null;
                            name: string;
                            disabled: boolean;
                            settings: import('../../../prisma-client').Prisma.JsonValue;
                            id: string;
                            userId: number;
                            position: number;
                            routes: import('../../../prisma-client').Prisma.JsonValue;
                            fields: import('../../../prisma-client').Prisma.JsonValue;
                            teamId: number | null;
                            createdAt: Date;
                            updatedAt: Date;
                        }>;
                        readOnly: boolean;
                    }[];
                    totalCount: number;
                };
            }>;
            formQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: string;
                };
                output: import('../../../app-store/routing-forms/types/types').SerializableForm<{
                    team: {
                        name: string;
                        slug: string | null;
                    } | null;
                    _count: {
                        responses: number;
                    };
                } & {
                    description: string | null;
                    name: string;
                    disabled: boolean;
                    settings: import('../../../prisma-client').Prisma.JsonValue;
                    id: string;
                    userId: number;
                    position: number;
                    routes: import('../../../prisma-client').Prisma.JsonValue;
                    fields: import('../../../prisma-client').Prisma.JsonValue;
                    teamId: number | null;
                    createdAt: Date;
                    updatedAt: Date;
                }> | null;
            }>;
            formMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    id: string;
                    description?: string | null | undefined;
                    disabled?: boolean | undefined;
                    fields?: ({
                        label: string;
                        type: string;
                        id: string;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                        required?: boolean | undefined;
                        deleted?: boolean | undefined;
                    } | {
                        label: string;
                        type: string;
                        id: string;
                        routerId: string;
                        required?: boolean | undefined;
                        placeholder?: string | undefined;
                        identifier?: string | undefined;
                        selectText?: string | undefined;
                        deleted?: boolean | undefined;
                    })[] | undefined;
                    routes?: ({
                        action: {
                            type: "customPageMessage" | "externalRedirectUrl" | "eventTypeRedirectUrl";
                            value: string;
                        };
                        id: string;
                        queryValue: {
                            type: "group" | "switch_group";
                            id?: string | undefined;
                            children1?: any;
                            properties?: any;
                        };
                        isFallback?: boolean | undefined;
                    } | {
                        id: string;
                        isRouter: true;
                    })[] | null | undefined;
                    addFallback?: boolean | undefined;
                    duplicateFrom?: string | null | undefined;
                    teamId?: number | null | undefined;
                    shouldConnect?: boolean | undefined;
                    settings?: {
                        emailOwnerOnSubmission: boolean;
                        sendUpdatesTo?: number[] | undefined;
                        sendToAll?: boolean | undefined;
                    } | null | undefined;
                };
                output: {
                    description: string | null;
                    name: string;
                    disabled: boolean;
                    settings: import('../../../prisma-client').Prisma.JsonValue;
                    id: string;
                    userId: number;
                    position: number;
                    routes: import('../../../prisma-client').Prisma.JsonValue;
                    fields: import('../../../prisma-client').Prisma.JsonValue;
                    teamId: number | null;
                    createdAt: Date;
                    updatedAt: Date;
                };
            }>;
            deleteForm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                };
                output: import('../../../prisma-client/runtime/library').GetBatchResult;
            }>;
            report: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    formId: string;
                    jsonLogicQuery: {
                        logic: Record<string, any> | null;
                    };
                    cursor?: number | null | undefined;
                };
                output: {
                    headers: string[];
                    responses: (string | number)[][];
                    nextCursor: number | null;
                };
            }>;
        }>;
        appBasecamp3: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            projects: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: any;
            }>;
            projectMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    projectId: string;
                };
                output: any;
            }>;
        }>;
        features: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    description: string | null;
                    enabled: boolean;
                    type: import('../../../prisma-client').$Enums.FeatureType | null;
                    slug: string;
                    createdAt: Date | null;
                    updatedAt: Date | null;
                    lastUsedAt: Date | null;
                    stale: boolean | null;
                    updatedBy: number | null;
                }[];
            }>;
            map: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: Partial<import('../../../features/flags/config').AppFlags>;
            }>;
        }>;
        appsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            listLocal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    category: string;
                };
                output: ({
                    name: string;
                    slug: string;
                    logo: string;
                    title: string | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    description: string;
                    keys: import('../../../prisma-client').Prisma.JsonObject | null;
                    dirName: string;
                    enabled: boolean;
                    isTemplate: boolean | undefined;
                } | {
                    name: string;
                    slug: string;
                    logo: string;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title: string | undefined;
                    description: string;
                    enabled: boolean;
                    dirName: string;
                    keys: Record<string, string> | null;
                    isTemplate?: undefined;
                })[];
            }>;
            toggle: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    enabled: boolean;
                    slug: string;
                };
                output: boolean;
            }>;
            saveKeys: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    type: string;
                    slug: string;
                    dirName: string;
                    keys?: unknown;
                    fromEnabled?: boolean | undefined;
                };
                output: void;
            }>;
            checkForGCal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: boolean;
            }>;
            updateAppCredentials: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    credentialId: number;
                    key: {} & {
                        [k: string]: unknown;
                    };
                };
                output: boolean;
            }>;
            queryForDependencies: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: string[] | undefined;
                output: {
                    name: string;
                    slug: string;
                    installed: boolean;
                }[] | undefined;
            }>;
            checkGlobalKeys: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    slug: string;
                };
                output: boolean;
            }>;
        }>;
        users: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    user: {
                        username: string | null;
                        email: string;
                        role: import('../../../prisma-client').$Enums.UserPermissionRole;
                        name: string | null;
                        bio: string | null;
                        theme: string | null;
                        verified: boolean | null;
                        locked: boolean;
                        id: number;
                        timeFormat: number | null;
                        defaultScheduleId: number | null;
                        weekStart: string;
                        timeZone: string;
                        startTime: number;
                        endTime: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        emailVerified: Date | null;
                        avatar: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        hideBranding: boolean;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        locale: string | null;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        away: boolean;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        disableImpersonation: boolean;
                        organizationId: number | null;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                    };
                };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    username: string | null;
                    email: string;
                    role: import('../../../prisma-client').$Enums.UserPermissionRole;
                    name: string | null;
                    bio: string | null;
                    theme: string | null;
                    verified: boolean | null;
                    locked: boolean;
                    id: number;
                    timeFormat: number | null;
                    defaultScheduleId: number | null;
                    weekStart: string;
                    timeZone: string;
                    startTime: number;
                    endTime: number;
                    metadata: import('../../../prisma-client').Prisma.JsonValue;
                    emailVerified: Date | null;
                    avatar: string | null;
                    avatarUrl: string | null;
                    bufferTime: number;
                    hideBranding: boolean;
                    appTheme: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    completedOnboarding: boolean;
                    locale: string | null;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    away: boolean;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    disableImpersonation: boolean;
                    organizationId: number | null;
                    movedToProfileId: number | null;
                    isPlatformManaged: boolean;
                    smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                }[];
            }>;
            add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    role: "USER" | "ADMIN";
                    weekStart: string;
                    timeZone: string;
                    identityProvider: "SAML" | "CAL" | "GOOGLE";
                    username?: string | null | undefined;
                    name?: string | null | undefined;
                    bio?: string | null | undefined;
                    theme?: string | null | undefined;
                    timeFormat?: number | null | undefined;
                    defaultScheduleId?: number | null | undefined;
                    avatarUrl?: string | null | undefined;
                    locale?: string | null | undefined;
                    allowDynamicBooking?: boolean | null | undefined;
                };
                output: {
                    user: {
                        username: string | null;
                        email: string;
                        role: import('../../../prisma-client').$Enums.UserPermissionRole;
                        name: string | null;
                        bio: string | null;
                        theme: string | null;
                        verified: boolean | null;
                        locked: boolean;
                        id: number;
                        timeFormat: number | null;
                        defaultScheduleId: number | null;
                        weekStart: string;
                        timeZone: string;
                        startTime: number;
                        endTime: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        emailVerified: Date | null;
                        avatar: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        hideBranding: boolean;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        locale: string | null;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        away: boolean;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        disableImpersonation: boolean;
                        organizationId: number | null;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                    };
                    message: string;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    username?: string | null | undefined;
                    email?: string | undefined;
                    role?: "USER" | "ADMIN" | undefined;
                    name?: string | null | undefined;
                    bio?: string | null | undefined;
                    theme?: string | null | undefined;
                    timeFormat?: number | null | undefined;
                    defaultScheduleId?: number | null | undefined;
                    weekStart?: string | undefined;
                    timeZone?: string | undefined;
                    avatarUrl?: string | null | undefined;
                    locale?: string | null | undefined;
                    identityProvider?: "SAML" | "CAL" | "GOOGLE" | undefined;
                    allowDynamicBooking?: boolean | null | undefined;
                };
                output: {
                    user: {
                        username: string | null;
                        email: string;
                        role: import('../../../prisma-client').$Enums.UserPermissionRole;
                        name: string | null;
                        bio: string | null;
                        theme: string | null;
                        verified: boolean | null;
                        locked: boolean;
                        id: number;
                        timeFormat: number | null;
                        defaultScheduleId: number | null;
                        weekStart: string;
                        timeZone: string;
                        startTime: number;
                        endTime: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        emailVerified: Date | null;
                        avatar: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        hideBranding: boolean;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        locale: string | null;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        away: boolean;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        disableImpersonation: boolean;
                        organizationId: number | null;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                    };
                    message: string;
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    message: string;
                };
            }>;
        }>;
        oAuth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getClient: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    clientId: string;
                };
                output: {
                    name: string;
                    logo: string | null;
                    clientId: string;
                    redirectUri: string;
                } | null;
            }>;
            addClient: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    logo: string;
                    redirectUri: string;
                };
                output: {
                    clientSecret: string;
                    name: string;
                    logo: string | null;
                    clientId: string;
                    redirectUri: string;
                };
            }>;
            generateAuthCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    clientId: string;
                    scopes: string[];
                    teamSlug?: string | undefined;
                };
                output: {
                    client: {
                        name: string;
                        clientId: string;
                        redirectUri: string;
                    };
                    authorizationCode: string;
                };
            }>;
        }>;
        googleWorkspace: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            checkForGWorkspace: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number | undefined;
                };
            }>;
            getUsersFromGWorkspace: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: string[];
            }>;
            removeCurrentGoogleWorkspaceConnection: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    deleted: number;
                };
            }>;
        }>;
        admin: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            listPaginated: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    limit: number;
                    cursor?: number | null | undefined;
                    searchTerm?: string | null | undefined;
                };
                output: {
                    rows: {
                        username: string | null;
                        email: string;
                        role: import('../../../prisma-client').$Enums.UserPermissionRole;
                        name: string | null;
                        locked: boolean;
                        id: number;
                        timeZone: string;
                    }[];
                    nextCursor: number | undefined;
                    meta: {
                        totalRowCount: number;
                    };
                };
            }>;
            sendPasswordReset: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    success: boolean;
                };
            }>;
            lockUserAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    locked: boolean;
                    userId: number;
                };
                output: {
                    success: boolean;
                    userId: number;
                    locked: boolean;
                };
            }>;
            toggleFeatureFlag: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    enabled: boolean;
                    slug: string;
                };
                output: {
                    description: string | null;
                    enabled: boolean;
                    type: import('../../../prisma-client').$Enums.FeatureType | null;
                    slug: string;
                    createdAt: Date | null;
                    updatedAt: Date | null;
                    lastUsedAt: Date | null;
                    stale: boolean | null;
                    updatedBy: number | null;
                };
            }>;
            removeTwoFactor: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    success: boolean;
                    userId: number;
                };
            }>;
            getSMSLockStateTeamsUsers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    users: {
                        locked: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        }[];
                        reviewNeeded: {
                            username: string | null;
                            email: string;
                            name: string | null;
                            id: number;
                            avatarUrl: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        }[];
                    };
                    teams: {
                        locked: {
                            name: string;
                            id: number;
                            slug: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            logoUrl: string | null;
                        }[];
                        reviewNeeded: {
                            name: string;
                            id: number;
                            slug: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            logoUrl: string | null;
                        }[];
                    };
                };
            }>;
            setSMSLockState: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId?: number | undefined;
                    username?: string | undefined;
                    teamId?: number | undefined;
                    teamSlug?: string | undefined;
                    lock?: boolean | undefined;
                };
                output: {
                    name: string | null;
                    locked: boolean | undefined;
                };
            }>;
        }>;
    } & {
        me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                includePasswordAdded?: boolean | undefined;
            } | undefined;
            output: {
                passwordAdded?: boolean | undefined;
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import('../../../prisma-client').Prisma.JsonValue;
                defaultBookerLayouts: {
                    enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                    defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                organizationId: number | null;
                organization: {
                    id: number | null;
                    isOrgAdmin: boolean;
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                    } | null;
                    requestedSlug: string | null;
                    members?: {
                        role: import('../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[] | undefined;
                    name?: string | undefined;
                    slug?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                    calVideoLogo?: string | null | undefined;
                    isPrivate?: boolean | undefined;
                    bannerUrl?: string | null | undefined;
                    isPlatform?: boolean | undefined;
                    organizationSettings?: {
                        lockEventTypeCreationForUsers: boolean;
                    } | null | undefined;
                };
                username: string | null;
                profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    username: string | null;
                    upId: string;
                    id: null;
                    organizationId: null;
                    organization: null;
                } | {
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    organization: {
                        members: {
                            role: import('../../../prisma-client').$Enums.MembershipRole;
                            id: number;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                        name: string;
                        id: number;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        isPrivate: boolean;
                        bannerUrl: string | null;
                        isPlatform: boolean;
                        organizationSettings: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null;
                    } & Omit<Pick<{
                        id: number;
                        name: string;
                        slug: string | null;
                        logo: string | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        createdAt: Date;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        parentId: number | null;
                        timeFormat: number | null;
                        timeZone: string;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                    }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                        requestedSlug: string | null;
                        metadata: {
                            requestedSlug: string | null;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                        };
                    };
                    user: {
                        username: string | null;
                        email: string;
                        name: string | null;
                        id: number;
                        defaultScheduleId: number | null;
                        startTime: number;
                        endTime: number;
                        avatarUrl: string | null;
                        bufferTime: number;
                        locale: string | null;
                    };
                    movedFromUser: {
                        id: number;
                    } | null;
                    username: string;
                    id: number;
                    uid: string;
                    userId: number;
                    organizationId: number;
                    createdAt: Date & string;
                    updatedAt: Date & string;
                    upId: string;
                } | ({
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    username: string | null;
                    upId: string;
                    id: null;
                    organizationId: null;
                    organization: null;
                } & import("@calcom/types/UserProfile").UserAsPersonalProfile) | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    username: string | null;
                    upId: string;
                    id: null;
                    organizationId: null;
                    organization: null;
                });
                profiles: import("@calcom/types/UserProfile").UserProfile[];
                secondaryEmails: {
                    email: string;
                    id: number;
                    emailVerified: Date | null;
                }[];
                sumOfBookings: number | undefined;
                sumOfCalendars: number | undefined;
                sumOfTeams: number | undefined;
                sumOfEventTypes: number | undefined;
                isPremium: boolean | undefined;
                sumOfTeamEventTypes: number;
            };
        }>;
        deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                password: string;
                totpCode?: string | undefined;
            };
            output: void;
        }>;
        deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: void;
        }>;
        connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                onboarding?: boolean | undefined;
            } | undefined;
            output: {
                connectedCalendars: ({
                    integration: import("@calcom/types/App").App & {
                        credential: import('../../../app-store/utils').CredentialDataWithTeamName;
                        credentials: import('../../../app-store/utils').CredentialDataWithTeamName[];
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    primary?: undefined;
                    calendars?: undefined;
                    error?: undefined;
                } | {
                    integration: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                        extendsFeature?: "User" | "EventType" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    primary: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        name?: string | undefined;
                        email?: string | undefined;
                        primaryEmail?: string | undefined;
                        integrationTitle?: string | undefined;
                        userId?: number | undefined;
                        integration?: string | undefined;
                        externalId: string;
                    };
                    calendars: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        name?: string | undefined;
                        email?: string | undefined;
                        primaryEmail?: string | undefined;
                        integrationTitle?: string | undefined;
                        userId?: number | undefined;
                        integration?: string | undefined;
                        externalId: string;
                    }[];
                    error?: undefined;
                } | {
                    integration: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import('../../../prisma-client').$Enums.AppCategories[];
                        extendsFeature?: "User" | "EventType" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    error: {
                        message: string;
                    };
                    primary?: undefined;
                    calendars?: undefined;
                })[];
                destinationCalendar: {
                    primary?: boolean | undefined;
                    name?: string | undefined;
                    readOnly?: boolean | undefined;
                    email?: string | undefined;
                    primaryEmail: string | null;
                    credentialId: number | null;
                    integrationTitle?: string | undefined;
                    userId: number | null;
                    integration: string;
                    externalId: string;
                    id: number;
                    eventTypeId: number | null;
                };
            };
        }>;
        setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                externalId: string;
                integration: string;
                eventTypeId?: number | null | undefined;
                bookingId?: number | null | undefined;
            };
            output: void;
        }>;
        integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                variant?: string | undefined;
                exclude?: string[] | undefined;
                onlyInstalled?: boolean | undefined;
                includeTeamInstalledApps?: boolean | undefined;
                extendsFeature?: "EventType" | undefined;
                teamId?: number | null | undefined;
                sortByMostPopular?: boolean | undefined;
                categories?: ("payment" | "other" | "automation" | "conferencing" | "calendar" | "analytics" | "crm" | "messaging" | "video" | "web3")[] | undefined;
                appId?: string | undefined;
            };
            output: {
                items: {
                    userCredentialIds: number[];
                    invalidCredentialIds: number[];
                    teams: ({
                        teamId: number;
                        name: string;
                        logoUrl: string | null;
                        credentialId: number;
                        isAdmin: boolean;
                    } | null)[];
                    isInstalled: boolean | undefined;
                    isSetupAlready: boolean | undefined;
                    credentialOwner?: import('../../../app-store/types').CredentialOwner | undefined;
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import('../../../prisma-client').$Enums.AppCategories[];
                    extendsFeature?: "User" | "EventType" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                    enabled: boolean;
                }[];
            };
        }>;
        appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                appId: string;
            };
            output: {
                installed?: boolean | undefined;
                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                title?: string | undefined;
                name: string;
                description: string;
                variant: "payment" | "other" | "automation" | "conferencing" | "calendar" | "crm" | "video" | "other_calendar";
                slug: string;
                category?: string | undefined;
                categories: import('../../../prisma-client').$Enums.AppCategories[];
                extendsFeature?: "User" | "EventType" | undefined;
                logo: string;
                publisher: string;
                url: string;
                docsUrl?: string | undefined;
                verified?: boolean | undefined;
                trending?: boolean | undefined;
                rating?: number | undefined;
                reviews?: number | undefined;
                isGlobal?: boolean | undefined;
                simplePath?: string | undefined;
                email: string;
                key?: import('../../../prisma-client').Prisma.JsonValue | undefined;
                feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                price?: number | undefined;
                commission?: number | undefined;
                licenseRequired?: boolean | undefined;
                teamsPlanRequired?: {
                    upgradeUrl: string;
                } | undefined;
                appData?: import("@calcom/types/App").AppData | undefined;
                paid?: import("@calcom/types/App").PaidAppData | undefined;
                dirName?: string | undefined;
                isTemplate?: boolean | undefined;
                __template?: string | undefined;
                dependencies?: string[] | undefined;
                concurrentMeetings?: boolean | undefined;
                createdAt?: string | undefined;
                isOAuth?: boolean | undefined;
                locationOption: {
                    label: string;
                    value: string;
                    icon?: string | undefined;
                    disabled?: boolean | undefined;
                } | null;
                isInstalled: number;
            };
        }>;
        appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                appType: string;
            };
            output: {
                credentials: {
                    type: string;
                    id: number;
                    userId: number | null;
                    invalid: boolean | null;
                    key: import('../../../prisma-client').Prisma.JsonValue;
                    teamId: number | null;
                    subscriptionId: string | null;
                    appId: string | null;
                    paymentStatus: string | null;
                    billingCycleStart: number | null;
                }[];
                userAdminTeams: import('../../../features/ee/teams/lib/getUserAdminTeams').UserAdminTeams;
            };
        }>;
        stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                isPremium: boolean;
                username: string | null;
            };
        }>;
        updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                username?: string | undefined;
                name?: string | undefined;
                email?: string | undefined;
                bio?: string | undefined;
                avatarUrl?: string | null | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?: {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?: {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                    } | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                    defaultBookerLayouts?: {
                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                    } | null | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?: {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                    } | undefined;
                } | null | undefined;
                travelSchedules?: {
                    timeZone: string;
                    startDate: Date;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                }[] | undefined;
                secondaryEmails?: {
                    email: string;
                    id: number;
                    isDeleted?: boolean | undefined;
                }[] | undefined;
            };
            output: {
                email: string | undefined;
                avatarUrl: string | null;
                hasEmailBeenChanged: boolean | "" | undefined;
                sendEmailVerification: boolean;
                username?: string | undefined;
                name?: string | undefined;
                bio?: string | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?: {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?: {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                    } | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                    defaultBookerLayouts?: {
                        enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
                        defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
                    } | null | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?: {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                    } | undefined;
                } | null | undefined;
                travelSchedules?: {
                    timeZone: string;
                    startDate: Date;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                }[] | undefined;
                secondaryEmails?: {
                    email: string;
                    id: number;
                    isDeleted: boolean;
                }[] | undefined;
            };
        }>;
        unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: {
                message: string;
            };
        }>;
        eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: number[];
            };
            output: void;
        }>;
        routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: string[];
            };
            output: void;
        }>;
        workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: number[];
            };
            output: void;
        }>;
        submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                rating: string;
                comment: string;
            };
            output: void;
        }>;
        locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId?: number | undefined;
            };
            output: {
                label: string;
                options: {
                    label: string;
                    value: string;
                    disabled?: boolean | undefined;
                    icon?: string | undefined;
                    slug?: string | undefined;
                }[];
            }[];
        }>;
        deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
                externalId?: string | undefined;
                teamId?: number | undefined;
            };
            output: void;
        }>;
        bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: number;
        }>;
        getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                roomName: string;
            };
            output: {
                data: {
                    duration: number;
                    status: string;
                    id: string;
                    room_name: string;
                    start_ts: number;
                    max_participants: number;
                    share_token: string;
                }[];
                total_count: number;
            } | {} | undefined;
        }>;
        getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                teamUpgradeBanner: ({
                    team: {
                        children: {
                            name: string;
                            logo: string | null;
                            bio: string | null;
                            theme: string | null;
                            id: number;
                            timeFormat: number | null;
                            weekStart: string;
                            timeZone: string;
                            metadata: import('../../../prisma-client').Prisma.JsonValue;
                            slug: string | null;
                            parentId: number | null;
                            hideBranding: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                            createdAt: Date;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            bannerUrl: string | null;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                        }[];
                    } & {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    };
                } & {
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
                orgUpgradeBanner: ({
                    team: {
                        name: string;
                        logo: string | null;
                        bio: string | null;
                        theme: string | null;
                        id: number;
                        timeFormat: number | null;
                        weekStart: string;
                        timeZone: string;
                        metadata: import('../../../prisma-client').Prisma.JsonValue;
                        slug: string | null;
                        parentId: number | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
                        createdAt: Date;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                    };
                } & {
                    role: import('../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
                verifyEmailBanner: boolean;
                calendarCredentialBanner: boolean;
                invalidAppCredentialBanners: import('../../../features/users/components/InvalidAppCredentialsBanner').InvalidAppCredentialBannerProps[];
            };
        }>;
        getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                recordingId: string;
            };
            output: {
                download_link: string;
            } | undefined;
        }>;
        getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            } | undefined;
        }>;
        updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            };
            output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            };
        }>;
        shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                email: string;
                isVerified: boolean;
            };
        }>;
        teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: ({
                teamId: number;
                name: string;
                slug: string | null;
                image: string;
                role: import('../../../prisma-client').$Enums.MembershipRole;
                readOnly: boolean;
            } | {
                teamId: null;
                name: string | null;
                slug: string | null;
                image: string;
                readOnly: boolean;
            })[];
        }>;
        connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                token: string;
            };
            output: {
                isBookingAlreadyAcceptedBySomeoneElse: boolean;
                meetingUrl: string;
            };
        }>;
        outOfOfficeCreate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                offset: number;
                reasonId: number;
                dateRange: {
                    startDate: Date;
                    endDate: Date;
                };
                toTeamUserId: number | null;
                notes?: string | null | undefined;
            };
            output: {};
        }>;
        outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                notes: string | null;
                reason: {
                    reason: string;
                    id: number;
                    userId: number | null;
                    emoji: string;
                } | null;
                id: number;
                start: Date;
                end: Date;
                uuid: string;
                toUserId: number | null;
                toUser: {
                    username: string | null;
                } | null;
            }[];
        }>;
        outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                outOfOfficeUid: string;
            };
            output: {};
        }>;
        addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                email: string;
            };
            output: {
                data: {
                    email: string;
                    id: number;
                    userId: number;
                    emailVerified: Date | null;
                };
                message: string;
            };
        }>;
        getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                timeZone: string;
                startDate: Date;
                endDate: Date | null;
            }[];
        }>;
        outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                enabled: boolean;
                reason: string;
                id: number;
                userId: number | null;
                emoji: string;
            }[];
        }>;
    };
}>;
export type AppRouter = typeof appRouter;
//# sourceMappingURL=_app.d.ts.map