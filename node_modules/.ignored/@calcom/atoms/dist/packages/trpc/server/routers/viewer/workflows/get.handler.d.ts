import type { TrpcSessionUser } from '../../../trpc';
import type { TGetInputSchema } from "./get.schema";
type GetOptions = {
    ctx: {
        user: NonNullable<TrpcSessionUser>;
    };
    input: TGetInputSchema;
};
export declare const getHandler: ({ ctx, input }: GetOptions) => Promise<{
    name: string;
    team: {
        members: {
            role: import('../../../../../prisma-client').$Enums.MembershipRole;
            id: number;
            userId: number;
            teamId: number;
            disableImpersonation: boolean;
            accepted: boolean;
        }[];
        name: string;
        id: number;
        slug: string | null;
    } | null;
    trigger: import('../../../../../prisma-client').$Enums.WorkflowTriggerEvents;
    id: number;
    userId: number | null;
    time: number | null;
    teamId: number | null;
    timeUnit: import('../../../../../prisma-client').$Enums.TimeUnit | null;
    activeOn: {
        eventType: {
            price: number;
            title: string;
            description: string | null;
            hidden: boolean;
            length: number;
            currency: string;
            id: number;
            timeZone: string | null;
            userId: number | null;
            metadata: import('../../../../../prisma-client').Prisma.JsonValue;
            position: number;
            slug: string;
            locations: import('../../../../../prisma-client').Prisma.JsonValue;
            offsetStart: number;
            profileId: number | null;
            teamId: number | null;
            eventName: string | null;
            parentId: number | null;
            bookingFields: import('../../../../../prisma-client').Prisma.JsonValue;
            periodType: import('../../../../../prisma-client').$Enums.PeriodType;
            periodStartDate: Date | null;
            periodEndDate: Date | null;
            periodDays: number | null;
            periodCountCalendarDays: boolean | null;
            lockTimeZoneToggleOnBookingPage: boolean;
            requiresConfirmation: boolean;
            requiresBookerEmailVerification: boolean;
            recurringEvent: import('../../../../../prisma-client').Prisma.JsonValue;
            disableGuests: boolean;
            hideCalendarNotes: boolean;
            minimumBookingNotice: number;
            beforeEventBuffer: number;
            afterEventBuffer: number;
            seatsPerTimeSlot: number | null;
            onlyShowFirstAvailableSlot: boolean;
            seatsShowAttendees: boolean | null;
            seatsShowAvailabilityCount: boolean | null;
            schedulingType: import('../../../../../prisma-client').$Enums.SchedulingType | null;
            scheduleId: number | null;
            slotInterval: number | null;
            successRedirectUrl: string | null;
            forwardParamsSuccessRedirect: boolean | null;
            bookingLimits: import('../../../../../prisma-client').Prisma.JsonValue;
            durationLimits: import('../../../../../prisma-client').Prisma.JsonValue;
            isInstantEvent: boolean;
            assignAllTeamMembers: boolean;
            useEventTypeDestinationCalendarEmail: boolean;
            secondaryEmailId: number | null;
        };
    }[];
    steps: {
        action: import('../../../../../prisma-client').$Enums.WorkflowActions;
        id: number;
        template: import('../../../../../prisma-client').$Enums.WorkflowTemplates;
        stepNumber: number;
        workflowId: number;
        sendTo: string | null;
        reminderBody: string | null;
        emailSubject: string | null;
        numberRequired: boolean | null;
        sender: string | null;
        numberVerificationPending: boolean;
        includeCalendarEvent: boolean;
    }[];
} | null>;
export {};
//# sourceMappingURL=get.handler.d.ts.map