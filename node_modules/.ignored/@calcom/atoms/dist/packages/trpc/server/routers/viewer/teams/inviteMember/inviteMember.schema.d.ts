import { z } from "zod";
export declare const ZInviteMemberInputSchema: z.ZodObject<{
    teamId: z.ZodNumber;
    usernameOrEmail: z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string | string[], string | string[]>, string | string[], string | string[]>, string | string[], string | string[]>;
    role: z.ZodNativeEnum<{
        readonly MEMBER: "MEMBER";
        readonly ADMIN: "ADMIN";
        readonly OWNER: "OWNER";
    }>;
    language: z.ZodString;
    isOrg: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    role: "ADMIN" | "MEMBER" | "OWNER";
    language: string;
    teamId: number;
    isOrg: boolean;
    usernameOrEmail: (string | string[]) & (string | string[] | undefined);
}, {
    role: "ADMIN" | "MEMBER" | "OWNER";
    language: string;
    teamId: number;
    usernameOrEmail: (string | string[]) & (string | string[] | undefined);
    isOrg?: boolean | undefined;
}>;
export type TInviteMemberInputSchema = z.infer<typeof ZInviteMemberInputSchema>;
//# sourceMappingURL=inviteMember.schema.d.ts.map