export declare const workflowsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
    ctx: import("../../../createContext").InnerContext;
    meta: object;
    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
    transformer: {
        stringify: (object: any) => string;
        parse: <T = unknown>(string: string) => T;
        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
        allowErrorProps: (...props: string[]) => void;
    };
}>, {
    list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            teamId?: number | undefined;
            userId?: number | undefined;
        } | undefined;
        output: {
            workflows: import('../../../../../features/ee/workflows/components/WorkflowListPage').WorkflowType[];
        };
    }>;
    get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            id: number;
        };
        output: {
            name: string;
            team: {
                members: {
                    role: import('../../../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
                name: string;
                id: number;
                slug: string | null;
            } | null;
            trigger: import('../../../../../prisma-client').$Enums.WorkflowTriggerEvents;
            id: number;
            userId: number | null;
            time: number | null;
            teamId: number | null;
            timeUnit: import('../../../../../prisma-client').$Enums.TimeUnit | null;
            activeOn: {
                eventType: {
                    price: number;
                    title: string;
                    description: string | null;
                    hidden: boolean;
                    length: number;
                    currency: string;
                    id: number;
                    timeZone: string | null;
                    userId: number | null;
                    metadata: import('../../../../../prisma-client').Prisma.JsonValue;
                    position: number;
                    slug: string;
                    locations: import('../../../../../prisma-client').Prisma.JsonValue;
                    offsetStart: number;
                    profileId: number | null;
                    teamId: number | null;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import('../../../../../prisma-client').Prisma.JsonValue;
                    periodType: import('../../../../../prisma-client').$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    recurringEvent: import('../../../../../prisma-client').Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import('../../../../../prisma-client').$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    bookingLimits: import('../../../../../prisma-client').Prisma.JsonValue;
                    durationLimits: import('../../../../../prisma-client').Prisma.JsonValue;
                    isInstantEvent: boolean;
                    assignAllTeamMembers: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    secondaryEmailId: number | null;
                };
            }[];
            steps: {
                action: import('../../../../../prisma-client').$Enums.WorkflowActions;
                id: number;
                template: import('../../../../../prisma-client').$Enums.WorkflowTemplates;
                stepNumber: number;
                workflowId: number;
                sendTo: string | null;
                reminderBody: string | null;
                emailSubject: string | null;
                numberRequired: boolean | null;
                sender: string | null;
                numberVerificationPending: boolean;
                includeCalendarEvent: boolean;
            }[];
        } | null;
    }>;
    create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            teamId?: number | undefined;
        };
        output: {
            workflow: {
                id: number;
                position: number;
                name: string;
                userId: number | null;
                teamId: number | null;
                trigger: import('../../../../../prisma-client').$Enums.WorkflowTriggerEvents;
                time: number | null;
                timeUnit: import('../../../../../prisma-client').$Enums.TimeUnit | null;
            };
        };
    }>;
    delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            id: number;
        };
        output: {
            id: number;
        };
    }>;
    update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            name: string;
            trigger: "BEFORE_EVENT" | "EVENT_CANCELLED" | "NEW_EVENT" | "AFTER_EVENT" | "RESCHEDULE_EVENT";
            id: number;
            time: number | null;
            timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
            activeOn: number[];
            steps: {
                action: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                id: number;
                template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                stepNumber: number;
                workflowId: number;
                numberRequired: boolean | null;
                includeCalendarEvent: boolean;
                sendTo?: string | null | undefined;
                reminderBody?: string | null | undefined;
                emailSubject?: string | null | undefined;
                sender?: string | null | undefined;
                senderName?: string | null | undefined;
            }[];
        };
        output: {
            workflow: ({
                team: {
                    members: {
                        role: import('../../../../../prisma-client').$Enums.MembershipRole;
                        id: number;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                    name: string;
                    id: number;
                    slug: string | null;
                } | null;
                activeOn: {
                    eventType: {
                        price: number;
                        title: string;
                        description: string | null;
                        hidden: boolean;
                        length: number;
                        currency: string;
                        id: number;
                        timeZone: string | null;
                        userId: number | null;
                        metadata: import('../../../../../prisma-client').Prisma.JsonValue;
                        position: number;
                        slug: string;
                        locations: import('../../../../../prisma-client').Prisma.JsonValue;
                        offsetStart: number;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import('../../../../../prisma-client').Prisma.JsonValue;
                        periodType: import('../../../../../prisma-client').$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import('../../../../../prisma-client').Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import('../../../../../prisma-client').$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import('../../../../../prisma-client').Prisma.JsonValue;
                        durationLimits: import('../../../../../prisma-client').Prisma.JsonValue;
                        isInstantEvent: boolean;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        secondaryEmailId: number | null;
                    };
                }[];
                steps: {
                    action: import('../../../../../prisma-client').$Enums.WorkflowActions;
                    id: number;
                    template: import('../../../../../prisma-client').$Enums.WorkflowTemplates;
                    stepNumber: number;
                    workflowId: number;
                    sendTo: string | null;
                    reminderBody: string | null;
                    emailSubject: string | null;
                    numberRequired: boolean | null;
                    sender: string | null;
                    numberVerificationPending: boolean;
                    includeCalendarEvent: boolean;
                }[];
            } & {
                name: string;
                trigger: import('../../../../../prisma-client').$Enums.WorkflowTriggerEvents;
                id: number;
                userId: number | null;
                time: number | null;
                position: number;
                teamId: number | null;
                timeUnit: import('../../../../../prisma-client').$Enums.TimeUnit | null;
            }) | null;
        };
    }>;
    activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            eventTypeId: number;
            workflowId: number;
        };
        output: void;
    }>;
    sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            phoneNumber: string;
        };
        output: void;
    }>;
    verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            code: string;
            phoneNumber: string;
            teamId?: number | undefined;
        };
        output: boolean;
    }>;
    getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            teamId?: number | undefined;
        };
        output: {
            id: number;
            userId: number | null;
            teamId: number | null;
            phoneNumber: string;
        }[];
    }>;
    getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            teamId?: number | undefined;
        };
        output: {
            id: number;
            userId: number | null;
            teamId: number | null;
            email: string;
        }[];
    }>;
    verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            email: string;
            code: string;
            teamId?: number | undefined;
        };
        output: true;
    }>;
    getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            label: string;
            value: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
            needsTeamsUpgrade: boolean;
        }[];
    }>;
    filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            filters?: {
                teamIds?: number[] | undefined;
                userIds?: number[] | undefined;
                upIds?: string[] | undefined;
            } | undefined;
        } | null | undefined;
        output: {
            filtered: import('../../../../../features/ee/workflows/components/WorkflowListPage').WorkflowType[];
            totalCount: number;
        } | undefined;
    }>;
}>;
//# sourceMappingURL=_router.d.ts.map