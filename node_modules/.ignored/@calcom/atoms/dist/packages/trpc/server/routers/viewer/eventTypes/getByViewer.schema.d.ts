import { z } from "zod";
export declare const filterQuerySchemaStrict: z.ZodObject<{
    teamIds: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    upIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    teamIds?: number[] | undefined;
    upIds?: string[] | undefined;
}, {
    teamIds?: number[] | undefined;
    upIds?: string[] | undefined;
}>;
export declare const ZEventTypeInputSchema: z.ZodOptional<z.ZodNullable<z.ZodObject<{
    filters: z.ZodOptional<z.ZodObject<{
        teamIds: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        upIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        teamIds?: number[] | undefined;
        upIds?: string[] | undefined;
    }, {
        teamIds?: number[] | undefined;
        upIds?: string[] | undefined;
    }>>;
    forRoutingForms: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    filters?: {
        teamIds?: number[] | undefined;
        upIds?: string[] | undefined;
    } | undefined;
    forRoutingForms?: boolean | undefined;
}, {
    filters?: {
        teamIds?: number[] | undefined;
        upIds?: string[] | undefined;
    } | undefined;
    forRoutingForms?: boolean | undefined;
}>>>;
export type TEventTypeInputSchema = z.infer<typeof ZEventTypeInputSchema>;
//# sourceMappingURL=getByViewer.schema.d.ts.map