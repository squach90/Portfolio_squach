import type { User } from '../../../../../prisma-client';
import type { PrismaClient } from '../../../../../prisma';
export declare const getDefaultScheduleId: (userId: number, prisma: PrismaClient) => Promise<number>;
export declare const hasDefaultSchedule: (user: Partial<User>, prisma: PrismaClient) => Promise<boolean>;
export declare const setupDefaultSchedule: (userId: number, scheduleId: number, prisma: PrismaClient) => Promise<{
    username: string | null;
    email: string;
    role: import('../../../../../prisma-client').$Enums.UserPermissionRole;
    name: string | null;
    bio: string | null;
    theme: string | null;
    verified: boolean | null;
    locked: boolean;
    id: number;
    timeFormat: number | null;
    defaultScheduleId: number | null;
    weekStart: string;
    timeZone: string;
    startTime: number;
    endTime: number;
    metadata: import('../../../../../prisma-client').Prisma.JsonValue;
    emailVerified: Date | null;
    avatar: string | null;
    avatarUrl: string | null;
    bufferTime: number;
    hideBranding: boolean;
    appTheme: string | null;
    createdDate: Date;
    trialEndsAt: Date | null;
    completedOnboarding: boolean;
    locale: string | null;
    twoFactorSecret: string | null;
    twoFactorEnabled: boolean;
    backupCodes: string | null;
    identityProvider: import('../../../../../prisma-client').$Enums.IdentityProvider;
    identityProviderId: string | null;
    invitedTo: number | null;
    brandColor: string | null;
    darkBrandColor: string | null;
    away: boolean;
    allowDynamicBooking: boolean | null;
    allowSEOIndexing: boolean | null;
    receiveMonthlyDigestEmail: boolean | null;
    disableImpersonation: boolean;
    organizationId: number | null;
    movedToProfileId: number | null;
    isPlatformManaged: boolean;
    smsLockState: import('../../../../../prisma-client').$Enums.SMSLockState;
}>;
//# sourceMappingURL=util.d.ts.map