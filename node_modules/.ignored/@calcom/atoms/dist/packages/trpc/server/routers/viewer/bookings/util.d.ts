import type { Attendee, Booking, BookingReference, Credential, DestinationCalendar, EventType, User } from '../../../../../prisma-client';
export declare const bookingsProcedure: import("@trpc/server/unstable-core-do-not-import").ProcedureBuilder<import("../../../createContext").InnerContext, object, {
    session: {
        upId: string;
        hasValidLicense: boolean;
        profileId?: number | null | undefined;
        user: import("next-auth").User;
        expires: string;
    };
    user: {
        avatar: string;
        organization: {
            id: number | null;
            isOrgAdmin: boolean;
            metadata: {
                requestedSlug?: string | null | undefined;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?: {
                    teamSlug?: string | null | undefined;
                    lastMigrationTime?: string | undefined;
                    reverted?: boolean | undefined;
                    lastRevertTime?: string | undefined;
                } | undefined;
            } | null;
            requestedSlug: string | null;
            members?: {
                role: import('../../../../../prisma-client').$Enums.MembershipRole;
                id: number;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
            }[] | undefined;
            name?: string | undefined;
            slug?: string | null | undefined;
            logoUrl?: string | null | undefined;
            calVideoLogo?: string | null | undefined;
            isPrivate?: boolean | undefined;
            bannerUrl?: string | null | undefined;
            isPlatform?: boolean | undefined;
            organizationSettings?: {
                lockEventTypeCreationForUsers: boolean;
            } | null | undefined;
        };
        organizationId: number | null;
        id: number;
        email: string;
        username: string | null;
        locale: string;
        defaultBookerLayouts: {
            enabledLayouts: import('../../../../../prisma/zod-utils').BookerLayouts[];
            defaultLayout: import('../../../../../prisma/zod-utils').BookerLayouts;
        } | null;
        role: import('../../../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: import('../../../../../prisma-client').Prisma.JsonValue;
        destinationCalendar: {
            id: number;
            eventTypeId: number | null;
            credentialId: number | null;
            externalId: string;
            userId: number | null;
            integration: string;
            primaryEmail: string | null;
        } | null;
        emailVerified: Date | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        twoFactorEnabled: boolean;
        identityProvider: import('../../../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        movedToProfileId: number | null;
        selectedCalendars: {
            externalId: string;
            integration: string;
        }[];
        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
    } | {
        avatar: string;
        organization: {
            id: number | null;
            isOrgAdmin: boolean;
            metadata: {
                requestedSlug?: string | null | undefined;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?: {
                    teamSlug?: string | null | undefined;
                    lastMigrationTime?: string | undefined;
                    reverted?: boolean | undefined;
                    lastRevertTime?: string | undefined;
                } | undefined;
            } | null;
            requestedSlug: string | null;
            members?: {
                role: import('../../../../../prisma-client').$Enums.MembershipRole;
                id: number;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
            }[] | undefined;
            name?: string | undefined;
            slug?: string | null | undefined;
            logoUrl?: string | null | undefined;
            calVideoLogo?: string | null | undefined;
            isPrivate?: boolean | undefined;
            bannerUrl?: string | null | undefined;
            isPlatform?: boolean | undefined;
            organizationSettings?: {
                lockEventTypeCreationForUsers: boolean;
            } | null | undefined;
        };
        organizationId: number | null;
        id: number;
        email: string;
        username: string | null;
        locale: string;
        defaultBookerLayouts: {
            enabledLayouts: import('../../../../../prisma/zod-utils').BookerLayouts[];
            defaultLayout: import('../../../../../prisma/zod-utils').BookerLayouts;
        } | null;
        role: import('../../../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: import('../../../../../prisma-client').Prisma.JsonValue;
        destinationCalendar: {
            id: number;
            eventTypeId: number | null;
            credentialId: number | null;
            externalId: string;
            userId: number | null;
            integration: string;
            primaryEmail: string | null;
        } | null;
        emailVerified: Date | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        twoFactorEnabled: boolean;
        identityProvider: import('../../../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        movedToProfileId: number | null;
        selectedCalendars: {
            externalId: string;
            integration: string;
        }[];
        profile: {
            name: string | null;
            avatarUrl: string | null;
            startTime: number;
            endTime: number;
            bufferTime: number;
            username: string | null;
            upId: string;
            id: null;
            organizationId: null;
            organization: null;
        } | {
            name: string | null;
            avatarUrl: string | null;
            startTime: number;
            endTime: number;
            bufferTime: number;
            organization: {
                members: {
                    role: import('../../../../../prisma-client').$Enums.MembershipRole;
                    id: number;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
                name: string;
                id: number;
                metadata: import('../../../../../prisma-client').Prisma.JsonValue;
                slug: string | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                isPrivate: boolean;
                bannerUrl: string | null;
                isPlatform: boolean;
                organizationSettings: {
                    lockEventTypeCreationForUsers: boolean;
                } | null;
            } & Omit<Pick<{
                id: number;
                name: string;
                slug: string | null;
                logo: string | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                bio: string | null;
                hideBranding: boolean;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                createdAt: Date;
                metadata: import('../../../../../prisma-client').Prisma.JsonValue;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                bannerUrl: string | null;
                parentId: number | null;
                timeFormat: number | null;
                timeZone: string;
                weekStart: string;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                smsLockState: import('../../../../../prisma-client').$Enums.SMSLockState;
            }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
                requestedSlug: string | null;
                metadata: {
                    requestedSlug: string | null;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                };
            };
            user: {
                username: string | null;
                email: string;
                name: string | null;
                id: number;
                defaultScheduleId: number | null;
                startTime: number;
                endTime: number;
                avatarUrl: string | null;
                bufferTime: number;
                locale: string | null;
            };
            movedFromUser: {
                id: number;
            } | null;
            username: string;
            id: number;
            uid: string;
            userId: number;
            organizationId: number;
            createdAt: Date & string;
            updatedAt: Date & string;
            upId: string;
        };
    };
    booking: {
        attendees: {
            email: string;
            name: string;
            id: number;
            timeZone: string;
            bookingId: number | null;
            locale: string | null;
        }[];
        user: ({
            destinationCalendar: {
                id: number;
                eventTypeId: number | null;
                credentialId: number | null;
                externalId: string;
                userId: number | null;
                integration: string;
                primaryEmail: string | null;
            } | null;
            credentials: {
                type: string;
                id: number;
                userId: number | null;
                invalid: boolean | null;
                key: import('../../../../../prisma-client').Prisma.JsonValue;
                teamId: number | null;
                subscriptionId: string | null;
                appId: string | null;
                paymentStatus: string | null;
                billingCycleStart: number | null;
            }[];
        } & {
            username: string | null;
            email: string;
            role: import('../../../../../prisma-client').$Enums.UserPermissionRole;
            name: string | null;
            bio: string | null;
            theme: string | null;
            verified: boolean | null;
            locked: boolean;
            id: number;
            timeFormat: number | null;
            defaultScheduleId: number | null;
            weekStart: string;
            timeZone: string;
            startTime: number;
            endTime: number;
            metadata: import('../../../../../prisma-client').Prisma.JsonValue;
            emailVerified: Date | null;
            avatar: string | null;
            avatarUrl: string | null;
            bufferTime: number;
            hideBranding: boolean;
            appTheme: string | null;
            createdDate: Date;
            trialEndsAt: Date | null;
            completedOnboarding: boolean;
            locale: string | null;
            twoFactorSecret: string | null;
            twoFactorEnabled: boolean;
            backupCodes: string | null;
            identityProvider: import('../../../../../prisma-client').$Enums.IdentityProvider;
            identityProviderId: string | null;
            invitedTo: number | null;
            brandColor: string | null;
            darkBrandColor: string | null;
            away: boolean;
            allowDynamicBooking: boolean | null;
            allowSEOIndexing: boolean | null;
            receiveMonthlyDigestEmail: boolean | null;
            disableImpersonation: boolean;
            organizationId: number | null;
            movedToProfileId: number | null;
            isPlatformManaged: boolean;
            smsLockState: import('../../../../../prisma-client').$Enums.SMSLockState;
        }) | null;
        eventType: {
            price: number;
            title: string;
            description: string | null;
            hidden: boolean;
            length: number;
            currency: string;
            id: number;
            timeZone: string | null;
            userId: number | null;
            metadata: import('../../../../../prisma-client').Prisma.JsonValue;
            position: number;
            slug: string;
            locations: import('../../../../../prisma-client').Prisma.JsonValue;
            offsetStart: number;
            profileId: number | null;
            teamId: number | null;
            eventName: string | null;
            parentId: number | null;
            bookingFields: import('../../../../../prisma-client').Prisma.JsonValue;
            periodType: import('../../../../../prisma-client').$Enums.PeriodType;
            periodStartDate: Date | null;
            periodEndDate: Date | null;
            periodDays: number | null;
            periodCountCalendarDays: boolean | null;
            lockTimeZoneToggleOnBookingPage: boolean;
            requiresConfirmation: boolean;
            requiresBookerEmailVerification: boolean;
            recurringEvent: import('../../../../../prisma-client').Prisma.JsonValue;
            disableGuests: boolean;
            hideCalendarNotes: boolean;
            minimumBookingNotice: number;
            beforeEventBuffer: number;
            afterEventBuffer: number;
            seatsPerTimeSlot: number | null;
            onlyShowFirstAvailableSlot: boolean;
            seatsShowAttendees: boolean | null;
            seatsShowAvailabilityCount: boolean | null;
            schedulingType: import('../../../../../prisma-client').$Enums.SchedulingType | null;
            scheduleId: number | null;
            slotInterval: number | null;
            successRedirectUrl: string | null;
            forwardParamsSuccessRedirect: boolean | null;
            bookingLimits: import('../../../../../prisma-client').Prisma.JsonValue;
            durationLimits: import('../../../../../prisma-client').Prisma.JsonValue;
            isInstantEvent: boolean;
            assignAllTeamMembers: boolean;
            useEventTypeDestinationCalendarEmail: boolean;
            secondaryEmailId: number | null;
        } | null;
        destinationCalendar: {
            id: number;
            eventTypeId: number | null;
            credentialId: number | null;
            externalId: string;
            userId: number | null;
            integration: string;
            primaryEmail: string | null;
        } | null;
        references: {
            type: string;
            id: number;
            uid: string;
            credentialId: number | null;
            deleted: boolean | null;
            bookingId: number | null;
            thirdPartyRecurringEventId: string | null;
            meetingId: string | null;
            meetingPassword: string | null;
            meetingUrl: string | null;
            externalCalendarId: string | null;
        }[];
    } & {
        paid: boolean;
        location: string | null;
        title: string;
        description: string | null;
        status: import('../../../../../prisma-client').$Enums.BookingStatus;
        rescheduled: boolean | null;
        rating: number | null;
        id: number;
        startTime: Date;
        endTime: Date;
        eventTypeId: number | null;
        uid: string;
        userId: number | null;
        cancellationReason: string | null;
        metadata: import('../../../../../prisma-client').Prisma.JsonValue;
        customInputs: import('../../../../../prisma-client').Prisma.JsonValue;
        smsReminderNumber: string | null;
        recurringEventId: string | null;
        iCalUID: string | null;
        responses: import('../../../../../prisma-client').Prisma.JsonValue;
        createdAt: Date;
        updatedAt: Date | null;
        idempotencyKey: string | null;
        userPrimaryEmail: string | null;
        destinationCalendarId: number | null;
        rejectionReason: string | null;
        dynamicEventSlugRef: string | null;
        dynamicGroupSlugRef: string | null;
        fromReschedule: string | null;
        scheduledJobs: string[];
        isRecorded: boolean;
        iCalSequence: number;
        ratingFeedback: string | null;
        noShowHost: boolean | null;
    };
}, {
    bookingId: number;
}, {
    bookingId: number;
}, typeof import("@trpc/server/unstable-core-do-not-import").unsetMarker, typeof import("@trpc/server/unstable-core-do-not-import").unsetMarker>;
export type BookingsProcedureContext = {
    booking: Booking & {
        eventType: EventType | null;
        destinationCalendar: DestinationCalendar | null;
        user: (User & {
            destinationCalendar: DestinationCalendar | null;
            credentials: Credential[];
        }) | null;
        references: BookingReference[];
        attendees: Attendee[];
    };
};
//# sourceMappingURL=util.d.ts.map