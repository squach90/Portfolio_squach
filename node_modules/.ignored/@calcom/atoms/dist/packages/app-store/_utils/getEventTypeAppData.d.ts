import type { z } from "zod";
import type { EventTypeModel } from '../../prisma/zod';
import type { EventTypeMetaDataSchema } from '../../prisma/zod-utils';
export type EventTypeApps = NonNullable<NonNullable<z.infer<typeof EventTypeMetaDataSchema>>["apps"]>;
export type EventTypeAppsList = keyof EventTypeApps;
export declare const getEventTypeAppData: <T extends "alby" | "basecamp3" | "dailyvideo" | "fathom" | "feishucalendar" | "ga4" | "giphy" | "googlecalendar" | "gtm" | "hubspot" | "intercom" | "jelly" | "jitsivideo" | "larkcalendar" | "make" | "matomo" | "metapixel" | "mock-payment-app" | "office365calendar" | "office365video" | "paypal" | "pipedrive-crm" | "plausible" | "posthog" | "qr_code" | "routing-forms" | "salesforce" | "shimmervideo" | "stripe" | "tandemvideo" | "booking-pages-tag" | "event-type-app-card" | "vital" | "webex" | "wordpress" | "zapier" | "zoho-bigin" | "zohocalendar" | "zohocrm" | "zoomvideo">(eventType: Pick<z.infer<typeof EventTypeModel>, "price" | "currency" | "metadata">, appId: T, forcedGet?: boolean) => EventTypeApps[T];
//# sourceMappingURL=getEventTypeAppData.d.ts.map