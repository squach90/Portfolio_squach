import type { SimplePublicObjectInput } from "@hubspot/api-client/lib/codegen/crm/objects/meetings";
import type { Calendar, CalendarEvent, EventBusyDate, IntegrationCalendar, NewCalendarEventType } from "@calcom/types/Calendar";
import type { CredentialPayload } from "@calcom/types/Credential";
interface CustomPlublicObjectInput extends SimplePublicObjectInput {
    id?: string;
}
export default class HubspotCalendarService implements Calendar {
    private url;
    private integrationName;
    private auth;
    private log;
    private client_id;
    private client_secret;
    constructor(credential: CredentialPayload);
    private hubspotContactCreate;
    private hubspotContactSearch;
    private getHubspotMeetingBody;
    private hubspotCreateMeeting;
    private hubspotAssociate;
    private hubspotUpdateMeeting;
    private hubspotDeleteMeeting;
    private hubspotAuth;
    handleMeetingCreation(event: CalendarEvent, contacts: CustomPlublicObjectInput[]): Promise<{
        uid: string;
        id: string;
        type: string;
        password: string;
        url: string;
        additionalInfo: {
            contacts: CustomPlublicObjectInput[];
            associatedMeeting: import("@hubspot/api-client/lib/codegen/crm/associations").BatchResponsePublicAssociation;
        };
    }>;
    createEvent(event: CalendarEvent): Promise<NewCalendarEventType>;
    updateEvent(uid: string, event: CalendarEvent): Promise<any>;
    deleteEvent(uid: string): Promise<void>;
    getAvailability(_dateFrom: string, _dateTo: string, _selectedCalendars: IntegrationCalendar[]): Promise<EventBusyDate[]>;
    listCalendars(_event?: CalendarEvent): Promise<IntegrationCalendar[]>;
}
export {};
//# sourceMappingURL=CalendarService.d.ts.map