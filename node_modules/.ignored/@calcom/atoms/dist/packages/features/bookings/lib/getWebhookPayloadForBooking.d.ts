import type { CalendarEvent } from "@calcom/types/Calendar";
export declare const getWebhookPayloadForBooking: ({ booking, evt, }: {
    booking: {
        eventType: {
            title: string;
            description: string | null;
            requiresConfirmation: boolean;
            price: number;
            currency: string;
            length: number;
            id: number;
        } | null;
        id: number;
        eventTypeId: number | null;
        userId: number | null;
    };
    evt: CalendarEvent;
}) => {
    bookingId: number;
    eventTitle?: string | null | undefined;
    eventDescription?: string | null | undefined;
    requiresConfirmation?: boolean | null | undefined;
    price?: number | null | undefined;
    currency?: string | null | undefined;
    length?: number | null | undefined;
    bookerUrl?: string | undefined;
    type: string;
    title: string;
    startTime: string;
    endTime: string;
    organizer: import("@calcom/types/Calendar").Person;
    attendees: import("@calcom/types/Calendar").Person[];
    additionalNotes?: string | null | undefined;
    customInputs?: import('../../../prisma-client').Prisma.JsonObject | null | undefined;
    description?: string | null | undefined;
    team?: {
        name: string;
        members: import("@calcom/types/Calendar").TeamMember[];
        id: number;
    } | undefined;
    location?: string | null | undefined;
    conferenceCredentialId?: number | undefined;
    conferenceData?: import("@calcom/types/Calendar").ConferenceData | undefined;
    additionalInformation?: import("@calcom/types/Calendar").AdditionalInformation | undefined;
    uid?: string | null | undefined;
    existingRecurringEvent?: import("@calcom/types/Calendar").ExistingRecurringEvent | null | undefined;
    videoCallData?: any;
    paymentInfo?: {
        link?: string | null | undefined;
        reason?: string | null | undefined;
        id?: string | null | undefined;
        paymentOption?: string | null | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
    } | null | undefined;
    destinationCalendar?: {
        id: number;
        integration: string;
        externalId: string;
        primaryEmail: string | null;
        userId: number | null;
        eventTypeId: number | null;
        credentialId: number | null;
    }[] | null | undefined;
    cancellationReason?: string | null | undefined;
    rejectionReason?: string | null | undefined;
    hideCalendarNotes?: boolean | undefined;
    recurrence?: string | undefined;
    recurringEvent?: import("@calcom/types/Calendar").RecurringEvent | null | undefined;
    eventTypeId?: number | null | undefined;
    appsStatus?: import("@calcom/types/Calendar").AppsStatus[] | undefined;
    seatsShowAttendees?: boolean | null | undefined;
    seatsShowAvailabilityCount?: boolean | null | undefined;
    attendeeSeatId?: string | undefined;
    seatsPerTimeSlot?: number | null | undefined;
    schedulingType?: import('../../../platform/libraries/index.ts').SchedulingType | null | undefined;
    iCalUID?: string | null | undefined;
    iCalSequence?: number | null | undefined;
    responses?: import("@calcom/types/Calendar").CalEventResponses | null | undefined;
    userFieldsResponses?: import("@calcom/types/Calendar").CalEventResponses | null | undefined;
    platformClientId?: string | null | undefined;
    platformRescheduleUrl?: string | null | undefined;
    platformCancelUrl?: string | null | undefined;
    platformBookingUrl?: string | null | undefined;
};
//# sourceMappingURL=getWebhookPayloadForBooking.d.ts.map