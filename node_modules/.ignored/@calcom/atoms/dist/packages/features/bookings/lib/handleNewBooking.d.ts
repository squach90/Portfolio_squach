/// <reference types="node" />
import type { App } from '../../../prisma-client';
import { Prisma } from '../../../prisma-client';
import type { IncomingMessage } from "http";
import type { NextApiRequest } from "next";
import type { TFunction } from "next-i18next";
import short from "short-uuid";
import type { Logger } from "tslog";
import z from "zod";
import type { LocationObject } from '../../../app-store/locations';
import type { EventTypeAppsList } from '../../../app-store/utils';
import { getDefaultEvent } from '../../../lib/defaultEvents';
import getPaymentAppData from '../../../lib/getPaymentAppData';
import { userSelect } from '../../../prisma';
import type { BookingReference } from '../../../prisma/client';
import { bookingCreateSchemaLegacyPropsForApi } from '../../../prisma/zod-utils';
import type { AdditionalInformation, AppsStatus, CalendarEvent } from "@calcom/types/Calendar";
import type { CredentialPayload } from "@calcom/types/Credential";
import type { EventResult, PartialReference } from "@calcom/types/EventManager";
import getBookingDataSchema from "./getBookingDataSchema";
type User = Prisma.UserGetPayload<typeof userSelect>;
type BookingType = Prisma.PromiseReturnType<typeof getOriginalRescheduledBooking>;
export type Booking = Prisma.PromiseReturnType<typeof createBooking>;
export type NewBookingEventType = Awaited<ReturnType<typeof getDefaultEvent>> | Awaited<ReturnType<typeof getEventTypesFromDB>>;
type ReqBodyWithoutEnd = z.infer<ReturnType<typeof getBookingDataSchema>>;
type ReqBodyWithEnd = ReqBodyWithoutEnd & {
    end: string;
};
export type Invitee = {
    email: string;
    name: string;
    firstName: string;
    lastName: string;
    timeZone: string;
    language: {
        translate: TFunction;
        locale: string;
    };
}[];
export type OrganizerUser = Awaited<ReturnType<typeof loadUsers>>[number] & {
    isFixed?: boolean;
    metadata?: Prisma.JsonValue;
};
export type OriginalRescheduledBooking = Awaited<ReturnType<typeof getOriginalRescheduledBooking>>;
type AwaitedBookingData = Awaited<ReturnType<typeof getBookingData>>;
export type RescheduleReason = AwaitedBookingData["rescheduleReason"];
export type NoEmail = AwaitedBookingData["noEmail"];
export type AdditionalNotes = AwaitedBookingData["notes"];
export type ReqAppsStatus = AwaitedBookingData["appsStatus"];
export type SmsReminderNumber = AwaitedBookingData["smsReminderNumber"];
export type EventTypeId = AwaitedBookingData["eventTypeId"];
export type ReqBodyMetadata = ReqBodyWithEnd["metadata"];
export type IsConfirmedByDefault = ReturnType<typeof getRequiresConfirmationFlags>["isConfirmedByDefault"];
export type PaymentAppData = ReturnType<typeof getPaymentAppData>;
export interface IEventTypePaymentCredentialType {
    appId: EventTypeAppsList;
    app: {
        categories: App["categories"];
        dirName: string;
    };
    key: Prisma.JsonValue;
}
export declare const getEventTypesFromDB: (eventTypeId: number) => Promise<{
    metadata: {
        smartContractAddress?: string | undefined;
        blockchainId?: number | undefined;
        multipleDuration?: number[] | undefined;
        giphyThankYouPage?: string | undefined;
        apps?: {
            alby?: {
                price: number;
                currency: string;
                appCategories?: string[] | undefined;
                paymentOption?: string | undefined;
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
            } | undefined;
            basecamp3?: {
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
            } | undefined;
            dailyvideo?: {} | undefined;
            fathom?: {
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                trackingId?: string | undefined;
            } | undefined;
            feishucalendar?: {} | undefined;
            ga4?: {
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                trackingId?: string | undefined;
            } | undefined;
            giphy?: {
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                thankYouPage?: string | undefined;
            } | undefined;
            googlecalendar?: {} | undefined;
            gtm?: {
                trackingId: string;
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
            } | undefined;
            hubspot?: {} | undefined;
            intercom?: {} | undefined;
            jelly?: {} | undefined;
            jitsivideo?: {} | undefined;
            larkcalendar?: {} | undefined;
            make?: {} | undefined;
            matomo?: {
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                MATOMO_URL?: string | undefined;
                SITE_ID?: string | undefined;
            } | undefined;
            metapixel?: {
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                trackingId?: string | undefined;
            } | undefined;
            "mock-payment-app"?: {
                price: number;
                currency: string;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                paymentOption?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            office365calendar?: {
                client_id: string;
                client_secret: string;
            } | undefined;
            office365video?: {
                client_id: string;
                client_secret: string;
            } | undefined;
            paypal?: {
                price: number;
                currency: string;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                paymentOption?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            "pipedrive-crm"?: {} | undefined;
            plausible?: {
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                PLAUSIBLE_URL?: string | undefined;
                trackingId?: string | undefined;
            } | undefined;
            posthog?: {
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                TRACKING_ID?: string | undefined;
                API_HOST?: string | undefined;
            } | undefined;
            qr_code?: {
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
            } | undefined;
            "routing-forms"?: any;
            salesforce?: {} | undefined;
            shimmervideo?: {} | undefined;
            stripe?: {
                price: number;
                currency: string;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
                paymentOption?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            tandemvideo?: {} | undefined;
            "booking-pages-tag"?: {
                trackingId: string;
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
            } | undefined;
            "event-type-app-card"?: {
                isSunrise: boolean;
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
            } | undefined;
            vital?: {} | undefined;
            webex?: {} | undefined;
            wordpress?: {
                isSunrise: boolean;
                enabled?: boolean | undefined;
                credentialId?: number | undefined;
                appCategories?: string[] | undefined;
            } | undefined;
            zapier?: {} | undefined;
            "zoho-bigin"?: {} | undefined;
            zohocalendar?: {} | undefined;
            zohocrm?: {} | undefined;
            zoomvideo?: {} | undefined;
        } | undefined;
        additionalNotesRequired?: boolean | undefined;
        disableSuccessPage?: boolean | undefined;
        disableStandardEmails?: {
            confirmation?: {
                host?: boolean | undefined;
                attendee?: boolean | undefined;
            } | undefined;
        } | undefined;
        managedEventConfig?: {
            unlockedFields?: {
                price?: true | undefined;
                bookings?: true | undefined;
                webhooks?: true | undefined;
                profile?: true | undefined;
                owner?: true | undefined;
                title?: true | undefined;
                description?: true | undefined;
                hidden?: true | undefined;
                team?: true | undefined;
                availability?: true | undefined;
                length?: true | undefined;
                workflows?: true | undefined;
                users?: true | undefined;
                hosts?: true | undefined;
                currency?: true | undefined;
                children?: true | undefined;
                schedule?: true | undefined;
                timeZone?: true | undefined;
                userId?: true | undefined;
                metadata?: true | undefined;
                position?: true | undefined;
                parent?: true | undefined;
                slug?: true | undefined;
                locations?: true | undefined;
                offsetStart?: true | undefined;
                profileId?: true | undefined;
                teamId?: true | undefined;
                eventName?: true | undefined;
                parentId?: true | undefined;
                bookingFields?: true | undefined;
                periodType?: true | undefined;
                periodStartDate?: true | undefined;
                periodEndDate?: true | undefined;
                periodDays?: true | undefined;
                periodCountCalendarDays?: true | undefined;
                lockTimeZoneToggleOnBookingPage?: true | undefined;
                requiresConfirmation?: true | undefined;
                requiresBookerEmailVerification?: true | undefined;
                recurringEvent?: true | undefined;
                disableGuests?: true | undefined;
                hideCalendarNotes?: true | undefined;
                minimumBookingNotice?: true | undefined;
                beforeEventBuffer?: true | undefined;
                afterEventBuffer?: true | undefined;
                seatsPerTimeSlot?: true | undefined;
                onlyShowFirstAvailableSlot?: true | undefined;
                seatsShowAttendees?: true | undefined;
                seatsShowAvailabilityCount?: true | undefined;
                schedulingType?: true | undefined;
                scheduleId?: true | undefined;
                slotInterval?: true | undefined;
                successRedirectUrl?: true | undefined;
                forwardParamsSuccessRedirect?: true | undefined;
                bookingLimits?: true | undefined;
                durationLimits?: true | undefined;
                isInstantEvent?: true | undefined;
                assignAllTeamMembers?: true | undefined;
                useEventTypeDestinationCalendarEmail?: true | undefined;
                secondaryEmailId?: true | undefined;
                hashedLink?: true | undefined;
                destinationCalendar?: true | undefined;
                customInputs?: true | undefined;
                aiPhoneCallConfig?: true | undefined;
                secondaryEmail?: true | undefined;
                _count?: true | undefined;
            } | undefined;
        } | undefined;
        requiresConfirmationThreshold?: {
            time: number;
            unit: "months" | "years" | "days" | "hours" | "minutes" | "milliseconds" | "seconds" | "dates";
        } | undefined;
        config?: {
            useHostSchedulesForTeamEvent?: boolean | undefined;
        } | undefined;
        bookerLayouts?: {
            enabledLayouts: import('../../../prisma/zod-utils').BookerLayouts[];
            defaultLayout: import('../../../prisma/zod-utils').BookerLayouts;
        } | null | undefined;
    } | null;
    recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
    customInputs: {
        required: boolean;
        label: string;
        placeholder: string;
        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
        id: number;
        eventTypeId: number;
        options?: {
            label: string;
            type: string;
        }[] | null | undefined;
        hasToBeCreated?: boolean | undefined;
    }[];
    locations: LocationObject[];
    bookingFields: {
        name: string;
        type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
        options?: {
            label: string;
            value: string;
        }[] | undefined;
        required?: boolean | undefined;
        label?: string | undefined;
        placeholder?: string | undefined;
        defaultLabel?: string | undefined;
        defaultPlaceholder?: string | undefined;
        labelAsSafeHtml?: string | undefined;
        getOptionsAt?: string | undefined;
        optionsInputs?: Record<string, {
            type: "text" | "address" | "phone";
            required?: boolean | undefined;
            placeholder?: string | undefined;
        }> | undefined;
        variant?: string | undefined;
        variantsConfig?: {
            variants: Record<string, {
                fields: {
                    name: string;
                    type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
                    required?: boolean | undefined;
                    label?: string | undefined;
                    placeholder?: string | undefined;
                    labelAsSafeHtml?: string | undefined;
                }[];
            }>;
        } | undefined;
        views?: {
            label: string;
            id: string;
            description?: string | undefined;
        }[] | undefined;
        hideWhenJustOneOption?: boolean | undefined;
        hidden?: boolean | undefined;
        editable?: "user" | "system" | "system-but-optional" | "system-but-hidden" | "user-readonly" | undefined;
        sources?: {
            label: string;
            type: string;
            id: string;
            editUrl?: string | undefined;
            fieldRequired?: boolean | undefined;
        }[] | undefined;
    }[] & z.BRAND<"HAS_SYSTEM_FIELDS">;
    isDynamic: boolean;
    price: number;
    owner: {
        hideBranding: boolean;
    } | null;
    title: string;
    description: string | null;
    team: {
        name: string;
        id: number;
        parentId: number | null;
    } | null;
    availability: {
        days: number[];
        date: Date | null;
        startTime: Date;
        endTime: Date;
    }[];
    length: number;
    workflows: ({
        workflow: {
            steps: {
                action: import('../../../prisma-client').$Enums.WorkflowActions;
                id: number;
                template: import('../../../prisma-client').$Enums.WorkflowTemplates;
                stepNumber: number;
                workflowId: number;
                sendTo: string | null;
                reminderBody: string | null;
                emailSubject: string | null;
                numberRequired: boolean | null;
                sender: string | null;
                numberVerificationPending: boolean;
                includeCalendarEvent: boolean;
            }[];
        } & {
            name: string;
            trigger: import('../../../prisma-client').$Enums.WorkflowTriggerEvents;
            id: number;
            userId: number | null;
            time: number | null;
            position: number;
            teamId: number | null;
            timeUnit: import('../../../prisma-client').$Enums.TimeUnit | null;
        };
    } & {
        id: number;
        eventTypeId: number;
        workflowId: number;
    })[];
    users: {
        username: string | null;
        email: string;
        name: string | null;
        availability: {
            days: number[];
            date: Date | null;
            id: number;
            startTime: Date;
            endTime: Date;
            eventTypeId: number | null;
            userId: number | null;
            scheduleId: number | null;
        }[];
        theme: string | null;
        schedules: {
            availability: {
                days: number[];
                date: Date | null;
                startTime: Date;
                endTime: Date;
            }[];
            id: number;
            timeZone: string | null;
        }[];
        id: number;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        destinationCalendar: {
            id: number;
            eventTypeId: number | null;
            credentialId: number | null;
            externalId: string;
            userId: number | null;
            integration: string;
            primaryEmail: string | null;
        } | null;
        bufferTime: number;
        hideBranding: boolean;
        locale: string | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        allowDynamicBooking: boolean | null;
        selectedCalendars: {
            credentialId: number | null;
            externalId: string;
            userId: number;
            integration: string;
        }[];
        travelSchedules: {
            id: number;
            timeZone: string;
            userId: number;
            startDate: Date;
            endDate: Date | null;
            prevTimeZone: string | null;
        }[];
        credentials: {
            type: string;
            user: {
                email: string;
            } | null;
            id: number;
            userId: number | null;
            invalid: boolean | null;
            key: Prisma.JsonValue;
            teamId: number | null;
            appId: string | null;
        }[];
    }[];
    hosts: {
        user: {
            username: string | null;
            email: string;
            name: string | null;
            availability: {
                days: number[];
                date: Date | null;
                id: number;
                startTime: Date;
                endTime: Date;
                eventTypeId: number | null;
                userId: number | null;
                scheduleId: number | null;
            }[];
            theme: string | null;
            schedules: {
                availability: {
                    days: number[];
                    date: Date | null;
                    startTime: Date;
                    endTime: Date;
                }[];
                id: number;
                timeZone: string | null;
            }[];
            id: number;
            timeFormat: number | null;
            defaultScheduleId: number | null;
            timeZone: string;
            startTime: number;
            endTime: number;
            metadata: Prisma.JsonValue;
            destinationCalendar: {
                id: number;
                eventTypeId: number | null;
                credentialId: number | null;
                externalId: string;
                userId: number | null;
                integration: string;
                primaryEmail: string | null;
            } | null;
            bufferTime: number;
            hideBranding: boolean;
            locale: string | null;
            brandColor: string | null;
            darkBrandColor: string | null;
            allowDynamicBooking: boolean | null;
            selectedCalendars: {
                credentialId: number | null;
                externalId: string;
                userId: number;
                integration: string;
            }[];
            travelSchedules: {
                id: number;
                timeZone: string;
                userId: number;
                startDate: Date;
                endDate: Date | null;
                prevTimeZone: string | null;
            }[];
            credentials: {
                type: string;
                user: {
                    email: string;
                } | null;
                id: number;
                userId: number | null;
                invalid: boolean | null;
                key: Prisma.JsonValue;
                teamId: number | null;
                appId: string | null;
            }[];
        };
        isFixed: boolean;
        priority: number | null;
    }[];
    currency: string;
    schedule: {
        availability: {
            days: number[];
            date: Date | null;
            id: number;
            startTime: Date;
            endTime: Date;
            eventTypeId: number | null;
            userId: number | null;
            scheduleId: number | null;
        }[];
        id: number;
        timeZone: string | null;
    } | null;
    id: number;
    timeZone: string | null;
    userId: number | null;
    slug: string;
    eventName: string | null;
    parentId: number | null;
    periodType: import('../../../prisma-client').$Enums.PeriodType;
    periodStartDate: Date | null;
    periodEndDate: Date | null;
    periodDays: number | null;
    periodCountCalendarDays: boolean | null;
    lockTimeZoneToggleOnBookingPage: boolean;
    requiresConfirmation: boolean;
    requiresBookerEmailVerification: boolean;
    disableGuests: boolean;
    hideCalendarNotes: boolean;
    minimumBookingNotice: number;
    seatsPerTimeSlot: number | null;
    seatsShowAttendees: boolean | null;
    seatsShowAvailabilityCount: boolean | null;
    schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
    bookingLimits: Prisma.JsonValue;
    durationLimits: Prisma.JsonValue;
    assignAllTeamMembers: boolean;
    useEventTypeDestinationCalendarEmail: boolean;
    secondaryEmailId: number | null;
    destinationCalendar: {
        id: number;
        eventTypeId: number | null;
        credentialId: number | null;
        externalId: string;
        userId: number | null;
        integration: string;
        primaryEmail: string | null;
    } | null;
    secondaryEmail: {
        email: string;
        id: number;
    } | null;
}>;
type IsFixedAwareUser = User & {
    isFixed: boolean;
    credentials: CredentialPayload[];
    organization: {
        slug: string;
    };
    priority?: number;
};
declare const loadUsers: (eventType: NewBookingEventType, dynamicUserList: string[], req: IncomingMessage) => Promise<({
    username: string | null;
    email: string;
    name: string | null;
    availability: {
        id: number;
        userId: number | null;
        eventTypeId: number | null;
        days: number[];
        startTime: Date;
        endTime: Date;
        date: Date | null;
        scheduleId: number | null;
    }[];
    theme: string | null;
    schedules: {
        availability: {
            days: number[];
            date: Date | null;
            startTime: Date;
            endTime: Date;
        }[];
        id: number;
        timeZone: string | null;
    }[];
    id: number;
    timeFormat: number | null;
    defaultScheduleId: number | null;
    timeZone: string;
    startTime: number;
    endTime: number;
    metadata: Prisma.JsonValue;
    destinationCalendar: {
        id: number;
        integration: string;
        externalId: string;
        primaryEmail: string | null;
        userId: number | null;
        eventTypeId: number | null;
        credentialId: number | null;
    } | null;
    bufferTime: number;
    hideBranding: boolean;
    locale: string | null;
    brandColor: string | null;
    darkBrandColor: string | null;
    allowDynamicBooking: boolean | null;
    selectedCalendars: {
        userId: number;
        integration: string;
        externalId: string;
        credentialId: number | null;
    }[];
    travelSchedules: {
        id: number;
        userId: number;
        timeZone: string;
        startDate: Date;
        endDate: Date | null;
        prevTimeZone: string | null;
    }[];
} & {
    credentials: {
        type: string;
        user: {
            email: string;
        } | null;
        id: number;
        userId: number | null;
        invalid: boolean | null;
        key: Prisma.JsonValue;
        teamId: number | null;
        appId: string | null;
    }[];
})[]>;
export declare function ensureAvailableUsers(eventType: Awaited<ReturnType<typeof getEventTypesFromDB>> & {
    users: IsFixedAwareUser[];
}, input: {
    dateFrom: string;
    dateTo: string;
    timeZone: string;
    originalRescheduledBooking?: BookingType;
}, loggerWithEventDetails: Logger<unknown>): Promise<IsFixedAwareUser[]>;
declare function getOriginalRescheduledBooking(uid: string, seatsEventType?: boolean): Promise<({
    payment: {
        data: Prisma.JsonValue;
        refunded: boolean;
        success: boolean;
        currency: string;
        id: number;
        uid: string;
        externalId: string;
        paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
        bookingId: number;
        appId: string | null;
        amount: number;
        fee: number;
    }[];
    attendees: {
        email: string;
        name: string;
        id: number;
        timeZone: string;
        locale: string | null;
        bookingSeat: {
            data: Prisma.JsonValue;
            id: number;
            bookingId: number;
            referenceUid: string;
            attendeeId: number;
        } | null;
    }[];
    user: {
        email: string;
        name: string | null;
        id: number;
        timeZone: string;
        destinationCalendar: {
            id: number;
            eventTypeId: number | null;
            credentialId: number | null;
            externalId: string;
            userId: number | null;
            integration: string;
            primaryEmail: string | null;
        } | null;
        locale: string | null;
        credentials: {
            type: string;
            user: {
                email: string;
            } | null;
            id: number;
            userId: number | null;
            invalid: boolean | null;
            key: Prisma.JsonValue;
            teamId: number | null;
            appId: string | null;
        }[];
    } | null;
    destinationCalendar: {
        id: number;
        eventTypeId: number | null;
        credentialId: number | null;
        externalId: string;
        userId: number | null;
        integration: string;
        primaryEmail: string | null;
    } | null;
    references: {
        type: string;
        id: number;
        uid: string;
        credentialId: number | null;
        deleted: boolean | null;
        bookingId: number | null;
        thirdPartyRecurringEventId: string | null;
        meetingId: string | null;
        meetingPassword: string | null;
        meetingUrl: string | null;
        externalCalendarId: string | null;
    }[];
    workflowReminders: {
        method: import('../../../prisma-client').$Enums.WorkflowMethods;
        cancelled: boolean | null;
        id: number;
        bookingUid: string | null;
        referenceId: string | null;
        scheduledDate: Date;
        scheduled: boolean;
        workflowStepId: number | null;
        seatReferenceId: string | null;
        isMandatoryReminder: boolean | null;
        retryCount: number;
    }[];
} & {
    paid: boolean;
    location: string | null;
    title: string;
    description: string | null;
    status: import('../../../prisma-client').$Enums.BookingStatus;
    rescheduled: boolean | null;
    rating: number | null;
    id: number;
    startTime: Date;
    endTime: Date;
    eventTypeId: number | null;
    uid: string;
    userId: number | null;
    cancellationReason: string | null;
    metadata: Prisma.JsonValue;
    customInputs: Prisma.JsonValue;
    smsReminderNumber: string | null;
    recurringEventId: string | null;
    iCalUID: string | null;
    responses: Prisma.JsonValue;
    createdAt: Date;
    updatedAt: Date | null;
    idempotencyKey: string | null;
    userPrimaryEmail: string | null;
    destinationCalendarId: number | null;
    rejectionReason: string | null;
    dynamicEventSlugRef: string | null;
    dynamicGroupSlugRef: string | null;
    fromReschedule: string | null;
    scheduledJobs: string[];
    isRecorded: boolean;
    iCalSequence: number;
    ratingFeedback: string | null;
    noShowHost: boolean | null;
}) | null>;
export declare function getBookingData<T extends z.ZodType>({ req, eventType, schema, }: {
    req: NextApiRequest;
    eventType: Awaited<ReturnType<typeof getEventTypesFromDB>>;
    schema: T;
}): Promise<{
    name: string;
    email: string;
    guests: string[] | undefined;
    location: string;
    smsReminderNumber: string | null | undefined;
    notes: string | undefined;
    rescheduleReason: string | undefined;
    calEventUserFieldsResponses: undefined;
    calEventResponses: undefined;
    customInputs: undefined;
    language: string;
    timeZone: string;
    eventTypeId: number;
    start: string;
    metadata: Record<string, string>;
    responses: {
        email: string;
        name: (string | {
            firstName: string;
            lastName?: string | undefined;
        }) & (string | {
            firstName: string;
            lastName?: string | undefined;
        } | undefined);
        guests?: string[] | undefined;
        notes?: string | undefined;
        location?: {
            value: string;
            optionValue: string;
        } | undefined;
        smsReminderNumber?: string | undefined;
        rescheduleReason?: string | undefined;
    } & Record<string, any>;
    user?: string | string[] | undefined;
    eventTypeSlug?: string | undefined;
    rescheduleUid?: string | undefined;
    orgSlug?: string | undefined;
    bookingUid?: string | undefined;
    end: string;
    seatReferenceUid?: string | undefined;
    hashedLink?: string | null | undefined;
    recurringEventId?: string | undefined;
    hasHashedBookingLink?: boolean | undefined;
    noEmail?: boolean | undefined;
    recurringCount?: number | undefined;
    allRecurringDates?: {
        start: string;
        end: string;
    }[] | undefined;
    currentRecurringIndex?: number | undefined;
    appsStatus?: {
        success: number;
        type: string;
        appName: string;
        failures: number;
        errors: string[];
        warnings?: string[] | undefined;
    }[] | undefined;
    luckyUsers?: number[] | undefined;
} | {
    name: (string | {
        firstName: string;
        lastName?: string | undefined;
    }) & (string | {
        firstName: string;
        lastName?: string | undefined;
    } | undefined);
    email: string;
    guests: string[];
    location: string;
    smsReminderNumber: string | undefined;
    notes: string;
    calEventUserFieldsResponses: import("@calcom/types/Calendar").CalEventResponses;
    rescheduleReason: string | undefined;
    calEventResponses: import("@calcom/types/Calendar").CalEventResponses;
    customInputs: undefined;
    language: string;
    timeZone: string;
    eventTypeId: number;
    start: string;
    metadata: Record<string, string>;
    responses: {
        email: string;
        name: (string | {
            firstName: string;
            lastName?: string | undefined;
        }) & (string | {
            firstName: string;
            lastName?: string | undefined;
        } | undefined);
        guests?: string[] | undefined;
        notes?: string | undefined;
        location?: {
            value: string;
            optionValue: string;
        } | undefined;
        smsReminderNumber?: string | undefined;
        rescheduleReason?: string | undefined;
    } & Record<string, any>;
    user?: string | string[] | undefined;
    eventTypeSlug?: string | undefined;
    rescheduleUid?: string | undefined;
    orgSlug?: string | undefined;
    bookingUid?: string | undefined;
    end: string;
    seatReferenceUid?: string | undefined;
    hashedLink?: string | null | undefined;
    recurringEventId?: string | undefined;
    hasHashedBookingLink?: boolean | undefined;
    noEmail?: boolean | undefined;
    recurringCount?: number | undefined;
    allRecurringDates?: {
        start: string;
        end: string;
    }[] | undefined;
    currentRecurringIndex?: number | undefined;
    appsStatus?: {
        success: number;
        type: string;
        appName: string;
        failures: number;
        errors: string[];
        warnings?: string[] | undefined;
    }[] | undefined;
    luckyUsers?: number[] | undefined;
}>;
declare function createBooking({ originalRescheduledBooking, evt, eventTypeId, eventTypeSlug, reqBodyUser, reqBodyMetadata, reqBodyRecurringEventId, uid, responses, isConfirmedByDefault, smsReminderNumber, organizerUser, rescheduleReason, eventType, bookerEmail, paymentAppData, changedOrganizer, }: {
    originalRescheduledBooking: OriginalRescheduledBooking;
    evt: CalendarEvent;
    eventType: NewBookingEventType;
    eventTypeId: EventTypeId;
    eventTypeSlug: AwaitedBookingData["eventTypeSlug"];
    reqBodyUser: ReqBodyWithEnd["user"];
    reqBodyMetadata: ReqBodyWithEnd["metadata"];
    reqBodyRecurringEventId: ReqBodyWithEnd["recurringEventId"];
    uid: short.SUUID;
    responses: ReqBodyWithEnd["responses"] | null;
    isConfirmedByDefault: IsConfirmedByDefault;
    smsReminderNumber: AwaitedBookingData["smsReminderNumber"];
    organizerUser: Awaited<ReturnType<typeof loadUsers>>[number] & {
        isFixed?: boolean;
        metadata?: Prisma.JsonValue;
    };
    rescheduleReason: Awaited<ReturnType<typeof getBookingData>>["rescheduleReason"];
    bookerEmail: Awaited<ReturnType<typeof getBookingData>>["email"];
    paymentAppData: ReturnType<typeof getPaymentAppData>;
    changedOrganizer: boolean;
}): Promise<{
    payment: {
        data: Prisma.JsonValue;
        refunded: boolean;
        success: boolean;
        currency: string;
        id: number;
        uid: string;
        externalId: string;
        paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
        bookingId: number;
        appId: string | null;
        amount: number;
        fee: number;
    }[];
    attendees: {
        email: string;
        name: string;
        id: number;
        timeZone: string;
        bookingId: number | null;
        locale: string | null;
    }[];
    user: {
        username: string | null;
        email: string;
        name: string | null;
        timeZone: string;
    } | null;
    references: {
        type: string;
        id: number;
        uid: string;
        credentialId: number | null;
        deleted: boolean | null;
        bookingId: number | null;
        thirdPartyRecurringEventId: string | null;
        meetingId: string | null;
        meetingPassword: string | null;
        meetingUrl: string | null;
        externalCalendarId: string | null;
    }[];
} & {
    paid: boolean;
    location: string | null;
    title: string;
    description: string | null;
    status: import('../../../prisma-client').$Enums.BookingStatus;
    rescheduled: boolean | null;
    rating: number | null;
    id: number;
    startTime: Date;
    endTime: Date;
    eventTypeId: number | null;
    uid: string;
    userId: number | null;
    cancellationReason: string | null;
    metadata: Prisma.JsonValue;
    customInputs: Prisma.JsonValue;
    smsReminderNumber: string | null;
    recurringEventId: string | null;
    iCalUID: string | null;
    responses: Prisma.JsonValue;
    createdAt: Date;
    updatedAt: Date | null;
    idempotencyKey: string | null;
    userPrimaryEmail: string | null;
    destinationCalendarId: number | null;
    rejectionReason: string | null;
    dynamicEventSlugRef: string | null;
    dynamicGroupSlugRef: string | null;
    fromReschedule: string | null;
    scheduledJobs: string[];
    isRecorded: boolean;
    iCalSequence: number;
    ratingFeedback: string | null;
    noShowHost: boolean | null;
}>;
export declare function getCustomInputsResponses(reqBody: {
    responses?: Record<string, object>;
    customInputs?: z.infer<typeof bookingCreateSchemaLegacyPropsForApi>["customInputs"];
}, eventTypeCustomInputs: Awaited<ReturnType<typeof getEventTypesFromDB>>["customInputs"]): Prisma.JsonObject;
/** Updates the evt object with video call data found from booking references
 *
 * @param bookingReferences
 * @param evt
 *
 * @returns updated evt with video call data
 */
export declare const addVideoCallDataToEvent: (bookingReferences: BookingReference[], evt: CalendarEvent) => CalendarEvent;
export declare const createLoggerWithEventDetails: (eventTypeId: number, reqBodyUser: string | string[] | undefined, eventTypeSlug: string | undefined) => Logger<unknown>;
export declare function handleAppsStatus(results: EventResult<AdditionalInformation>[], booking: (Booking & {
    appsStatus?: AppsStatus[];
}) | null, reqAppsStatus: ReqAppsStatus): AppsStatus[];
export declare const findBookingQuery: (bookingId: number) => Promise<{
    location: string | null;
    title: string;
    description: string | null;
    status: import('../../../prisma-client').$Enums.BookingStatus;
    user: {
        username: string | null;
        email: string;
        name: string | null;
        timeZone: string;
    } | null;
    eventType: {
        price: number;
        title: string;
        description: string | null;
        length: number;
        currency: string;
        lockTimeZoneToggleOnBookingPage: boolean;
        requiresConfirmation: boolean;
        requiresBookerEmailVerification: boolean;
    } | null;
    startTime: Date;
    endTime: Date;
    uid: string;
    metadata: Prisma.JsonValue;
    responses: Prisma.JsonValue;
}>;
type BookingDataSchemaGetter = typeof getBookingDataSchema | typeof import('./getBookingDataSchemaForApi').default;
declare function handler(req: NextApiRequest & {
    userId?: number | undefined;
    platformClientId?: string;
    platformRescheduleUrl?: string;
    platformCancelUrl?: string;
    platformBookingUrl?: string;
    platformBookingLocation?: string;
}, bookingDataSchemaGetter?: BookingDataSchemaGetter): Promise<{
    luckyUsers?: number[] | undefined;
    user: {
        email: null;
        username?: string | null | undefined;
        name?: string | null | undefined;
        timeZone?: string | undefined;
    };
    payment?: {
        data: Prisma.JsonValue;
        refunded: boolean;
        success: boolean;
        currency: string;
        id: number;
        uid: string;
        externalId: string;
        paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
        bookingId: number;
        appId: string | null;
        amount: number;
        fee: number;
    }[] | undefined;
    attendees?: {
        email: string;
        name: string;
        id: number;
        timeZone: string;
        bookingId: number | null;
        locale: string | null;
    }[] | undefined;
    references?: {
        type: string;
        id: number;
        uid: string;
        credentialId: number | null;
        deleted: boolean | null;
        bookingId: number | null;
        thirdPartyRecurringEventId: string | null;
        meetingId: string | null;
        meetingPassword: string | null;
        meetingUrl: string | null;
        externalCalendarId: string | null;
    }[] | undefined;
    paid?: boolean | undefined;
    location?: string | null | undefined;
    title?: string | undefined;
    description?: string | null | undefined;
    status?: import('../../../prisma-client').$Enums.BookingStatus | undefined;
    rescheduled?: boolean | null | undefined;
    rating?: number | null | undefined;
    id?: number | undefined;
    startTime?: Date | undefined;
    endTime?: Date | undefined;
    eventTypeId?: number | null | undefined;
    uid?: string | undefined;
    userId?: number | null | undefined;
    cancellationReason?: string | null | undefined;
    metadata?: Prisma.JsonValue | undefined;
    customInputs?: Prisma.JsonValue | undefined;
    smsReminderNumber?: string | null | undefined;
    recurringEventId?: string | null | undefined;
    iCalUID?: string | null | undefined;
    responses?: Prisma.JsonValue | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | null | undefined;
    idempotencyKey?: string | null | undefined;
    userPrimaryEmail?: string | null | undefined;
    destinationCalendarId?: number | null | undefined;
    rejectionReason?: string | null | undefined;
    dynamicEventSlugRef?: string | null | undefined;
    dynamicGroupSlugRef?: string | null | undefined;
    fromReschedule?: string | null | undefined;
    scheduledJobs?: string[] | undefined;
    isRecorded?: boolean | undefined;
    iCalSequence?: number | undefined;
    ratingFeedback?: string | null | undefined;
    noShowHost?: boolean | null | undefined;
    appsStatus?: AppsStatus[] | undefined;
    seatReferenceUid?: string | undefined;
    paymentUid?: string | undefined;
    message?: string | undefined;
    paymentId?: number | undefined;
} | {
    references: PartialReference[];
    seatReferenceUid: string | undefined;
    luckyUsers?: number[] | undefined;
    user: {
        email: null;
        username?: string | null | undefined;
        name?: string | null | undefined;
        timeZone?: string | undefined;
    };
    payment: {
        data: Prisma.JsonValue;
        refunded: boolean;
        success: boolean;
        currency: string;
        id: number;
        uid: string;
        externalId: string;
        paymentOption: import('../../../prisma-client').$Enums.PaymentOption | null;
        bookingId: number;
        appId: string | null;
        amount: number;
        fee: number;
    }[];
    attendees: {
        email: string;
        name: string;
        id: number;
        timeZone: string;
        bookingId: number | null;
        locale: string | null;
    }[];
    paid: boolean;
    location: string | null;
    title: string;
    description: string | null;
    status: import('../../../prisma-client').$Enums.BookingStatus;
    rescheduled: boolean | null;
    rating: number | null;
    id: number;
    startTime: Date;
    endTime: Date;
    eventTypeId: number | null;
    uid: string;
    userId: number | null;
    cancellationReason: string | null;
    metadata: Prisma.JsonValue;
    customInputs: Prisma.JsonValue;
    smsReminderNumber: string | null;
    recurringEventId: string | null;
    iCalUID: string | null;
    responses: Prisma.JsonValue;
    createdAt: Date;
    updatedAt: Date | null;
    idempotencyKey: string | null;
    userPrimaryEmail: string | null;
    destinationCalendarId: number | null;
    rejectionReason: string | null;
    dynamicEventSlugRef: string | null;
    dynamicGroupSlugRef: string | null;
    fromReschedule: string | null;
    scheduledJobs: string[];
    isRecorded: boolean;
    iCalSequence: number;
    ratingFeedback: string | null;
    noShowHost: boolean | null;
    appsStatus?: AppsStatus[] | undefined;
    paymentUid?: string | undefined;
    paymentId?: number | undefined;
}>;
export default handler;
declare function getRequiresConfirmationFlags({ eventType, bookingStartTime, userId, paymentAppData, originalRescheduledBookingOrganizerId, }: {
    eventType: Pick<Awaited<ReturnType<typeof getEventTypesFromDB>>, "metadata" | "requiresConfirmation">;
    bookingStartTime: string;
    userId: number | undefined;
    paymentAppData: {
        price: number;
    };
    originalRescheduledBookingOrganizerId: number | undefined;
}): {
    /**
     * Organizer of the booking is rescheduling
     */
    userReschedulingIsOwner: boolean;
    /**
     * Booking won't need confirmation to be ACCEPTED
     */
    isConfirmedByDefault: boolean;
};
/**
 * This method is mostly same as the one in UserRepository but it includes a lot more relations which are specific requirement here
 * TODO: Figure out how to keep it in UserRepository and use it here
 */
export declare const findUsersByUsername: ({ usernameList, orgSlug, }: {
    orgSlug: string | null;
    usernameList: string[];
}) => Promise<{
    organizationId: number | null;
    profile: {
        organization: Omit<{
            name: string;
            id: number;
            metadata: Prisma.JsonValue;
            slug: string | null;
            logoUrl: string | null;
            calVideoLogo: string | null;
            bannerUrl: string | null;
        } & Omit<Pick<{
            id: number;
            name: string;
            slug: string | null;
            logo: string | null;
            logoUrl: string | null;
            calVideoLogo: string | null;
            appLogo: string | null;
            appIconLogo: string | null;
            bio: string | null;
            hideBranding: boolean;
            isPrivate: boolean;
            hideBookATeamMember: boolean;
            createdAt: Date;
            metadata: Prisma.JsonValue;
            theme: string | null;
            brandColor: string | null;
            darkBrandColor: string | null;
            bannerUrl: string | null;
            parentId: number | null;
            timeFormat: number | null;
            timeZone: string;
            weekStart: string;
            isOrganization: boolean;
            pendingPayment: boolean;
            isPlatform: boolean;
            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
        }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl">, "metadata"> & {
            requestedSlug: string | null;
            metadata: {
                requestedSlug: string | null;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?: {
                    teamSlug?: string | null | undefined;
                    lastMigrationTime?: string | undefined;
                    reverted?: boolean | undefined;
                    lastRevertTime?: string | undefined;
                } | undefined;
            };
        }, "metadata"> & {
            requestedSlug: string | null;
            metadata: {
                requestedSlug: string | null;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?: {
                    teamSlug?: string | null | undefined;
                    lastMigrationTime?: string | undefined;
                    reverted?: boolean | undefined;
                    lastRevertTime?: string | undefined;
                } | undefined;
            };
        };
        user: {
            username: string | null;
            email: string;
            name: string | null;
            id: number;
            defaultScheduleId: number | null;
            startTime: number;
            endTime: number;
            avatarUrl: string | null;
            bufferTime: number;
            locale: string | null;
        };
        username: string;
        id: number;
        uid: string;
        userId: number;
        organizationId: number;
        createdAt: Date & string;
        updatedAt: Date & string;
        upId: string;
    } | null;
    username: string | null;
    email: string;
    name: string | null;
    availability: {
        days: number[];
        date: Date | null;
        id: number;
        startTime: Date;
        endTime: Date;
        eventTypeId: number | null;
        userId: number | null;
        scheduleId: number | null;
    }[];
    theme: string | null;
    schedules: {
        availability: {
            days: number[];
            date: Date | null;
            startTime: Date;
            endTime: Date;
        }[];
        id: number;
        timeZone: string | null;
    }[];
    id: number;
    timeFormat: number | null;
    defaultScheduleId: number | null;
    timeZone: string;
    startTime: number;
    endTime: number;
    metadata: Prisma.JsonValue;
    destinationCalendar: {
        id: number;
        eventTypeId: number | null;
        credentialId: number | null;
        externalId: string;
        userId: number | null;
        integration: string;
        primaryEmail: string | null;
    } | null;
    bufferTime: number;
    hideBranding: boolean;
    locale: string | null;
    brandColor: string | null;
    darkBrandColor: string | null;
    allowDynamicBooking: boolean | null;
    selectedCalendars: {
        credentialId: number | null;
        externalId: string;
        userId: number;
        integration: string;
    }[];
    travelSchedules: {
        id: number;
        timeZone: string;
        userId: number;
        startDate: Date;
        endDate: Date | null;
        prevTimeZone: string | null;
    }[];
    credentials: {
        type: string;
        user: {
            email: string;
        } | null;
        id: number;
        userId: number | null;
        invalid: boolean | null;
        key: Prisma.JsonValue;
        teamId: number | null;
        appId: string | null;
    }[];
}[]>;
//# sourceMappingURL=handleNewBooking.d.ts.map