declare const getBookingInfo: (uid: string) => Promise<{
    bookingInfoRaw: undefined;
    bookingInfo: undefined;
} | {
    bookingInfoRaw: {
        location: string | null;
        title: string;
        description: string | null;
        attendees: {
            email: string;
            name: string;
            timeZone: string;
        }[];
        status: import('../../../prisma-client').$Enums.BookingStatus;
        user: {
            username: string | null;
            email: string;
            name: string | null;
            id: number;
            timeZone: string;
            avatarUrl: string | null;
        } | null;
        eventType: {
            timeZone: string | null;
            slug: string;
            eventName: string | null;
            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
        } | null;
        id: number;
        startTime: Date;
        endTime: Date;
        eventTypeId: number | null;
        uid: string;
        cancellationReason: string | null;
        metadata: import('../../../prisma-client').Prisma.JsonValue;
        customInputs: import('../../../prisma-client').Prisma.JsonValue;
        smsReminderNumber: string | null;
        recurringEventId: string | null;
        responses: import('../../../prisma-client').Prisma.JsonValue;
        userPrimaryEmail: string | null;
        rejectionReason: string | null;
        seatsReferences: {
            referenceUid: string;
        }[];
    };
    bookingInfo: Omit<{
        location: string | null;
        title: string;
        description: string | null;
        attendees: {
            email: string;
            name: string;
            timeZone: string;
        }[];
        status: import('../../../prisma-client').$Enums.BookingStatus;
        user: {
            username: string | null;
            email: string;
            name: string | null;
            id: number;
            timeZone: string;
            avatarUrl: string | null;
        } | null;
        eventType: {
            timeZone: string | null;
            slug: string;
            eventName: string | null;
            schedulingType: import('../../../prisma-client').$Enums.SchedulingType | null;
        } | null;
        id: number;
        startTime: Date;
        endTime: Date;
        eventTypeId: number | null;
        uid: string;
        cancellationReason: string | null;
        metadata: import('../../../prisma-client').Prisma.JsonValue;
        customInputs: import('../../../prisma-client').Prisma.JsonValue;
        smsReminderNumber: string | null;
        recurringEventId: string | null;
        responses: import('../../../prisma-client').Prisma.JsonValue;
        userPrimaryEmail: string | null;
        rejectionReason: string | null;
        seatsReferences: {
            referenceUid: string;
        }[];
    }, "responses"> & {
        responses: Record<string, string | boolean | string[] | Record<string, string> | {
            value: string;
            optionValue: string;
        }>;
    };
}>;
export default getBookingInfo;
//# sourceMappingURL=getBookingInfo.d.ts.map