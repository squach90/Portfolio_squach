import type { Account, Prisma, User, VerificationToken } from '../../../prisma-client';
import type { PrismaClient } from '../../../prisma';
/** @return { import("next-auth/adapters").Adapter } */
export default function CalComAdapter(prismaClient: PrismaClient): {
    createUser: (data: Prisma.UserCreateInput) => import('../../../prisma-client/runtime/library').DynamicModelExtensionFluentApi<Prisma.TypeMap<import('../../../prisma-client/runtime/library').InternalArgs & {
        result: {};
        model: {
            $allModels: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            payment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            profile: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            team: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            availability: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            session: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feedback: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            user: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            refreshToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventType: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            booking: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            schedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            host: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            attendee: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            hashedLink: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            destinationCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            secondaryEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            avatar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            credential: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            organizationSettings: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformOAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformBilling: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncData: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingSeat: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            instantMeetingToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflow: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowStep: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhook: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            userPassword: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            travelSchedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            membership: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verificationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingReference: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventTypeCustomInput: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            resetPasswordRequest: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            reminderMail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            impersonations: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            apiKey: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            account: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_Form: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_FormResponse: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            aIPhoneCallConfiguration: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowsOnEventTypes: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            deployment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowReminder: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhookScheduledTriggers: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedNumber: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feature: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedSlots: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            oAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessCode: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            calendarCache: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            tempOrgRedirect: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeEntry: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeReason: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformAuthorizationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncTeamGroupMapping: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            task: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingTimeStatus: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
        };
        query: {};
        client: {};
    }>, "User", "create", never> & import('../../../prisma-client/runtime/library').PrismaPromise<{
        username: string | null;
        email: string;
        role: import('../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatar: string | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        away: boolean;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        organizationId: number | null;
        movedToProfileId: number | null;
        isPlatformManaged: boolean;
        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
    }>;
    getUser: (id: string | number) => import("@prisma/extension-accelerate").AcceleratePromise<{
        username: string | null;
        email: string;
        role: import('../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatar: string | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        away: boolean;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        organizationId: number | null;
        movedToProfileId: number | null;
        isPlatformManaged: boolean;
        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
    } | null>;
    getUserByEmail: (email: User["email"]) => import("@prisma/extension-accelerate").AcceleratePromise<{
        username: string | null;
        email: string;
        role: import('../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatar: string | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        away: boolean;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        organizationId: number | null;
        movedToProfileId: number | null;
        isPlatformManaged: boolean;
        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
    } | null>;
    getUserByAccount(provider_providerAccountId: {
        providerAccountId: Account["providerAccountId"];
        provider: User["identityProvider"];
    }): Promise<{
        username: string | null;
        email: string;
        role: import('../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatar: string | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        away: boolean;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        organizationId: number | null;
        movedToProfileId: number | null;
        isPlatformManaged: boolean;
        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
    } | null>;
    updateUser: ({ id, ...data }: Prisma.UserUncheckedCreateInput) => import('../../../prisma-client/runtime/library').DynamicModelExtensionFluentApi<Prisma.TypeMap<import('../../../prisma-client/runtime/library').InternalArgs & {
        result: {};
        model: {
            $allModels: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            payment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            profile: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            team: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            availability: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            session: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feedback: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            user: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            refreshToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventType: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            booking: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            schedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            host: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            attendee: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            hashedLink: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            destinationCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            secondaryEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            avatar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            credential: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            organizationSettings: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformOAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformBilling: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncData: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingSeat: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            instantMeetingToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflow: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowStep: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhook: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            userPassword: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            travelSchedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            membership: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verificationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingReference: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventTypeCustomInput: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            resetPasswordRequest: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            reminderMail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            impersonations: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            apiKey: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            account: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_Form: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_FormResponse: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            aIPhoneCallConfiguration: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowsOnEventTypes: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            deployment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowReminder: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhookScheduledTriggers: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedNumber: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feature: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedSlots: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            oAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessCode: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            calendarCache: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            tempOrgRedirect: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeEntry: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeReason: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformAuthorizationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncTeamGroupMapping: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            task: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingTimeStatus: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
        };
        query: {};
        client: {};
    }>, "User", "update", never> & import('../../../prisma-client/runtime/library').PrismaPromise<{
        username: string | null;
        email: string;
        role: import('../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatar: string | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        away: boolean;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        organizationId: number | null;
        movedToProfileId: number | null;
        isPlatformManaged: boolean;
        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
    }>;
    deleteUser: (id: User["id"]) => import('../../../prisma-client/runtime/library').DynamicModelExtensionFluentApi<Prisma.TypeMap<import('../../../prisma-client/runtime/library').InternalArgs & {
        result: {};
        model: {
            $allModels: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            payment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            profile: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            team: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            availability: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            session: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feedback: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            user: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            refreshToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventType: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            booking: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            schedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            host: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            attendee: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            hashedLink: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            destinationCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            secondaryEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            avatar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            credential: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            organizationSettings: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformOAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformBilling: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncData: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingSeat: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            instantMeetingToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflow: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowStep: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhook: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            userPassword: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            travelSchedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            membership: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verificationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingReference: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventTypeCustomInput: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            resetPasswordRequest: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            reminderMail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            impersonations: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            apiKey: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            account: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_Form: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_FormResponse: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            aIPhoneCallConfiguration: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowsOnEventTypes: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            deployment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowReminder: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhookScheduledTriggers: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedNumber: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feature: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedSlots: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            oAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessCode: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            calendarCache: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            tempOrgRedirect: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeEntry: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeReason: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformAuthorizationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncTeamGroupMapping: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            task: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingTimeStatus: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
        };
        query: {};
        client: {};
    }>, "User", "delete", never> & import('../../../prisma-client/runtime/library').PrismaPromise<{
        username: string | null;
        email: string;
        role: import('../../../prisma-client').$Enums.UserPermissionRole;
        name: string | null;
        bio: string | null;
        theme: string | null;
        verified: boolean | null;
        locked: boolean;
        id: number;
        timeFormat: number | null;
        defaultScheduleId: number | null;
        weekStart: string;
        timeZone: string;
        startTime: number;
        endTime: number;
        metadata: Prisma.JsonValue;
        emailVerified: Date | null;
        avatar: string | null;
        avatarUrl: string | null;
        bufferTime: number;
        hideBranding: boolean;
        appTheme: string | null;
        createdDate: Date;
        trialEndsAt: Date | null;
        completedOnboarding: boolean;
        locale: string | null;
        twoFactorSecret: string | null;
        twoFactorEnabled: boolean;
        backupCodes: string | null;
        identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
        identityProviderId: string | null;
        invitedTo: number | null;
        brandColor: string | null;
        darkBrandColor: string | null;
        away: boolean;
        allowDynamicBooking: boolean | null;
        allowSEOIndexing: boolean | null;
        receiveMonthlyDigestEmail: boolean | null;
        disableImpersonation: boolean;
        organizationId: number | null;
        movedToProfileId: number | null;
        isPlatformManaged: boolean;
        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
    }>;
    createVerificationToken(data: VerificationToken): Promise<{
        expires: Date;
        identifier: string;
        teamId: number | null;
        secondaryEmailId: number | null;
        token: string;
        createdAt: Date;
        updatedAt: Date;
        expiresInDays: number | null;
    }>;
    useVerificationToken(identifier_token: Prisma.VerificationTokenIdentifierTokenCompoundUniqueInput): Promise<{
        expires: Date;
        identifier: string;
        teamId: number | null;
        secondaryEmailId: number | null;
        token: string;
        createdAt: Date;
        updatedAt: Date;
        expiresInDays: number | null;
    } | null>;
    linkAccount: (data: Prisma.AccountCreateInput) => import('../../../prisma-client/runtime/library').DynamicModelExtensionFluentApi<Prisma.TypeMap<import('../../../prisma-client/runtime/library').InternalArgs & {
        result: {};
        model: {
            $allModels: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            payment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            profile: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            team: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            availability: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            session: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feedback: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            user: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            refreshToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventType: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            booking: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            schedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            host: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            attendee: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            hashedLink: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            destinationCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            secondaryEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            avatar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            credential: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            organizationSettings: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformOAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformBilling: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncData: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingSeat: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            instantMeetingToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflow: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowStep: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhook: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            userPassword: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            travelSchedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            membership: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verificationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingReference: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventTypeCustomInput: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            resetPasswordRequest: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            reminderMail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            impersonations: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            apiKey: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            account: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_Form: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_FormResponse: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            aIPhoneCallConfiguration: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowsOnEventTypes: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            deployment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowReminder: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhookScheduledTriggers: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedNumber: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feature: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedSlots: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            oAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessCode: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            calendarCache: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            tempOrgRedirect: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeEntry: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeReason: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformAuthorizationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncTeamGroupMapping: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            task: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingTimeStatus: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
        };
        query: {};
        client: {};
    }>, "Account", "create", never> & import('../../../prisma-client/runtime/library').PrismaPromise<{
        type: string;
        access_token: string | null;
        id: string;
        userId: number;
        provider: string;
        providerAccountId: string;
        providerEmail: string | null;
        refresh_token: string | null;
        expires_at: number | null;
        token_type: string | null;
        scope: string | null;
        id_token: string | null;
        session_state: string | null;
    }>;
    unlinkAccount: (provider_providerAccountId: Prisma.AccountProviderProviderAccountIdCompoundUniqueInput) => import('../../../prisma-client/runtime/library').DynamicModelExtensionFluentApi<Prisma.TypeMap<import('../../../prisma-client/runtime/library').InternalArgs & {
        result: {};
        model: {
            $allModels: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            payment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            profile: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            team: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            availability: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            session: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feedback: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            user: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            refreshToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventType: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            booking: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            schedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            host: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            attendee: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            hashedLink: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            destinationCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            secondaryEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            avatar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            credential: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            organizationSettings: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformOAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformBilling: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncData: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingSeat: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            instantMeetingToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflow: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowStep: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhook: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            userPassword: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            travelSchedule: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            membership: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verificationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingReference: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedCalendar: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            eventTypeCustomInput: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            resetPasswordRequest: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            reminderMail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            impersonations: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            apiKey: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            account: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_Form: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            app_RoutingForms_FormResponse: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            aIPhoneCallConfiguration: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowsOnEventTypes: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            deployment: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            workflowReminder: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            webhookScheduledTriggers: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedNumber: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            verifiedEmail: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            feature: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            selectedSlots: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            oAuthClient: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            accessCode: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            calendarCache: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            tempOrgRedirect: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeEntry: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            outOfOfficeReason: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            platformAuthorizationToken: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            dSyncTeamGroupMapping: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            task: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
            bookingTimeStatus: {
                aggregate: () => <T, A>(this: T, args: Prisma.Exact<A, Prisma.Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T, A, "aggregate">>;
                count: () => <T_1, A_1>(this: T_1, args?: Prisma.Exact<A_1, Prisma.Args<T_1, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_1, A_1, "count">>;
                findFirst: () => <T_2, A_2>(this: T_2, args?: Prisma.Exact<A_2, Prisma.Args<T_2, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_2, A_2, "findFirst"> | null>;
                findFirstOrThrow: () => <T_3, A_3>(this: T_3, args?: Prisma.Exact<A_3, Prisma.Args<T_3, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_3, A_3, "findFirstOrThrow">>;
                findMany: () => <T_4, A_4>(this: T_4, args?: Prisma.Exact<A_4, Prisma.Args<T_4, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy> | undefined) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_4, A_4, "findMany">>;
                findUnique: () => <T_5, A_5>(this: T_5, args: Prisma.Exact<A_5, Prisma.Args<T_5, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_5, A_5, "findUnique"> | null>;
                findUniqueOrThrow: () => <T_6, A_6>(this: T_6, args: Prisma.Exact<A_6, Prisma.Args<T_6, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_6, A_6, "findUniqueOrThrow">>;
                groupBy: () => <T_7, A_7>(this: T_7, args: Prisma.Exact<A_7, Prisma.Args<T_7, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<Prisma.Result<T_7, A_7, "groupBy">>;
            };
        };
        query: {};
        client: {};
    }>, "Account", "delete", never> & import('../../../prisma-client/runtime/library').PrismaPromise<{
        type: string;
        access_token: string | null;
        id: string;
        userId: number;
        provider: string;
        providerAccountId: string;
        providerEmail: string | null;
        refresh_token: string | null;
        expires_at: number | null;
        token_type: string | null;
        scope: string | null;
        id_token: string | null;
        session_state: string | null;
    }>;
};
//# sourceMappingURL=next-auth-custom-adapter.d.ts.map