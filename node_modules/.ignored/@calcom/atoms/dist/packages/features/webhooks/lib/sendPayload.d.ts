import type { Webhook } from '../../../prisma-client';
import type { CalendarEvent, Person } from "@calcom/types/Calendar";
export type EventTypeInfo = {
    eventTitle?: string | null;
    eventDescription?: string | null;
    requiresConfirmation?: boolean | null;
    price?: number | null;
    currency?: string | null;
    length?: number | null;
};
export type UTCOffset = {
    utcOffset?: number | null;
};
export type WithUTCOffsetType<T> = T & {
    user?: Person & UTCOffset;
} & {
    organizer?: Person & UTCOffset;
} & {
    attendees?: (Person & UTCOffset)[];
};
export type WebhookDataType = CalendarEvent & EventTypeInfo & {
    metadata?: {
        [key: string]: string | number | boolean | null;
    };
    bookingId?: number;
    status?: string;
    smsReminderNumber?: string;
    rescheduleId?: number;
    rescheduleUid?: string;
    rescheduleStartTime?: string;
    rescheduleEndTime?: string;
    triggerEvent: string;
    createdAt: string;
    downloadLink?: string;
    paymentId?: number;
};
export declare function jsonParse(jsonString: string): any;
declare const sendPayload: (secretKey: string | null, triggerEvent: string, createdAt: string, webhook: Pick<Webhook, "subscriberUrl" | "appId" | "payloadTemplate">, data: Omit<WebhookDataType, "createdAt" | "triggerEvent">) => Promise<{
    message?: string | undefined;
    ok: boolean;
    status: number;
}>;
export declare const sendGenericWebhookPayload: ({ secretKey, triggerEvent, createdAt, webhook, data, rootData, }: {
    secretKey: string | null;
    triggerEvent: string;
    createdAt: string;
    webhook: Pick<Webhook, "subscriberUrl" | "appId" | "payloadTemplate">;
    data: Record<string, unknown>;
    rootData?: Record<string, unknown>;
}) => Promise<{
    message?: string | undefined;
    ok: boolean;
    status: number;
}>;
export declare const createWebhookSignature: (params: {
    secret?: string | null;
    body: string;
}) => string;
export default sendPayload;
//# sourceMappingURL=sendPayload.d.ts.map