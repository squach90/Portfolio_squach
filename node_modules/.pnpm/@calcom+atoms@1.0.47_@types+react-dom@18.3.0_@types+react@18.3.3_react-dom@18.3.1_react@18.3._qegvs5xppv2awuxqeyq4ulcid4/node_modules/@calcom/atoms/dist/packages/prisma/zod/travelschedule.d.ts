import * as z from "zod";
import { CompleteUser } from "./index";
export declare const _TravelScheduleModel: z.ZodObject<{
    id: z.ZodNumber;
    userId: z.ZodNumber;
    timeZone: z.ZodString;
    startDate: z.ZodDate;
    endDate: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    prevTimeZone: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id: number;
    timeZone: string;
    userId: number;
    startDate: Date;
    endDate?: Date | null | undefined;
    prevTimeZone?: string | null | undefined;
}, {
    id: number;
    timeZone: string;
    userId: number;
    startDate: Date;
    endDate?: Date | null | undefined;
    prevTimeZone?: string | null | undefined;
}>;
export interface CompleteTravelSchedule extends z.infer<typeof _TravelScheduleModel> {
    user: CompleteUser;
}
/**
 * TravelScheduleModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const TravelScheduleModel: z.ZodSchema<CompleteTravelSchedule>;
//# sourceMappingURL=travelschedule.d.ts.map