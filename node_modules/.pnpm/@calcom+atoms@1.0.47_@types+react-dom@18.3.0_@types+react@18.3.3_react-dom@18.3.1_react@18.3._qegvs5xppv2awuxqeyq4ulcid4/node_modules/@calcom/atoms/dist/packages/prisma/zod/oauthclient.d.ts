import * as z from "zod";
import { CompleteAccessCode } from "./index";
export declare const _OAuthClientModel: z.ZodObject<{
    clientId: z.ZodString;
    redirectUri: z.ZodString;
    clientSecret: z.ZodString;
    name: z.ZodString;
    logo: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    clientId: string;
    redirectUri: string;
    clientSecret: string;
    logo?: string | null | undefined;
}, {
    name: string;
    clientId: string;
    redirectUri: string;
    clientSecret: string;
    logo?: string | null | undefined;
}>;
export interface CompleteOAuthClient extends z.infer<typeof _OAuthClientModel> {
    accessCodes: CompleteAccessCode[];
}
/**
 * OAuthClientModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const OAuthClientModel: z.ZodSchema<CompleteOAuthClient>;
//# sourceMappingURL=oauthclient.d.ts.map