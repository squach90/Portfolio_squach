export declare class OrganizationRepository {
    static createWithExistingUserAsOwner({ orgData, owner, }: {
        orgData: {
            name: string;
            slug: string;
            isOrganizationConfigured: boolean;
            isOrganizationAdminReviewed: boolean;
            autoAcceptEmail: string;
            seats: number | null;
            pricePerSeat: number | null;
            isPlatform: boolean;
        };
        owner: {
            id: number;
            email: string;
            nonOrgUsername: string;
        };
    }): Promise<{
        organization: {
            name: string;
            logo: string | null;
            bio: string | null;
            theme: string | null;
            id: number;
            timeFormat: number | null;
            weekStart: string;
            timeZone: string;
            metadata: import('../../../prisma-client').Prisma.JsonValue;
            slug: string | null;
            parentId: number | null;
            hideBranding: boolean;
            brandColor: string | null;
            darkBrandColor: string | null;
            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
            createdAt: Date;
            logoUrl: string | null;
            calVideoLogo: string | null;
            appLogo: string | null;
            appIconLogo: string | null;
            isPrivate: boolean;
            hideBookATeamMember: boolean;
            bannerUrl: string | null;
            isOrganization: boolean;
            pendingPayment: boolean;
            isPlatform: boolean;
        };
        ownerProfile: {
            username: string;
            id: number;
            uid: string;
            userId: number;
            organizationId: number;
            createdAt: Date;
            updatedAt: Date;
        };
    }>;
    static createWithNonExistentOwner({ orgData, owner, }: {
        orgData: {
            name: string;
            slug: string;
            isOrganizationConfigured: boolean;
            isOrganizationAdminReviewed: boolean;
            autoAcceptEmail: string;
            seats: number | null;
            pricePerSeat: number | null;
            isPlatform: boolean;
        };
        owner: {
            email: string;
        };
    }): Promise<{
        orgOwner: {
            username: string | null;
            email: string;
            role: import('../../../prisma-client').$Enums.UserPermissionRole;
            name: string | null;
            bio: string | null;
            theme: string | null;
            verified: boolean | null;
            locked: boolean;
            id: number;
            timeFormat: number | null;
            defaultScheduleId: number | null;
            weekStart: string;
            timeZone: string;
            startTime: number;
            endTime: number;
            metadata: import('../../../prisma-client').Prisma.JsonValue;
            emailVerified: Date | null;
            avatar: string | null;
            avatarUrl: string | null;
            bufferTime: number;
            hideBranding: boolean;
            appTheme: string | null;
            createdDate: Date;
            trialEndsAt: Date | null;
            completedOnboarding: boolean;
            locale: string | null;
            twoFactorSecret: string | null;
            twoFactorEnabled: boolean;
            backupCodes: string | null;
            identityProvider: import('../../../prisma-client').$Enums.IdentityProvider;
            identityProviderId: string | null;
            invitedTo: number | null;
            brandColor: string | null;
            darkBrandColor: string | null;
            away: boolean;
            allowDynamicBooking: boolean | null;
            allowSEOIndexing: boolean | null;
            receiveMonthlyDigestEmail: boolean | null;
            disableImpersonation: boolean;
            organizationId: number | null;
            movedToProfileId: number | null;
            isPlatformManaged: boolean;
            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
        };
        organization: {
            name: string;
            logo: string | null;
            bio: string | null;
            theme: string | null;
            id: number;
            timeFormat: number | null;
            weekStart: string;
            timeZone: string;
            metadata: import('../../../prisma-client').Prisma.JsonValue;
            slug: string | null;
            parentId: number | null;
            hideBranding: boolean;
            brandColor: string | null;
            darkBrandColor: string | null;
            smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
            createdAt: Date;
            logoUrl: string | null;
            calVideoLogo: string | null;
            appLogo: string | null;
            appIconLogo: string | null;
            isPrivate: boolean;
            hideBookATeamMember: boolean;
            bannerUrl: string | null;
            isOrganization: boolean;
            pendingPayment: boolean;
            isPlatform: boolean;
        };
        ownerProfile: {
            username: string;
        };
    }>;
    static create(orgData: {
        name: string;
        slug: string;
        isOrganizationConfigured: boolean;
        isOrganizationAdminReviewed: boolean;
        autoAcceptEmail: string;
        seats: number | null;
        pricePerSeat: number | null;
        isPlatform: boolean;
    }): Promise<{
        name: string;
        logo: string | null;
        bio: string | null;
        theme: string | null;
        id: number;
        timeFormat: number | null;
        weekStart: string;
        timeZone: string;
        metadata: import('../../../prisma-client').Prisma.JsonValue;
        slug: string | null;
        parentId: number | null;
        hideBranding: boolean;
        brandColor: string | null;
        darkBrandColor: string | null;
        smsLockState: import('../../../prisma-client').$Enums.SMSLockState;
        createdAt: Date;
        logoUrl: string | null;
        calVideoLogo: string | null;
        appLogo: string | null;
        appIconLogo: string | null;
        isPrivate: boolean;
        hideBookATeamMember: boolean;
        bannerUrl: string | null;
        isOrganization: boolean;
        pendingPayment: boolean;
        isPlatform: boolean;
    }>;
    static findById({ id }: {
        id: number;
    }): Promise<{
        name: string;
        id: number;
        slug: string | null;
        logoUrl: string | null;
    } | null>;
    static findByIdIncludeOrganizationSettings({ id }: {
        id: number;
    }): Promise<{
        name: string;
        id: number;
        slug: string | null;
        logoUrl: string | null;
        organizationSettings: {
            id: number;
            isOrganizationVerified: boolean;
            isOrganizationConfigured: boolean;
            isAdminReviewed: boolean;
            orgAutoAcceptEmail: string;
            organizationId: number;
            lockEventTypeCreationForUsers: boolean;
            adminGetsNoSlotsNotification: boolean;
        } | null;
    } | null>;
}
//# sourceMappingURL=organization.d.ts.map