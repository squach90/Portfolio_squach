import * as z from "zod";
import { CompleteTeam } from "./index";
export declare const _PlatformBillingModel: z.ZodObject<{
    id: z.ZodNumber;
    customerId: z.ZodString;
    subscriptionId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    plan: z.ZodString;
    billingCycleStart: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    billingCycleEnd: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    overdue: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    id: number;
    plan: string;
    customerId: string;
    subscriptionId?: string | null | undefined;
    billingCycleStart?: number | null | undefined;
    billingCycleEnd?: number | null | undefined;
    overdue?: boolean | null | undefined;
}, {
    id: number;
    plan: string;
    customerId: string;
    subscriptionId?: string | null | undefined;
    billingCycleStart?: number | null | undefined;
    billingCycleEnd?: number | null | undefined;
    overdue?: boolean | null | undefined;
}>;
export interface CompletePlatformBilling extends z.infer<typeof _PlatformBillingModel> {
    team: CompleteTeam;
}
/**
 * PlatformBillingModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const PlatformBillingModel: z.ZodSchema<CompletePlatformBilling>;
//# sourceMappingURL=platformbilling.d.ts.map