import type { UpdateScheduleOutputType } from '../../libraries/index.ts';
import type { ApiResponse, UpdateScheduleInput, ApiErrorResponse } from '../../types/index.ts';
interface IPUpdateOAuthClient {
    onSuccess?: (res: ApiResponse<UpdateScheduleOutputType>) => void;
    onError?: (err: ApiErrorResponse) => void;
}
declare const useUpdateSchedule: ({ onSuccess, onError }?: IPUpdateOAuthClient) => import("@tanstack/react-query").UseMutationResult<ApiResponse<{
    schedule: {
        name: string;
        id: number;
        userId: number;
    };
    isDefault: boolean;
    availability?: undefined;
    timeZone?: undefined;
    prevDefaultId?: undefined;
    currentDefaultId?: undefined;
} | {
    schedule: {
        name: string;
        availability: {
            days: number[];
            date: Date | null;
            id: number;
            startTime: Date;
            endTime: Date;
            eventTypeId: number | null;
            userId: number | null;
            scheduleId: number | null;
        }[];
        eventType: {
            id: number;
            eventName: string | null;
        }[];
        id: number;
        timeZone: string | null;
        userId: number;
    };
    availability: import("@calcom/types/schedule").Schedule;
    timeZone: string;
    isDefault: boolean;
    prevDefaultId: number | null;
    currentDefaultId: number | null;
}>, unknown, UpdateScheduleInput & {
    scheduleId: number;
}, unknown>;
export default useUpdateSchedule;
//# sourceMappingURL=useUpdateSchedule.d.ts.map