import type { TFunction } from "next-i18next";
import type { Membership, OrganizationSettings, Team } from '../../../../../../prisma/client';
import { Prisma, type User as UserType, type UserPassword } from '../../../../../../prisma/client';
import type { Profile as ProfileType } from '../../../../../../prisma/client';
import type { InviteMemberOptions, TeamWithParent } from "./types";
export type Invitee = Pick<UserType, "id" | "email" | "username" | "identityProvider" | "completedOnboarding">;
export type UserWithMembership = Invitee & {
    teams?: Pick<Membership, "userId" | "teamId" | "accepted" | "role">[];
    profiles: ProfileType[];
    password: UserPassword | null;
};
export declare function checkPermissions({ userId, teamId, isOrg, }: {
    userId: number;
    teamId: number;
    isOrg?: boolean;
}): Promise<void>;
export declare function checkInputEmailIsValid(email: string): void;
export declare function getTeamOrThrow(teamId: number): Promise<{
    metadata: {
        requestedSlug?: string | null | undefined;
        paymentId?: string | undefined;
        subscriptionId?: string | null | undefined;
        subscriptionItemId?: string | null | undefined;
        orgSeats?: number | null | undefined;
        orgPricePerSeat?: number | null | undefined;
        migratedToOrgFrom?: {
            teamSlug?: string | null | undefined;
            lastMigrationTime?: string | undefined;
            reverted?: boolean | undefined;
            lastRevertTime?: string | undefined;
        } | undefined;
    } | null;
    parent: ({
        organizationSettings: {
            id: number;
            isOrganizationVerified: boolean;
            isOrganizationConfigured: boolean;
            isAdminReviewed: boolean;
            orgAutoAcceptEmail: string;
            organizationId: number;
            lockEventTypeCreationForUsers: boolean;
            adminGetsNoSlotsNotification: boolean;
        } | null;
    } & {
        name: string;
        logo: string | null;
        bio: string | null;
        theme: string | null;
        id: number;
        timeFormat: number | null;
        weekStart: string;
        timeZone: string;
        metadata: Prisma.JsonValue;
        slug: string | null;
        parentId: number | null;
        hideBranding: boolean;
        brandColor: string | null;
        darkBrandColor: string | null;
        smsLockState: import('../../../../../../prisma-client').$Enums.SMSLockState;
        createdAt: Date;
        logoUrl: string | null;
        calVideoLogo: string | null;
        appLogo: string | null;
        appIconLogo: string | null;
        isPrivate: boolean;
        hideBookATeamMember: boolean;
        bannerUrl: string | null;
        isOrganization: boolean;
        pendingPayment: boolean;
        isPlatform: boolean;
    }) | null;
    organizationSettings: {
        id: number;
        isOrganizationVerified: boolean;
        isOrganizationConfigured: boolean;
        isAdminReviewed: boolean;
        orgAutoAcceptEmail: string;
        organizationId: number;
        lockEventTypeCreationForUsers: boolean;
        adminGetsNoSlotsNotification: boolean;
    } | null;
    name: string;
    logo: string | null;
    bio: string | null;
    theme: string | null;
    id: number;
    timeFormat: number | null;
    weekStart: string;
    timeZone: string;
    slug: string | null;
    parentId: number | null;
    hideBranding: boolean;
    brandColor: string | null;
    darkBrandColor: string | null;
    smsLockState: import('../../../../../../prisma-client').$Enums.SMSLockState;
    createdAt: Date;
    logoUrl: string | null;
    calVideoLogo: string | null;
    appLogo: string | null;
    appIconLogo: string | null;
    isPrivate: boolean;
    hideBookATeamMember: boolean;
    bannerUrl: string | null;
    isOrganization: boolean;
    pendingPayment: boolean;
    isPlatform: boolean;
}>;
export declare function getUsernameOrEmailsToInvite(usernameOrEmail: string | string[]): Promise<string[]>;
export declare function canBeInvited(invitee: UserWithMembership, team: TeamWithParent): boolean;
export declare function getExistingUsersToInvite({ usernamesOrEmails, team, }: {
    usernamesOrEmails: string[];
    team: TeamWithParent;
}): Promise<{
    canBeInvited: boolean;
    username: string | null;
    email: string;
    id: number;
    completedOnboarding: boolean;
    identityProvider: import('../../../../../../prisma-client').$Enums.IdentityProvider;
    teams?: Pick<{
        id: number;
        teamId: number;
        userId: number;
        accepted: boolean;
        role: import('../../../../../../prisma-client').$Enums.MembershipRole;
        disableImpersonation: boolean;
    }, "role" | "userId" | "teamId" | "accepted">[] | undefined;
    profiles: {
        id: number;
        uid: string;
        userId: number;
        organizationId: number;
        username: string;
        createdAt: Date;
        updatedAt: Date;
    }[];
    password: {
        hash: string;
        userId: number;
    } | null;
}[]>;
export declare function getOrgConnectionInfo({ orgAutoAcceptDomain, orgVerified, isOrg, usersEmail, team, }: {
    orgAutoAcceptDomain?: string | null;
    orgVerified: boolean;
    usersEmail: string;
    team: TeamWithParent;
    isOrg: boolean;
}): {
    orgId: number | undefined;
    autoAccept: boolean;
};
export declare function createNewUsersConnectToOrgIfExists({ usernamesOrEmails, input, parentId, autoAcceptEmailDomain, connectionInfoMap, isPlatformManaged, timeFormat, weekStart, timeZone, }: {
    usernamesOrEmails: string[];
    input: InviteMemberOptions["input"];
    parentId?: number | null;
    autoAcceptEmailDomain?: string;
    connectionInfoMap: Record<string, ReturnType<typeof getOrgConnectionInfo>>;
    isPlatformManaged?: boolean;
    timeFormat?: number;
    weekStart?: string;
    timeZone?: string;
}): Promise<{
    username: string | null;
    email: string;
    role: import('../../../../../../prisma-client').$Enums.UserPermissionRole;
    name: string | null;
    bio: string | null;
    theme: string | null;
    verified: boolean | null;
    locked: boolean;
    id: number;
    timeFormat: number | null;
    defaultScheduleId: number | null;
    weekStart: string;
    timeZone: string;
    startTime: number;
    endTime: number;
    metadata: Prisma.JsonValue;
    emailVerified: Date | null;
    avatar: string | null;
    avatarUrl: string | null;
    bufferTime: number;
    hideBranding: boolean;
    appTheme: string | null;
    createdDate: Date;
    trialEndsAt: Date | null;
    completedOnboarding: boolean;
    locale: string | null;
    twoFactorSecret: string | null;
    twoFactorEnabled: boolean;
    backupCodes: string | null;
    identityProvider: import('../../../../../../prisma-client').$Enums.IdentityProvider;
    identityProviderId: string | null;
    invitedTo: number | null;
    brandColor: string | null;
    darkBrandColor: string | null;
    away: boolean;
    allowDynamicBooking: boolean | null;
    allowSEOIndexing: boolean | null;
    receiveMonthlyDigestEmail: boolean | null;
    disableImpersonation: boolean;
    organizationId: number | null;
    movedToProfileId: number | null;
    isPlatformManaged: boolean;
    smsLockState: import('../../../../../../prisma-client').$Enums.SMSLockState;
}[]>;
export declare function createMemberships({ input, invitees, parentId, accepted, }: {
    input: InviteMemberOptions["input"];
    invitees: (UserWithMembership & {
        needToCreateOrgMembership: boolean | null;
    })[];
    parentId: number | null;
    accepted: boolean;
}): Promise<void>;
export declare function sendSignupToOrganizationEmail({ usernameOrEmail, team, translation, inviterName, teamId, isOrg, }: {
    usernameOrEmail: string;
    team: Awaited<ReturnType<typeof getTeamOrThrow>>;
    translation: TFunction;
    inviterName: string;
    teamId: number;
    isOrg: boolean;
}): Promise<void>;
type TeamAndOrganizationSettings = Team & {
    organizationSettings?: OrganizationSettings | null;
};
export declare function getIsOrgVerified(isOrg: boolean, team: TeamAndOrganizationSettings & {
    parent: TeamAndOrganizationSettings | null;
}): {
    isInOrgScope: boolean;
    orgVerified: boolean;
    orgConfigured: boolean;
    autoAcceptEmailDomain: string;
    orgPublished: boolean;
};
export declare function getAutoJoinStatus({ team, invitee, connectionInfoMap, }: {
    team: TeamWithParent;
    invitee: UserWithMembership;
    connectionInfoMap: Record<string, ReturnType<typeof getOrgConnectionInfo>>;
}): {
    autoAccept: boolean;
    needToCreateProfile: null;
    needToCreateOrgMembership: null;
} | {
    autoAccept: boolean | undefined;
    needToCreateProfile: boolean;
    needToCreateOrgMembership: boolean;
};
export declare const groupUsersByJoinability: ({ existingUsersWithMemberships, team, connectionInfoMap, }: {
    team: TeamWithParent;
    existingUsersWithMemberships: (UserWithMembership & {
        profile: {
            username: string;
        } | null;
    })[];
    connectionInfoMap: Record<string, ReturnType<typeof getOrgConnectionInfo>>;
}) => ({
    autoAccept: boolean;
    needToCreateProfile: null;
    needToCreateOrgMembership: null;
    username: string | null;
    email: string;
    id: number;
    completedOnboarding: boolean;
    identityProvider: import('../../../../../../prisma-client').$Enums.IdentityProvider;
    teams?: Pick<{
        id: number;
        teamId: number;
        userId: number;
        accepted: boolean;
        role: import('../../../../../../prisma-client').$Enums.MembershipRole;
        disableImpersonation: boolean;
    }, "role" | "userId" | "teamId" | "accepted">[] | undefined;
    profiles: ProfileType[];
    password: UserPassword | null;
    profile: {
        username: string;
    } | null;
} | {
    autoAccept: boolean | undefined;
    needToCreateProfile: boolean;
    needToCreateOrgMembership: boolean;
    username: string | null;
    email: string;
    id: number;
    completedOnboarding: boolean;
    identityProvider: import('../../../../../../prisma-client').$Enums.IdentityProvider;
    teams?: Pick<{
        id: number;
        teamId: number;
        userId: number;
        accepted: boolean;
        role: import('../../../../../../prisma-client').$Enums.MembershipRole;
        disableImpersonation: boolean;
    }, "role" | "userId" | "teamId" | "accepted">[] | undefined;
    profiles: ProfileType[];
    password: UserPassword | null;
    profile: {
        username: string;
    } | null;
})[][];
export declare const sendEmails: (emailPromises: Promise<void>[]) => Promise<void>;
export declare const sendExistingUserTeamInviteEmails: ({ existingUsersWithMemberships, language, currentUserTeamName, currentUserName, currentUserParentTeamName, isOrg, teamId, isAutoJoin, orgSlug, }: {
    language: TFunction;
    isAutoJoin: boolean;
    existingUsersWithMemberships: (UserWithMembership & {
        profile: {
            username: string;
        } | null;
    })[];
    currentUserTeamName?: string;
    currentUserParentTeamName: string | undefined;
    currentUserName?: string | null;
    isOrg: boolean;
    teamId: number;
    orgSlug: string | null;
}) => Promise<void>;
export {};
//# sourceMappingURL=utils.d.ts.map