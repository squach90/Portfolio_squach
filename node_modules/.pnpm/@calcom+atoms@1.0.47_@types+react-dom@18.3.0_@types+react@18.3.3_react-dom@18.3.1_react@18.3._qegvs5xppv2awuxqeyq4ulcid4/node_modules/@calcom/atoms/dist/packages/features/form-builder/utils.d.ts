import type z from "zod";
import type { fieldSchema } from "./schema";
export declare const preprocessNameFieldDataWithVariant: (variantName: "fullName" | "firstAndLastName", value: string | Record<"firstName" | "lastName", string> | undefined) => string | Record<"firstName" | "lastName", string>;
export declare const getFullName: (name: string | {
    firstName: string;
    lastName?: string;
} | undefined) => string;
/**
 * Get's the field's variantsConfig and if not available, then it will get the default variantsConfig from the fieldTypesConfigMap
 */
export declare const getVariantsConfig: (field: Pick<z.infer<typeof fieldSchema>, "variantsConfig" | "type">) => {
    variants: Record<string, {
        fields: {
            name: string;
            type: "number" | "boolean" | "select" | "text" | "checkbox" | "email" | "address" | "name" | "radio" | "textarea" | "multiselect" | "phone" | "multiemail" | "radioInput";
            required?: boolean | undefined;
            label?: string | undefined;
            placeholder?: string | undefined;
            labelAsSafeHtml?: string | undefined;
        }[];
    }>;
} | undefined;
//# sourceMappingURL=utils.d.ts.map