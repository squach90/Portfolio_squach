import * as z from "zod";
import { CompleteTeam, CompleteBooking } from "./index";
export declare const _InstantMeetingTokenModel: z.ZodObject<{
    id: z.ZodNumber;
    token: z.ZodString;
    expires: z.ZodDate;
    teamId: z.ZodNumber;
    bookingId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    expires: Date;
    id: number;
    teamId: number;
    token: string;
    createdAt: Date;
    updatedAt: Date;
    bookingId?: number | null | undefined;
}, {
    expires: Date;
    id: number;
    teamId: number;
    token: string;
    createdAt: Date;
    updatedAt: Date;
    bookingId?: number | null | undefined;
}>;
export interface CompleteInstantMeetingToken extends z.infer<typeof _InstantMeetingTokenModel> {
    team: CompleteTeam;
    booking?: CompleteBooking | null;
}
/**
 * InstantMeetingTokenModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export declare const InstantMeetingTokenModel: z.ZodSchema<CompleteInstantMeetingToken>;
//# sourceMappingURL=instantmeetingtoken.d.ts.map